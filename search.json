[{"title":"Python基础","url":"/2024/10/14/Python基础/","content":"\n本文档主要涉及使用Python编写函数时，经常使用的语法，并不是系统性的介绍Python的各方面。\n\n## 数据类型\n\n注意Python在声明变量时并不需要指定数据类型\n\n### 简单类型\n\n- **整数(int)**\n- **浮点数(float)** 【注意Python没有Double类型】\n- **复数(complex)**\n- **字符串(str)**\n- **布尔值(bool)**\n- **空值(None)**\n\n### 容器类型\n\n- **列表list**\n- **元组tuple**\n- **字典dict**\n- **集合set**\n\n```python\nls = ['hello!', '333']\ntp = ('hello!', '333') \ndc = {'hello!': '333'}\nst = {'hello!', '333'}\n```\n\n性质\n\n| 数据结构      | 定义符号     | 元素是否可变 | 元素是否可重复          | 元素是否有序 |\n| ------------- | ------------ | ------------ | ----------------------- | ------------ |\n| 列表（list）  | []           | 可变         | 可重复                  | 有序         |\n| 元组（tuple） | ()           | 不可变       | 可重复                  | 有序         |\n| 字典（dict）  | {key: value} | 可变         | key不可重复 value可重复 | 无序         |\n| 集合（set）   | {}           | 可变         | 不可重复                | 无序         |\n\n## 输入\n\n### 单个输入\n\n```python\nuser_input = input(\"请输入内容: \")\n```\n\n### 单个数字输入\n\n默认情况下，`input()` 函数返回的内容是字符串。如果你需要将输入转换为其他数据类型（如整数或浮点数），可以使用类型转换函数。\n\n```python\nage = int(input(\"请输入你的年龄: \"))\n# 这里将用户输入的年龄从字符串转换为整数，以便进行数学运算。\n```\n\n### 多个数字输入\n\n```python\na,b,c = list(map(int, input().split))\n```\n\n解释：\n\n**`input()`**:函数用于获取用户的输入。默认情况下，它返回一个字符串。\n\n**`input().split()`**:方法用于将输入的字符串分割成多个部分，默认是按空格进行分割。它返回一个字符串列表。例如，如果用户输入 `1 2 3`，则 `input().split()` 会返回 `['1', '2', '3']`。\n\n**`map(int, input().split())`**:\n\n- `map()` 函数接受两个参数：一个函数（这里是 `int`）和一个可迭代对象（这里是 `input().split()` 的返回值）。它将 `int` 函数应用于列表中的每个元素，将字符串转换为整数。因此，`map(int, input().split())` 将返回一个可迭代对象，其中包含整数。\n\n**`list(map(...))`**: 函数用于将 `map` 对象转换为列表。最终结果是一个包含输入整数的列表。\n\n**`x a, b, c = list(...)`**:\n\n- 这个部分是一个解包赋值。它将列表中的值依次赋给变量 `x`、`a`、`b` 和 `c`。需要注意的是，如果 `list(map(...))` 返回的列表中元素的数量与变量的数量不匹配，将会抛出 `ValueError`。\n\n### 多个输入\n\n你可以使用 `split()` 方法来接受多个输入并将其分隔成列表。\n\n```python\nfruits = input(\"请输入你喜欢的水果，用空格分隔: \")\nfruit_list = fruits.split()  # 根据空格将输入分隔成列表\nprint(\"你喜欢的水果有:\", fruit_list)\n```\n\n## 打印\n\n标准格式：\n\n```python\nprint(objects, sep=' ', end='\\n', file=sys.stdout, flush=False)\n```\n\n- 默认打印完成自动换行 end='\\n'，相当于Java里的System.out.println()。\n- 默认打印对象之间使用一个空格连接sep=' '。\n- 默认在控制台打印file=sys.stdout，亦可写入指定文件。\n- 默认情况下，print() 函数会在遇到换行符时自动刷新输出。如果想要立即刷新输出，可以将 flush 参数设置为 True。\n\n## 格式化数据\n\n```python\n# 原始数字\nnumber = 1480356.759\n\n# 1. 保留2位小数（直接截断）\ntruncated = \"{:.2f}\".format(number)  # 截断后保留两位小数\n\n# 2. 四舍五入保留2位小数\nrounded = round(number, 2)  # 四舍五入保留两位小数\n\n# 3. 每三位加上一个逗号\nwith_commas = \"{:,}\".format(number)  # 添加千位分隔符\n\n# 4. 百分比形式\npercentage = \"{:.2%}\".format(number)  # 将数字转换为百分比形式\n```\n\n## 循环控制\n\n在 Python 中，可以使用 `for ... in ...` 遍历任何可迭代对象（iterable）。可迭代对象是指实现了 `__iter__()` 或 `__getitem__()` 方法的对象。以下是常见的一些可以使用 `for ... in ...` 遍历的类型：\n\n字符串\n\n```pyth\nfor i in 'apple':\n    print(i)\n```\n\n- i依次表示字符串变量中的每一个字符\n\n数组\n\n```python\nverb = [\"af\",\"hh\",\"afret\",\"eryj\"]\nfor i in verb:\n    print(i)\n```\n\nrange 对象\n\n```python\nfor i in range(5):\n    print(i)\n```\n\n字典\n\n```python\nfor key, value in d.items():\n    print(key, value)\n```\n\n注意，当我们不需要使用遍历对象里的实际值的时候，可用`_`代替\n\n```python\nfor _ in range(5):\n    print(\"ok\")\n```\n\n\n\n## 栈\n\n使用列表模拟\n\n```python\nstack = []\n# 入栈\nstack.append(1)\n# 出栈\ntop_element = stack.pop()\n```\n\n\n\n## 队列\n\n使用列表模拟\n\n```python\nqueue = []\n# 入队\nqueue.append(1)\n# 出队\nfront_element = queue.pop(0)\n```\n\n- 使用 `pop(0)`的时间复杂度是O(n)，对于大型数据量不适合使用\n- pop() 函数默认参数是-1\n\n## 字典\n\n### 创建\n```python\n# 空字典\nmy_dict = {}\n# 带有初始值的字典\nmy_dict = {\"name\": \"Alice\", \"age\": 25, \"city\": \"Beijing\"}\n```\n\n### 访问字典元素\n可以通过键来访问字典中的值：\n```python\nname = my_dict[\"name\"]\nprint(name)  # 输出: Alice\n```\n\n### 添加或更新元素\n可以通过赋值的方式添加或更新键值对：\n```python\nmy_dict[\"age\"] = 26  # 更新age键的值\nmy_dict[\"country\"] = \"China\"  # 添加新的键值对\nprint(my_dict)  # 输出: {'name': 'Alice', 'age': 26, 'city': 'Beijing', 'country': 'China'}\n```\n\n### 删除元素\n使用 `pop()` 方法删除指定键，并返回该键对应的值：\n```python\nage = my_dict.pop(\"age\")\nprint(age)  # 输出: 26\nprint(my_dict)  # 输出: {'name': 'Alice', 'city': 'Beijing', 'country': 'China'}\n```\n\n使用 `del` 关键字删除键值对：\n```python\ndel my_dict[\"city\"]\nprint(my_dict)  # 输出: {'name': 'Alice', 'country': 'China'}\n```\n\n### 遍历\n可以使用 `items()` 方法遍历键值对：\n```python\nfor key, value in my_dict.items():\n    print(key, value)\n```\n\n使用 `keys()` 和 `values()` 方法遍历键或值：\n```python\n# 遍历键\nfor key in my_dict.keys():\n    print(key)\n# 遍历值\nfor value in my_dict.values():\n    print(value)\n```\n\n### 检查键是否存在\n使用 `in` 关键字检查字典中是否包含某个键：\n```python\nif \"name\" in my_dict:\n    print(\"Name exists\")\n```\n\n## 列表\n\n### 创建/初始化\n\n```python\nlst = []\n# 或者\nlst = list()\n\n# 创建一个包含5个元素的列表，每个元素为0\nlst = [0] * 5  # [0, 0, 0, 0, 0]\n\n# 创建包含偶数的列表\nlst_even = [x for x in range(10) if x % 2 == 0]\n\n#使用 list() 函数将其他可迭代对象转换为列表\nlst = list(\"hello\")  # ['h', 'e', 'l', 'l', 'o']\nlst = list((1, 2, 3))  # [1, 2, 3]\nlst = list({1, 2, 3})  # [1, 2, 3]，顺序可能不同\n\n# 创建包含0到9的列表\nlst = list(range(10))  # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# m*n二维列表并初始化为1\nmatrix = [[1 for _ in range(n)] for _ in range(m)]\n```\n\n### 添加元素\nappend(x)：在列表末尾添加一个元素 `x`。\n\n```python\nlst = [1, 2, 3]\nlst.append(4)  # [1, 2, 3, 4]\n```\n\n### 删除元素\npop([i])：删除并返回指定索引 `i` 处的元素。不指定索引时，默认删除并返回最后一个元素。\n\n```python\nlst.pop()     # [1, 2, 3, 4, 6]\nlst.pop(1)    # [1, 3, 4, 6]\n```\n\n### 排序\nsort(key=None, reverse=False)：对列表进行原地排序。`key` 是一个函数，用来指定排序规则；`reverse=True` 表示降序排序。\n\n```python\nlst = [3, 1, 4, 2]\nlst.sort()          # [1, 2, 3, 4]\nlst.sort(reverse=True)  # [4, 3, 2, 1]\n```\n\nsorted(list, key=None, reverse=False)：返回一个排序后的新列表，不改变原列表。\n\n```python\nsorted_lst = sorted(lst)  # 原列表 lst 保持不变\n```\n\n### 长度\nlen(list)：返回列表中元素的数量。\n\n```python\nlength = len(lst)  # 4\n```\n\n### 切片\n切片操作：可以通过切片获取列表的子列表，支持步长。\n\n```python\nsub_lst = lst[1:3]       # [4, 2]\nsub_lst_with_step = lst[::2]  # [1, 2]\n```\n\n### 是否存在\nin 和 not in：检查元素是否在列表中。\n\n```python\nexists = 3 in lst        # True\nnot_exists = 5 not in lst  # True\n```\n\n### 逆置\n\n```python\n# 原地反转\nmy_list = [1, 2, 3, 4, 5]\nmy_list.reverse()\n\n# 不修改原列表\nnew_list = my_list[::-1]\n```\n\n### 去重\n\n```python\na = list(set(a))\n```\n\n## 字符串函数\n\n在 Python 中，字符串是一个重要的数据类型，提供了多种内置方法来处理和操作字符串。以下是一些常用的字符串方法及其功能：\n\n### 大小写\n\n**`str.lower()`**: 将字符串中的所有字符转换为小写。\n\n```python\ns = \"Hello World\"\nprint(s.lower())  # 输出: hello world\n```\n\n**`str.upper()`**: 将字符串中的所有字符转换为大写。\n\n```python\ns = \"Hello World\"\nprint(s.upper())  # 输出: HELLO WORLD\n```\n\n### 查找和替换\n\n**`str.find(sub)`**: 查找子字符串 `sub` 在字符串中的第一个位置，如果未找到则返回 `-1`。\n\n```python\ns = \"Hello World\"\nprint(s.find(\"World\"))  # 输出: 6\n```\n\n**`str.replace(old, new)`**: 将字符串中的 `old` 子串替换为 `new` 子串。\n\n```python\ns = \"Hello World\"\nprint(s.replace(\"World\", \"Python\"))  # 输出: Hello Python\n```\n\n### 切割和连接\n\n**`str.split(sep)`**: 根据指定的分隔符 `sep` 将字符串切割为列表。\n\n```python\ns = \"Hello World\"\nprint(s.split())  # 输出: ['Hello', 'World']\n```\n\n**`str.join(iterable)`**: 将可迭代对象中的字符串连接成一个新的字符串。\n\n```python\nwords = [\"Hello\", \"World\"]\nprint(\" \".join(words))  # 输出: Hello World\n```\n\n### 去除空白\n\n**`str.strip()`**: 去除字符串开头和结尾的空白字符。\n\n```python\ns = \"   Hello World   \"\nprint(s.strip())  # 输出: Hello World\n\n# str.lstrip(): 去除字符串开头的空白字符。\ns = \"   Hello World   \"\nprint(s.lstrip())  # 输出: Hello World   \n\n#str.rstrip(): 去除字符串结尾的空白字符。\ns = \"   Hello World   \"\nprint(s.rstrip())  # 输出:    Hello World\n```\n\n### 格式化字符串\n\n**`str.format()`**: 用于格式化字符串，插入变量值。\n\n```python\nname = \"Alice\"\nage = 30\ns = \"My name is {} and I am {} years old.\".format(name, age)\nprint(s)  # 输出: My name is Alice and I am 30 years old.\n```\n\n### 检查字符串\n\n**`str.startswith(prefix)`**: 检查字符串是否以指定的前缀开头。\n\n```python\ns = \"Hello World\"\nprint(s.startswith(\"Hello\"))  # 输出: True\n```\n\n**`str.endswith(suffix)`**: 检查字符串是否以指定的后缀结尾。\n\n```python\ns = \"Hello World\"\nprint(s.endswith(\"World\"))  # 输出: True\n```\n\n### 其他\n\n**`str.count(sub)`**: 计算子字符串在字符串中出现的次数。\n\n```python\ns = \"Hello World\"\nprint(s.count(\"o\"))  # 输出: 2\n```\n\n**`str.isdigit()`**: 检查字符串是否只包含数字。\n\n```python\ns = \"12345\"\nprint(s.isdigit())  # 输出: True\n```\n\n**`str.isalpha()`**: 检查字符串是否只包含字母。\n\n```python\ns = \"Hello\"\nprint(s.isalpha())  # 输出: True\n```\n\n## 数学函数\n\n```python\n# 四舍五入（format格式化输出亦可） 第二个参数是精度\nrounded_number = round(number, 1)\n# 假设 a>b\na = max(a,b)\nb = min(a,b)\n```\n\n注意：对于max,min函数\n\n如果只有一个参数，必须是一个可迭代对象（例如列表、元组、字符串等）也即实现了 `__iter__()`__方法的类的实例\n\n### 查看数据类型\n\n```python\nprint(type(\"6\"))\n```\n\n### **范围函数range**\n\n```python\nrange(a,b)\n\n# 常用于if条件判断和for循环中\n```\n\n- range里只有一个数(a)，则从0开始，步长为1，到a-1结束\n- range里有两个数(a,b)，则从a开始，到b-1结束.步长为1\n- range里有三个数(a,b,c)，则从a开始，到b-c结束.步长为c\n- 区间是左闭右开 即 $[a,b)$\n\n### 随机数\n\n```python\nimport random\nnumber = random.randint(lower_bound, upper_bound)\n```\n\n- 需要引入random包\n- 需要给定上下限。\n- 仅满足统计学上的均匀分布，并不具备不可预测性。\n\n## 其它\n\n### 三元表达式\n\nPython实际上没有三元表达式，，，这只是一种代替写法\n\n```python\ncondition_is_true if condition else condition_is_false\n1 if a>b else 2\n```\n\n### 交换数组两个元素\n\n元素直接交换\n\n```python\na = 5\nb = 8\na,b = b,a\n```\n\n数组元素交换\n\n```pyth\nnum =[456,3,5,8,78,54,94,12,63]\nnum[5],num[3] = num[3],num[5]\n```\n","tags":["Python"],"categories":["computer_technology"]},{"title":"LINQ","url":"/2024/10/03/LINQ/","content":"\n\n\n### 什么是LINQ\n\nLINQ（Language-Integrated Query，语言集成查询）是微软在 .NET 框架中引入的一种数据查询方法。它允许开发者使用类似于 SQL 的语法，在编程语言（如 C#、VB.NET）中直接对各种数据源（如集合、数据库、XML 等）进行查询操作。LINQ 的主要优势在于其统一的查询语法和与编程语言的紧密集成，使得数据操作更加简洁、类型安全且易于维护。\n\n\n\n### LINQ 的主要组成部分\n\nLINQ 支持查询不同类型的数据源，主要包括以下几个部分：\n\n1. **LINQ to Objects**\n   - **功能**：用于对内存中的对象集合（如 `List<T>`、`Array`、`Dictionary<T>` 等）进行查询和操作。它不需要任何外部资源，完全基于 .NET 集合框架。\n   - **使用场景**：当你有内存中的数据，如通过计算生成的数据或从文件中读取的数据时，使用 LINQ to Objects 进行过滤、排序、分组等操作非常方便。\n   - **示例**：\n     ```csharp\n     List<int> numbers = new List<int> { 1, 2, 3, 4, 5, 6 };\n     // 查询所有偶数\n     var evenNumbers = from num in numbers\n                       where num % 2 == 0\n                       select num;\n     // 使用方法链语法\n     var evenNumbersMethod = numbers.Where(num => num % 2 == 0).ToList();\n     ```\n\n2. **LINQ to SQL**\n   - **功能**：用于查询 SQL Server 数据库，将数据库表映射为 .NET 类，允许使用 LINQ 语法执行查询操作。它的目标是让开发者用更直观的面向对象方式与数据库进行交互，而不是通过 SQL 字符串。\n   - **使用场景**：当你想要访问 SQL Server 数据库并进行 CRUD 操作时，可以使用 LINQ to SQL。你可以将数据库中的表与 .NET 对象一一映射，通过查询表达式来操作数据。\n   - **示例**：\n     ```csharp\n     using (var db = new DataContext())\n     {\n         // 查询来自 \"Customers\" 表的所有北京的客户\n         var beijingCustomers = from customer in db.GetTable<Customer>()\n                                where customer.City == \"Beijing\"\n                                select customer;\n         // 或者使用方法链语法\n         var beijingCustomersMethod = db.GetTable<Customer>().Where(c => c.City == \"Beijing\").ToList();\n     }\n     ```\n\n3. **LINQ to XML**\n   - **功能**：用于处理 XML 数据，提供了一种方便的方式来查询、创建和修改 XML 文档。它与传统的 `System.Xml` 类库不同，更加简洁、直观。\n   - **使用场景**：当你需要读取、查询或生成 XML 数据时，LINQ to XML 是一种强大的工具。它可以在应用程序中动态解析和处理 XML 数据。\n   - **示例**：\n     ```csharp\n     // 读取并查询 XML 文件\n     XDocument doc = XDocument.Load(\"books.xml\");\n     var books = from book in doc.Descendants(\"book\")\n                 where (string)book.Element(\"author\") == \"J.K. Rowling\"\n                 select book;\n     \n     // 使用方法链语法\n     var booksMethod = doc.Descendants(\"book\").Where(b => (string)b.Element(\"author\") == \"J.K. Rowling\");\n     ```\n\n4. **LINQ to Entities（Entity Framework）**\n   - **功能**：基于 Entity Framework（EF）的 LINQ 查询方式，通过 ORM（对象关系映射）技术将数据库中的表映射为实体类，使得开发者可以使用 LINQ 对数据库进行查询和操作。LINQ to Entities 是 LINQ to SQL 的一个升级版，支持更多的数据库（不仅仅是 SQL Server）。\n   - **使用场景**：当你使用 Entity Framework 时，LINQ to Entities 可以让你通过实体类来查询数据库，而不需要直接编写 SQL 语句。\n   - **示例**：\n     ```csharp\n     using (var context = new MyDbContext())\n     {\n         // 查询价格大于 100 的所有产品\n         var expensiveProducts = from product in context.Products\n                                 where product.Price > 100\n                                 select product;\n         \n         // 使用方法链语法\n         var expensiveProductsMethod = context.Products.Where(p => p.Price > 100).ToList();\n     }\n     ```\n\n5. **LINQ to DataSet**\n   - **功能**：用于查询 `DataSet` 或 `DataTable` 对象，它们通常从数据库或 XML 文件中填充数据。LINQ to DataSet 提供了一种方便的方法来查询 ADO.NET 数据结构。\n   - **使用场景**：当你使用传统的 ADO.NET 数据集和表结构时，LINQ to DataSet 可以让你用类似 SQL 的语法查询这些结构，而不必手动遍历行。\n   - **示例**：\n     ```csharp\n     DataSet ds = GetDataSet(); // 假设已经有数据集\n     var products = from product in ds.Tables[\"Products\"].AsEnumerable()\n                    where product.Field<decimal>(\"Price\") > 100\n                    select product;\n     ```\n\n### LINQ 的语法形式\n\nLINQ 提供了两种主要的查询语法，每种都有其独特的用途：\n\n1. **查询表达式语法（Query Expression Syntax）**：\n   - **描述**：它是一种类 SQL 的语法，开发者使用 `from`, `where`, `select`, `group by`, `orderby` 等关键字来编写查询表达式。这种语法更加接近自然语言，特别适合熟悉 SQL 的开发者。\n   - **优势**：当你需要处理复杂的查询时，如分组、连接等，查询表达式语法会让代码更易读、更直观。\n   - **例子**：\n     ```csharp\n     var numbers = new List<int> { 1, 2, 3, 4, 5, 6 };\n     \n     // 查询所有偶数\n     var evenNumbers = from num in numbers\n                       where num % 2 == 0\n                       select num;\n     \n     foreach (var number in evenNumbers)\n     {\n         Console.WriteLine(number); // 输出 2, 4, 6\n     }\n     ```\n\n2. **方法链语法（Method Syntax 或 Fluent Syntax）**：\n   - **描述**：这种语法基于扩展方法（即集合类上的 `.Where()`、`.Select()` 等方法），可以通过链式调用来构建查询。它通常更加灵活，适合函数式编程风格。\n   - **优势**：方法链语法在处理简单查询时十分高效，且与 .NET 的其他函数式编程方法（如 `lambda 表达式`）结合使用时非常强大。\n   - **例子**：\n     ```csharp\n     var numbers = new List<int> { 1, 2, 3, 4, 5, 6 };\n     \n     // 使用方法链语法查询所有偶数\n     var evenNumbers = numbers.Where(num => num % 2 == 0);\n     \n     foreach (var number in evenNumbers)\n     {\n         Console.WriteLine(number); // 输出 2, 4, 6\n     }\n     ```\n\n### 查询表达式语法和方法链语法的对比\n\n| 特点         | 查询表达式语法                                 | 方法链语法                              |\n| ------------ | ---------------------------------------------- | --------------------------------------- |\n| 语法风格     | 类 SQL                                         | 函数式编程                              |\n| 适合场景     | 复杂查询（分组、连接、嵌套查询）               | 简单、灵活的查询（过滤、投影等）        |\n| 代码可读性   | 类似自然语言，易于理解                         | 更简洁，但对于复杂查询的可读性可能较差  |\n| 表达的灵活性 | 稍微不如方法链灵活，某些高级操作需要转为方法链 | 灵活，支持所有扩展方法、lambda 表达式等 |\n| 学习难度     | 熟悉 SQL 的人容易上手                          | 需要掌握扩展方法和 lambda 表达式        |\n\n### 常用的 LINQ 操作符\n\n- **Where**：筛选集合中的元素。\n  ```csharp\n  var result = numbers.Where(n => n % 2 == 0);\n  ```\n- **Select**：投影（映射）操作，返回新的集合。\n  ```csharp\n  var squares = numbers.Select(n => n * n);\n  ```\n- **OrderBy/OrderByDescending**：排序。\n  ```csharp\n  var ordered = numbers.OrderBy(n => n);\n  ```\n- **GroupBy**：对集合分组。\n  ```csharp\n  var groups = numbers.GroupBy(n => n % 2);\n  ```\n- **Join**：连接两个集合。\n  ```csharp\n  var result = from c in customers\n               join o in orders on c.CustomerId equals o.CustomerId\n               select new { c.Name, o.OrderDate };\n  ```\n","tags":[".NET"],"categories":["computer_technology"]},{"title":"R语言快速入门","url":"/2024/09/16/R语言快速入门/","content":"\nR语言是一种专为统计计算和数据分析设计的编程语言和软件环境，广泛用于数据科学、统计建模、数据可视化、机器学习等领域。（事实上，除了极少领域，R已经被Python全方位替代了🤣）\n\nR几乎是和Python一样简单明了，下面列举以下R语言的代码特殊地方，使一个使用其他语言编程的人可以快速读懂R语言代码：\n\n## 基本\n\n### 赋值符号\n   - **R的独特之处**：R中常用 `<-` 来表示赋值，虽然 `=` 也可以用，但 `<-` 更常见。\n   - **示例**：\n     ```r\n     x <- 10  # 使用<- 赋值\n     y = 20   # 使用= 赋值\n     ```\n   - **其他语言对比**：其他语言通常使用 `=` 进行赋值。\n\n### 索引从1开始\n\n   - **R的独特之处**：R的向量、数组和矩阵索引从1开始。\n\n   - **示例**：\n\n     ```r\n     x <- c(10, 20, 30)\n     print(x[1])  # 输出: 10\n     ```\n\n   - **其他语言对比**：像C、Python、Java等大多数编程语言的数组索引是从0开始的。\n\n###  **负数索引**\n\nR中的索引不仅可以使用正数，还可以使用负数。**负数索引用于排除某些元素**，即返回除了被负数索引的元素以外的所有元素。\n\n- **用法**：当你想从一个向量或数据框中排除某个元素时，可以使用负数索引。\n\n- **示例**：\n\n  ```\n  r复制代码x <- c(10, 20, 30, 40, 50)\n  print(x[-2])  # 输出: 10 30 40 50，排除了第2个元素20\n  print(x[-c(1, 3)])  # 输出: 20 40 50，排除了第1和第3个元素\n  ```\n\n- **说明**：负数索引告诉R排除指定位置的元素，与其他编程语言不同，R中没有直接的删除操作，而是通过负数索引实现过滤。在Python中负数索引倒数。\n\n\n### 函数定义与返回值\n   - **R的独特之处**：R中的函数通过 `function` 关键字定义，且函数中的最后一行表达式会自动返回值，也可以使用 `return()` 明确返回值。\n   - **示例**：\n     ```r\n     my_function <- function(x) {\n       y <- x * 2\n       y  # 自动返回最后一行的结果\n     }\n     print(my_function(5))  # 输出: 10\n     ```\n   - **其他语言对比**：其他语言通常需要显式使用 `return` 语句返回值。\n\n### 缺失值和逻辑运算\n   - **R的独特之处**：R使用 `NA` 表示缺失值，不能直接用逻辑运算符比较 `NA`，需要使用 `is.na()` 函数来检查。\n   - **示例**：\n     ```r\n     x <- c(1, 2, NA, 4)\n     print(is.na(x))  # 输出: FALSE FALSE TRUE FALSE\n     ```\n   - **其他语言对比**：在其他语言中，可能会使用 `null` 或 `None` 来表示缺失值。\n\n### 数据类型的灵活转换\n   - **R的独特之处**：R自动执行数据类型转换，例如在计算中数字和字符之间的转换。某些情况可能会导致意外的行为。\n   - **示例**：\n     \n     ```r\n     x <- c(1, \"text\", 3)\n     print(x)  # 输出: \"1\" \"text\" \"3\"（都被转换为字符类型）\n     ```\n   - **其他语言对比**：许多语言需要明确指定类型转换。\n\n### 向量与列表的区别\n   - **R的独特之处**：R中向量必须是同类型的，而列表可以包含不同类型的数据。\n   - **示例**：\n     \n     ```r\n     v <- c(1, 2, 3)  # 向量\n     l <- list(1, \"text\", TRUE)  # 列表\n     ```\n\n### **管道操作符 `%>%`**\n\n管道操作符 `%>%` 来自 `magrittr` 包，被广泛用于 `dplyr` 等包中。它用于**将左侧表达式的结果作为右侧函数的输入**，从而可以简化代码的结构，提升可读性。\n\n- **用法**：将一个表达式的输出直接传递给下一个函数作为输入，避免嵌套多层函数调用。\n\n- **示例**：\n\n  ```R\n  library(dplyr)\n  data <- data.frame(x = 1:5, y = 6:10)\n  # 不使用管道操作符\n  result <- arrange(filter(data, x > 2), desc(y))\n  # 使用管道操作符\n  result <- data %>%\n    filter(x > 2) %>%\n    arrange(desc(y))\n  print(result)\n  ```\n\n- **说明**：管道操作符 `%>%` 可以避免嵌套函数调用，让代码更清晰直观。它通过将前面的结果传递给下一个函数，仿佛是逐步构建操作链。\n\n### **组合函数 `c()`**\n\n`c()` 是 R 中的**组合函数**，用于创建向量或将元素组合成一个向量。`c` 代表**combine（组合）**，是R中最常用的函数之一。\n\n- **用法**：将多个数值、字符、布尔值或其他数据组合成一个向量。\n\n- **示例**：\n\n  ```\n  r复制代码# 数值向量\n  x <- c(1, 2, 3, 4, 5)\n  \n  # 字符向量\n  y <- c(\"A\", \"B\", \"C\")\n  \n  # 混合向量\n  z <- c(1, \"B\", TRUE)\n  \n  print(x)  # 输出: 1 2 3 4 5\n  print(y)  # 输出: \"A\" \"B\" \"C\"\n  print(z)  # 输出: \"1\" \"B\" \"TRUE\" (都被转为字符)\n  ```\n\n- **说明**：`c()` 会将输入的元素组合成一个向量，并且如果元素类型不同，会进行类型转换（通常转为字符类型）。\n\n### `which()` 函数\n\n`which()` 是一个非常有用的函数，它用于**返回满足条件的索引**。常用于查找满足逻辑条件的元素在向量或数据框中的位置。\n\n- **用法**：传递一个逻辑向量，`which()` 会返回为 `TRUE` 的索引。\n\n- **示例**：\n\n  ```\n  r复制代码x <- c(5, 10, 15, 20, 25)\n  \n  # 查找大于10的元素索引\n  idx <- which(x > 10)\n  print(idx)  # 输出: 3 4 5\n  \n  # 查找等于20的元素索引\n  idx <- which(x == 20)\n  print(idx)  # 输出: 4\n  ```\n\n- **说明**：`which()` 返回满足条件的元素在向量中的位置，非常适合用于数据子集选择或条件过滤。\n\n### 数据框（Data Frame）\n\n   - **R的独特之处**：数据框是R中特别常用的数据结构，类似于SQL表格或Excel中的数据表。它是一个二维列表，列是不同类型的数据，行表示观测值。\n\n   - **示例**：\n\n     ```r\n     df <- data.frame(Name = c(\"Alice\", \"Bob\"), Age = c(25, 30))\n     print(df)\n     # 输出:\n     #   Name Age\n     # 1 Alice  25\n     # 2   Bob  30\n     ```\n\n   - **其他语言对比**：Python中使用Pandas库的`DataFrame`类似。\n\n## 统计分析\n\n这是一些较常用的设计统计分析的函数，更多函数可以参考相关手册\n\n示例数据\n\n```r\n# 创建一个示例数据集\ndata <- c(5, 10, 15, 20, 25, 30, 35, 40, 45, 50)\n```\n\n### `summary()`\n\n汇总统计信息\n\n```r\nsummary(data)\n# 输出：最小值、四分位数、均值、最大值等\n```\n\n### `mean()`\n\n计算均值\n\n```r\nmean_value <- mean(data)\nmean_value\n# 输出：均值，例如 27.5\n```\n\n### `median()`\n\n计算中位数\n\n```r\nmedian_value <- median(data)\nmedian_value\n# 输出：中位数，例如 27.5\n```\n\n### `sd()`\n\n计算标准差\n\n```r\nsd_value <- sd(data)\nsd_value\n# 输出：标准差，例如 15.13825\n```\n\n### `var()`\n\n计算方差\n\n```r\nvar_value <- var(data)\nvar_value\n# 输出：方差，例如 229.1667\n```\n\n### `range()`\n\n计算数据的范围（最小值和最大值）\n\n```r\nrange_value <- range(data)\nrange_value\n# 输出：范围，例如 5 50\n```\n\n### `quantile()`\n\n计算分位数\n\n```r\nquantiles <- quantile(data)\nquantiles\n# 输出：0%、25%、50%、75%、100%的分位数\n```\n\n### `cor()`\n\n计算相关系数\n\n```r\n# 假设有另一个数据集\ndata2 <- c(2, 4, 6, 8, 10, 12, 14, 16, 18, 20)\n\ncorrelation <- cor(data, data2)\ncorrelation\n# 输出：相关系数，例如 1（完全正相关）\n```\n\n## 数据可视化\n\n示例数据\n\n```r\n# 创建一个简单的数据集\nx <- c(1, 2, 3, 4, 5)\ny <- c(2, 4, 6, 8, 10)\n```\n\n### `plot()`\n\n 绘制基础散点图、线图\n\n```r\n# 绘制散点图\nplot(x, y, main=\"Scatter Plot\", xlab=\"X Axis\", ylab=\"Y Axis\")\n```\n\n### `hist()` \n\n绘制直方图\n\n```r\n# 创建一组随机数据\ndata <- rnorm(100)\n\n# 绘制直方图\nhist(data, main=\"Histogram\", xlab=\"Values\", col=\"lightblue\", border=\"black\")\n```\n\n### `boxplot()` \n\n 绘制箱线图\n\n```r\n# 绘制箱线图\nboxplot(data, main=\"Boxplot\", ylab=\"Values\", col=\"lightgreen\")\n```\n\n### `barplot()` \n\n绘制柱状图\n\n### `pie()`\n\n绘制饼图\n\n### `pairs()`\n\n 绘制散点矩阵\n\n```r\n# 使用内置数据集绘制散点矩阵\npairs(iris[,1:4], main=\"Scatterplot Matrix for Iris Data\")\n```\n\n### `lines()`\n\n 绘制线图\n\n```r\n# 绘制散点图\nplot(x, y, main=\"Line Plot\", xlab=\"X Axis\", ylab=\"Y Axis\", type=\"p\")\n# 在散点图上添加线条\nlines(x, y, col=\"blue\", lwd=2)\n```\n\n### `heatmap()`\n\n 热图\n\n```r\n# 创建矩阵数据\ndata_matrix <- matrix(rnorm(25), nrow=5)\n\n# 绘制热图\nheatmap(data_matrix, main=\"Heatmap\", col=heat.colors(10))\n```\n\n事实上，对于复杂的图，一般使用ggplot2包，而不适用R原生的绘图函数绘制。具体接口可查看相关文档。\n\n## 数据挖掘\n\nR语言提供了丰富的包和函数来实现各种机器学习算法。\n\n### K-Means 聚类\n\n`kmeans()`（K-Means 聚类算法）\n\n```r\n# 使用KMeans进行聚类分析，k=3表示将数据集聚为3类\nset.seed(42)  # 设置随机种子\nkmeans_model <- kmeans(iris[, 1:4], centers = 3)\n# 查看聚类结果\nprint(kmeans_model$cluster)\n# 可视化聚类结果\nplot(iris$Sepal.Length, iris$Sepal.Width, col=kmeans_model$cluster, pch=19)\npoints(kmeans_model$centers[,c(\"Sepal.Length\", \"Sepal.Width\")], col=1:3, pch=8, cex=2)\n```\n\n- `kmeans()` 函数用于执行 K-means 聚类，将数据分为预定数量的簇（`centers=3`表示3个簇）。\n\n### 回归分析（Regression）\n\n`lm()`（线性回归）\n\n```r\n# 示例数据集：mtcars\ndata(mtcars)\n# 使用线性回归预测汽车的油耗（mpg）与重量（wt）、马力（hp）的关系\nmodel <- lm(mpg ~ wt + hp, data=mtcars)\n# 查看模型摘要\nsummary(model)\n```\n\n- `lm()` 函数用于构建线性回归模型，`mpg ~ wt + hp` 表示预测变量 `mpg` 是 `wt` 和 `hp` 的线性组合。\n  \n### 决策树（Decision Tree）\n\n`rpart()`（决策树算法）\n\n```r\n# 加载决策树包\nlibrary(rpart)\n# 创建决策树模型，使用 `Species` 来预测 `Sepal.Length` 和 `Sepal.Width`\ntree_model <- rpart(Species ~ Sepal.Length + Sepal.Width, data=iris, method=\"class\")\n# 查看决策树模型\nprint(tree_model)\n# 可视化决策树\nplot(tree_model)\ntext(tree_model, use.n = TRUE)\n```\n\n- `rpart()` 函数用于构建决策树模型，`method=\"class\"` 表示分类任务。\n  \n### 随机森林（Random Forest）\n`randomForest()`（随机森林算法）\n\n```r\n# 加载随机森林包\nlibrary(randomForest)\n# 创建随机森林模型，使用 `Species` 来预测 `Sepal.Length` 和 `Sepal.Width`\nrf_model <- randomForest(Species ~ Sepal.Length + Sepal.Width, data=iris)\n# 查看模型摘要\nprint(rf_model)\n```\n\n- `randomForest()` 函数用于构建随机森林模型，该模型通过组合多棵决策树来提高预测精度。\n\n### 朴素贝叶斯（Naive Bayes）\n`naiveBayes()`（朴素贝叶斯算法）\n\n```r\n# 加载朴素贝叶斯包\nlibrary(e1071)\n# 创建朴素贝叶斯模型\nnb_model <- naiveBayes(Species ~ Sepal.Length + Sepal.Width, data=iris)\n# 预测分类\npredictions <- predict(nb_model, iris)\n# 查看模型摘要\nprint(table(predictions, iris$Species))\n```\n\n- `naiveBayes()` 函数实现朴素贝叶斯分类器，通常用于文本分类或其他高维数据集的处理。\n\n### 支持向量机（SVM）\n`svm()`（支持向量机算法）\n\n```r\n# 加载SVM包\nlibrary(e1071)\n# 创建SVM模型，预测 `Species`\nsvm_model <- svm(Species ~ Sepal.Length + Sepal.Width, data=iris)\n# 预测分类\nsvm_predictions <- predict(svm_model, iris)\n# 查看预测结果\nprint(table(svm_predictions, iris$Species))\n```\n\n- `svm()` 函数用于构建支持向量机模型，适合于线性不可分的分类问题。\n\n","tags":["R语言"],"categories":["computer_technology"]},{"title":"Python特殊方法","url":"/2024/09/15/Python特殊方法/","content":"\n## 定义\n\nPython 中的特殊方法（也称为“魔术方法”或“dunder 方法”，因为它们的名称前后有两个下划线，如 `__init__`）是 Python 类的一部分，用来定义对象的某些行为。这些方法在特定情况下被自动调用。它们可以帮助我们实现一些内置功能，比如运算符重载、对象创建、字符串表示等。\n\n## 常见的特殊方法\n\nPython 中的魔术方法可以按照不同的类别进行划分，根据它们的功能和触发场景。下面将这些方法分为几大类，并逐一介绍：\n\n### **对象的创建与销毁**\n\n- `__new__(cls, ...)`**：**作用：控制对象的创建过程，在对象创建之前被调用。通常不需要重写，除非需要自定义对象的创建逻辑。`__new__` 返回类的实例。\n  \n- `__init__(self, ...)`**：**作用：对象初始化方法，创建对象后立即调用，用于设置对象属性。\n  \n- `__del__(self)`：作用：对象销毁方法，当对象被垃圾回收时调用。可以用来执行清理操作，但不常使用。（在GC之前，Python会调用这个对象的__del__()方法完成一些终止化工作。如果没有__del__()方法，那么Python不做特殊的处理。）\n\n### **对象表示**\n\n- `__str__(self)`：\n  - **作用**：定义对象的**用户友好**字符串表示，当调用 `print()` 或 `str()` 时被触发。\n  \n- `__repr__(self)`：\n  - **作用**：定义对象的**官方**字符串表示，通常用于调试。通过 `repr()` 或在解释器中直接调用对象时触发。\n\n- `__format__(self, format_spec)`：\n  - **作用**：定义对象的格式化输出，当使用 `format()` 函数或 `f-string` 时调用。\n\n- `__bytes__(self)`：\n  - **作用**：定义对象的字节表示，当调用 `bytes()` 函数时触发。\n\n### 属性访问与管理\n\n \n\n**`__getattr__(self, name)`**\n\n- **作用**：当你试图访问的属性不存在时，`__getattr__` 会被调用。它可以用于提供默认属性值或动态生成属性。\n\n- **注意**：`__getattr__` 只在属性**不存在**时才被调用。如果属性存在，Python 会直接访问它，而不会调用 `__getattr__`。\n\n示例：\n\n```python\nclass MyClass:\n    def __init__(self):\n        self.existing_attr = \"I exist\"\n\n    def __getattr__(self, name):\n        # 当属性不存在时，返回默认消息\n        return f\"Attribute '{name}' not found!\"\n\nobj = MyClass()\nprint(obj.existing_attr)  # 输出: I exist\nprint(obj.non_existing_attr)  # 输出: Attribute 'non_existing_attr' not found!\n```\n\n\n\n**`__getattribute__(self, name)`**\n\n- **作用**：`__getattribute__` 是更底层的属性访问控制方法。无论属性是否存在，每次访问对象属性时都会调用它。一般不重写。\n\n- **注意**：由于 `__getattribute__` 在所有属性访问时都会触发，因此使用时要非常小心，以避免无限递归（需要在函数内使用 `super()` 或 `object.__getattribute__()` 来访问属性）。\n\n示例：\n\n```python\nclass MyClass:\n    def __init__(self):\n        self.existing_attr = \"I exist\"\n\n    def __getattribute__(self, name):\n        print(f\"Trying to access {name}\")\n        return super().__getattribute__(name)  # 正常返回属性值\n\nobj = MyClass()\nprint(obj.existing_attr)  # 输出: Trying to access existing_attr \\n I exist\n```\n\n在这个例子中，每次我们尝试访问属性时，都会打印出属性名称，并且通过 `super().__getattribute__(name)` 确保正常返回属性值。\n\n\n\n**`__setattr__(self, name, value)`**\n\n- **作用**：每当你尝试设置对象的属性值时，`__setattr__` 会被调用。你可以使用它来控制属性赋值行为，比如验证、修改或记录赋值操作。\n\n- **注意**：为了避免无限递归，在 `__setattr__` 内部你需要使用 `super().__setattr__(name, value)` 或 `object.__setattr__(self, name, value)` 来真正设置属性值，而不能直接使用 `self.name = value`，否则会再次调用 `__setattr__`。\n\n示例：\n\n```python\nclass MyClass:\n    def __init__(self):\n        self.existing_attr = \"I exist\"  # __setattr__ 会被调用\n\n    def __setattr__(self, name, value):\n        print(f\"Setting {name} to {value}\")\n        super().__setattr__(name, value)  # 使用父类的 setattr 赋值\n\nobj = MyClass()\nobj.new_attr = \"Hello\"  # 输出: Setting new_attr to Hello\nprint(obj.new_attr)  # 输出: Hello\n```\n\n\n\n**`__delattr__(self, name)`**\n\n- **作用**：当你使用 `del` 删除对象的属性时，`__delattr__` 会被调用。你可以控制是否允许删除某些属性或在删除时执行一些操作。\n\n- **注意**：与 `__setattr__` 类似，要避免递归调用，你需要使用 `super().__delattr__(name)` 来删除属性，而不是直接 `del self.name`。\n\n示例：\n\n```python\nclass MyClass:\n    def __init__(self):\n        self.existing_attr = \"I exist\"\n\n    def __delattr__(self, name):\n        print(f\"Deleting {name}\")\n        super().__delattr__(name)  # 使用父类的 delattr 来真正删除属性\n\nobj = MyClass()\ndel obj.existing_attr  # 输出: Deleting existing_attr\n# 尝试访问会抛出 AttributeError，因为属性已被删除\n# print(obj.existing_attr)\n```\n\n在这个例子中，当我们删除属性 `existing_attr` 时，`__delattr__` 会打印出属性名称，并通过 `super()` 调用父类方法实际删除属性。\n\n\n\n**完整示例：属性访问控制器**\n\n结合 `__getattr__`、`__setattr__` 和 `__delattr__`，我们可以实现一个属性访问控制器，动态生成属性并限制某些属性的删除。\n\n示例：\n\n```python\nclass MyClass:\n    def __init__(self):\n        self.existing_attr = \"I exist\"\n\n    def __getattr__(self, name):\n        # 动态生成不存在的属性\n        return f\"Attribute '{name}' not found, dynamically generated value!\"\n\n    def __setattr__(self, name, value):\n        print(f\"Setting {name} to {value}\")\n        super().__setattr__(name, value)\n\n    def __delattr__(self, name):\n        if name == 'protected_attr':\n            print(f\"Cannot delete {name}, it is protected!\")\n        else:\n            print(f\"Deleting {name}\")\n            super().__delattr__(name)\n\nobj = MyClass()\n\n# 动态访问不存在的属性\nprint(obj.some_attr)  # 输出: Attribute 'some_attr' not found, dynamically generated value!\n\n# 设置新属性\nobj.new_attr = \"New value\"  # 输出: Setting new_attr to New value\n\n# 删除属性\ndel obj.new_attr  # 输出: Deleting new_attr\n\n# 尝试删除受保护的属性\nobj.protected_attr = \"Can't delete me\"\ndel obj.protected_attr  # 输出: Cannot delete protected_attr, it is protected!\n```\n\n**`property()` 与 `@property` 语法糖**\n\n除了上述魔术方法，Python 还提供了内置的 `property()` 函数和 `@property` 装饰器，用于简化属性访问和管理。这允许我们定义“getter”、“setter”和“deleter”方法。\n\n示例：\n\n```python\nclass MyClass:\n    def __init__(self):\n        self._value = 0\n\n    @property\n    def value(self):\n        return self._value\n\n    @value.setter\n    def value(self, new_value):\n        print(f\"Setting value to {new_value}\")\n        self._value = new_value\n\n    @value.deleter\n    def value(self):\n        print(\"Deleting value\")\n        del self._value\n\nobj = MyClass()\nobj.value = 10  # 输出: Setting value to 10\nprint(obj.value)  # 输出: 10\ndel obj.value  # 输出: Deleting value\n```\n\n### 容器行为（列表、字典等）\n\n在 Python 中，容器类（如列表、字典等）的行为可以通过魔术方法来定制。通过实现这些魔术方法，可以让自定义对象表现得像标准容器一样，支持索引访问、迭代、元素添加和删除等操作。\n\n下面将详细介绍 Python 中与容器行为相关的魔术方法，并附上代码示例。\n\n\n\n**`__len__(self)`**\n\n- **作用**：定义容器的长度，当使用 `len()` 函数时会调用 `__len__`，它返回容器中元素的个数。\n\n示例：\n\n```python\nclass MyContainer:\n    def __init__(self, data):\n        self.data = data\n\n    def __len__(self):\n        return len(self.data)  # 返回容器的长度\n\nobj = MyContainer([1, 2, 3, 4])\nprint(len(obj))  # 输出: 4\n```\n\n\n\n**`__getitem__(self, key)`**\n\n- **作用**：定义通过键或索引获取元素的行为。可以让对象表现得像列表、字典或其他可索引的容器。该方法是实现**切片**的关键。\n\n示例：\n\n```python\nclass MyContainer:\n    def __init__(self, data):\n        self.data = data\n\n    def __getitem__(self, key):\n        return self.data[key]  # 根据索引或键返回元素\n\nobj = MyContainer([10, 20, 30, 40])\nprint(obj[2])  # 输出: 30\n```\n\n在这个例子中，`__getitem__` 使得 `MyContainer` 对象可以像列表一样通过索引访问元素。\n\n\n\n**`__setitem__(self, key, value)`**\n\n- **作用**：定义通过键或索引设置元素的行为。允许对象像列表或字典一样修改内部数据。\n\n示例：\n\n```python\nclass MyContainer:\n    def __init__(self, data):\n        self.data = data\n\n    def __setitem__(self, key, value):\n        self.data[key] = value  # 根据索引或键设置元素值\n\nobj = MyContainer([10, 20, 30, 40])\nobj[1] = 99  # 将索引 1 位置的值改为 99\nprint(obj.data)  # 输出: [10, 99, 30, 40]\n```\n\n在这个例子中，`__setitem__` 允许通过索引修改容器中的值。\n\n\n\n**`__delitem__(self, key)`**\n\n- **作用**：定义通过键或索引删除元素的行为。让对象可以像列表或字典一样删除元素。\n\n示例：\n\n```python\nclass MyContainer:\n    def __init__(self, data):\n        self.data = data\n\n    def __delitem__(self, key):\n        del self.data[key]  # 根据索引或键删除元素\n\nobj = MyContainer([10, 20, 30, 40])\ndel obj[2]  # 删除索引 2 位置的元素\nprint(obj.data)  # 输出: [10, 20, 40]\n```\n\n在这个例子中，`__delitem__` 允许通过索引删除容器中的元素。\n\n\n\n**`__iter__(self)` 和 `__next__(self)`**\n\n- **作用**：定义对象的迭代行为。通过实现 `__iter__()` 和 `__next__()`，可以让对象像列表一样进行迭代。`__iter__()` 返回一个迭代器对象，`__next__()` 返回容器的下一个元素。\n\n- **注意**：通常 `__iter__` 返回的是对象本身，而 `__next__` 负责返回每个元素，迭代结束时抛出 `StopIteration`。\n\n示例：\n\n```python\nclass MyContainer:\n    def __init__(self, data):\n        self.data = data\n        self.index = 0\n\n    def __iter__(self):\n        return self  # 返回迭代器本身\n\n    def __next__(self):\n        if self.index < len(self.data):\n            result = self.data[self.index]\n            self.index += 1\n            return result\n        else:\n            raise StopIteration  # 迭代结束时抛出 StopIteration 异常\n\nobj = MyContainer([10, 20, 30, 40])\n\nfor item in obj:\n    print(item)\n```\n\n输出：\n```\n10\n20\n30\n40\n```\n\n在这个例子中，`__iter__` 和 `__next__` 方法使 `MyContainer` 支持迭代器协议，允许我们使用 `for` 循环遍历对象。\n\n\n\n**`__contains__(self, item)`**\n\n- **作用**：定义 `in` 运算符的行为，用于检查某个元素是否在容器中。`__contains__` 返回布尔值 `True` 或 `False`。\n\n示例\n\n```python\nclass MyContainer:\n    def __init__(self, data):\n        self.data = data\n\n    def __contains__(self, item):\n        return item in self.data  # 检查元素是否存在于容器中\n\nobj = MyContainer([10, 20, 30, 40])\nprint(20 in obj)  # 输出: True\nprint(50 in obj)  # 输出: False\n```\n\n在这个例子中，`__contains__` 使得我们可以使用 `in` 运算符来检查 `MyContainer` 对象中是否包含某个元素。\n\n\n\n**`__reversed__(self)`**\n\n- **作用**：定义当调用 `reversed()` 函数时的行为，使容器能够以相反顺序进行迭代。\n\n示例：\n\n```python\nclass MyContainer:\n    def __init__(self, data):\n        self.data = data\n\n    def __reversed__(self):\n        return reversed(self.data)  # 反向迭代\n\nobj = MyContainer([10, 20, 30, 40])\n\nfor item in reversed(obj):\n    print(item)\n```\n\n输出：\n```\n40\n30\n20\n10\n```\n\n在这个例子中，`__reversed__` 允许我们使用 `reversed()` 函数以相反顺序迭代 `MyContainer` 对象中的元素。\n\n### 运算符重载\n\nPython 中的运算符可以通过魔术方法进行重载，以便在类实例上执行这些运算符操作。常见的运算符及其对应的魔术方法包括：\n\n- **算术运算符**：\n  - **`__add__(self, other)`**：`+` 运算符\n  - **`__sub__(self, other)`**：`-` 运算符\n  - **`__mul__(self, other)`**：`*` 运算符\n  - **`__truediv__(self, other)`**：`/` 运算符\n  - **`__floordiv__(self, other)`**：`//` 运算符\n  - **`__mod__(self, other)`**：`%` 运算符\n  - **`__pow__(self, other)`**：`**` 运算符\n\n- **比较运算符**：\n  - **`__eq__(self, other)`**：`==`\n  - **`__ne__(self, other)`**：`!=`\n  - **`__lt__(self, other)`**：`<`\n  - **`__le__(self, other)`**：`<=`\n  - **`__gt__(self, other)`**：`>`\n  - **`__ge__(self, other)`**：`>=`\n\n- **位运算符**：\n  - **`__and__(self, other)`**：`&`\n  - **`__or__(self, other)`**：`|`\n  - **`__xor__(self, other)`**：`^`\n  - **`__lshift__(self, other)`**：`<<`\n  - **`__rshift__(self, other)`**：`>>`\n\n- **一元运算符**：\n  - **`__neg__(self)`**：`-` (取负)\n  - **`__pos__(self)`**：`+` (正号)\n  - **`__invert__(self)`**：`~` (按位取反)\n\n### 上下文管理\n\n- **`__enter__(self)`** 和 **`__exit__(self, exc_type, exc_val, exc_tb)`**：\n  - **作用**：实现上下文管理协议，使对象可以与 `with` 语句一起使用。`__enter__` 在进入上下文时调用，`__exit__` 在退出上下文时调用。\n\n  ```python\n  class MyContext:\n      def __enter__(self):\n          print(\"Entering context\")\n      def __exit__(self, exc_type, exc_value, traceback):\n          print(\"Exiting context\")\n  with MyContext():\n      print(\"Inside the context\")\n  ```\n\n### 调用与调用相关\n\n- **`__call__(self, ...)`**：\n  - **作用**：使对象可以像函数一样被调用。\n\n  ```python\n  class CallableClass:\n      def __call__(self, x):\n          return x * 2\n  obj = CallableClass()\n  print(obj(5))  # 输出: 10\n  ```\n\n### 反射操作\n\n- **`__getattr__(self, name)`**：\n  - **作用**：当访问不存在的属性时被调用。可用于动态属性或提供默认值。\n\n- **`__setattr__(self, name, value)`**：\n  - **作用**：设置属性值时调用。\n\n### 哈希与相等性\n\n- **`__hash__(self)`**：\n  - **作用**：定义对象的哈希值，使对象可用于集合、字典的键。\n\n- **`__eq__(self, other)`**：\n  - **作用**：定义相等性运算 (`==`)。\n\n- **`__ne__(self, other)`**：\n  - **作用**：定义不等性运算 (`!=`)。\n\n## 辨析\n\n### `__new__`和`__init__`\n\n`__new__` 方法\n\n- **作用**：`__new__` 是一个静态方法，用于**创建对象**。在对象创建时，它负责**分配内存**并返回新实例。它是在类被调用时最先执行的方法，在 `__init__` 之前被调用。\n\n- **参数**：`__new__(cls, ...)`，其中 `cls` 是当前类的引用，后面的参数是传递给类构造函数的参数。\n\n- **返回值**：`__new__` 必须返回类的一个实例，通常通过 `super().__new__(cls)` 来实现，表示用父类的 `__new__` 方法创建对象。\n\n适用场景：\n\n- 当你需要控制对象的创建过程时，例如实现单例模式（确保某个类只创建一个实例）或子类化不可变类型（如 `int`、`str`、`tuple`）时，可以使用 `__new__`。\n  \n\n示例：\n\n```python\nclass MyClass:\n    def __new__(cls, *args, **kwargs):\n        print(\"Creating instance...\")\n        instance = super().__new__(cls)  # 分配内存，创建对象\n        return instance\n\n    def __init__(self, name):\n        print(\"Initializing instance...\")\n        self.name = name\n\nobj = MyClass(\"Alice\")\n```\n\n输出：\n```\nCreating instance...\nInitializing instance...\n```\n\n在这个例子中，`__new__` 在对象创建时被调用，用于分配内存，而 `__init__` 随后负责初始化对象属性。\n\n\n\n**`__init__` 方法**\n\n- **作用**：`__init__` 是用于**初始化对象**的。它在对象已经被 `__new__` 方法创建并分配内存之后调用，负责为对象设置初始状态（比如为实例变量赋值）。\n\n- **参数**：`__init__(self, ...)`，其中 `self` 是当前对象的实例，后面的参数是传递给类构造函数的参数。\n\n- **返回值**：`__init__` 没有返回值，因为它仅负责初始化对象。\n\n示例：\n\n```python\nclass MyClass:\n    def __init__(self, name):\n        print(\"Initializing instance...\")\n        self.name = name\n\nobj = MyClass(\"Alice\")\n```\n\n输出：\n```\nInitializing instance...\n```\n\n这里 `__init__` 接受对象实例 `self` 作为第一个参数，用来设置对象的初始属性。\n\n\n\n**`__new__` 和 `__init__` 的关系**\n\n- `__new__` 负责**创建对象**，在实例化过程中**最先执行**。\n- `__init__` 负责**初始化对象**，在 `__new__` 之后执行，设置对象的初始状态。\n\n它们在对象实例化过程中的执行顺序如下：\n1. 调用 `__new__` 来创建对象，分配内存。\n2. 如果 `__new__` 返回的对象是当前类的实例，Python 会自动调用 `__init__`，对该对象进行初始化。\n3. \n\n**在子类中的使用**\n\n有时，在子类中需要重写 `__new__` 和 `__init__` 方法。例如，当我们继承不可变类型（如 `int` 或 `tuple`）时，通常需要自定义 `__new__`，因为这些类型的实例在创建之后无法修改。\n\n示例：子类化不可变类型 `int`\n\n```python\nclass MyInt(int):\n    def __new__(cls, value):\n        print(\"Calling __new__\")\n        return super().__new__(cls, value)\n\n    def __init__(self, value):\n        print(\"Calling __init__\")\n        self.value = value\n\nobj = MyInt(10)\nprint(obj)\n```\n\n输出：\n```\nCalling __new__\nCalling __init__\n10\n```\n\n在这个例子中，`MyInt` 继承了不可变类型 `int`，需要在 `__new__` 中控制对象的创建，因为 `int` 的实例一旦创建就不能改变。而 `__init__` 仅用于添加额外的属性。\n\n\n\n**`__new__` 的典型使用场景：单例模式**\n\n`__new__` 常用于实现单例模式，即保证一个类只能创建一个实例。\n\n示例：单例模式\n\n```python\nclass Singleton:\n    _instance = None\n\n    def __new__(cls, *args, **kwargs):\n        if cls._instance is None:\n            cls._instance = super().__new__(cls)\n        return cls._instance\n\n    def __init__(self, name):\n        self.name = name\n\nobj1 = Singleton(\"Alice\")\nobj2 = Singleton(\"Bob\")\n\nprint(obj1 is obj2)  # 输出: True\nprint(obj1.name)  # 输出: Bob\nprint(obj2.name)  # 输出: Bob\n```\n\n在这个例子中，`__new__` 保证 `Singleton` 类只能有一个实例，即使多次调用类构造函数，返回的都是同一个实例。\n\n### `__str_`_和`__repr__`\n\n`__str__` 和 `__repr__` 是 Python 中两个非常重要的魔术方法，用于定义对象的字符串表示形式。虽然它们都负责返回对象的字符串表示，但它们有不同的使用场景和目的。\n\n**`__str__(self)`**\n\n- **作用**：`__str__` 定义了对象的**用户友好的**字符串表示。当你使用 `str()` 函数或 `print()` 打印对象时，调用的是 `__str__` 方法。它的目的是返回一个易于阅读的字符串，供用户直接使用。\n- **典型用途**：输出对象的简明描述，主要供人类阅读。\n\n\n\n**`__repr__(self)`**\n\n- **作用**：`__repr__` 定义了对象的**官方字符串表示**，即面向开发者的表示形式。`repr()` 函数会调用 `__repr__` 方法，通常期望返回一个尽可能**精确**且**完整**的字符串，能够明确地表示这个对象，并且在某些情况下能够用于重新创建对象（`eval(repr(obj)) == obj` 这种方式）。\n\n- **典型用途**：调试和日志记录时，开发者用来查看对象的详细信息，便于追踪程序行为。\n\n示例：\n\n```python\nclass MyClass:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __repr__(self):\n        return f\"MyClass(name='{self.name}', age={self.age})\"\n\nobj = MyClass(\"Alice\", 30)\nprint(repr(obj))  # 输出: MyClass(name='Alice', age=30)\n```\n\n在这个例子中，`__repr__` 返回一个精确的、带有完整信息的字符串，这个字符串尽量能够帮助开发者了解对象的内部状态。\n\n注意：如果一个类没有实现 `__str__`，那么当你使用 `print()` 或 `str()` 函数时，Python 会退而调用 `__repr__`。\n\n如果一个类这两个方法都没有实现，那么当调用 `print()` 或 `str()` 时，Python 会使用该类的默认实现。这种默认行为由 `object` 类提供，返回一个包含类名和内存地址的字符串，表示对象的唯一标识符。\n\n示例\n\n```python\nclass MyClass:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\nobj = MyClass(\"Alice\", 30)\nprint(obj)\n# 输出 <__main__.MyClass object at 0x7f83b2c4d880>\n```\n\n解释\n\n- `__main__`: 表示该类定义在当前模块（也就是主程序模块）中。如果类定义在另一个模块中，这部分会显示模块名。\n- `MyClass`: 是类的名称。\n- `0x7f83b2c4d880`: 是该对象在内存中的地址（这是十六进制的内存地址，表示对象的唯一位置）。\n\n## 拓展\n\n### 迭代器\n\n在 Python 中，迭代是一种遍历容器（如列表、元组、字典、集合等）元素的方式。迭代器提供了一种访问容器元素的机制，避免显式使用索引。要理解迭代的工作原理，我们需要了解几个核心概念，包括迭代器（iterator）、可迭代对象（iterable）、`__iter__` 和 `__next__` 方法。\n\n**可迭代对象（Iterable）**\n\n- **定义**：一个对象是**可迭代的**，如果它实现了 `__iter__()` 方法，返回一个迭代器，或者它定义了一个 `__getitem__()` 方法（支持通过索引访问）。\n- **示例**：列表、元组、字符串、字典等都是可迭代对象。\n  \n\n可迭代对象可以使用 `for` 循环进行迭代，或者通过 `iter()` 函数显式地获得它的迭代器。\n\n示例：\n\n```python\nmy_list = [1, 2, 3]\nfor item in my_list:\n    print(item)\n\n# 或者显式使用 iter()\nit = iter(my_list)\nprint(next(it))  # 输出: 1\nprint(next(it))  # 输出: 2\nprint(next(it))  # 输出: 3\n```\n\n**迭代器（Iterator）**\n\n- **定义**：一个对象是**迭代器**，如果它实现了 `__iter__()` 方法并返回自身，以及实现了 `__next__()` 方法。`__next__()` 方法返回下一个元素，当没有元素时抛出 `StopIteration` 异常。\n- **特点**：迭代器是一次性可消耗的，即迭代器只能遍历一次，遍历完就无法重新开始。\n\n示例：\n\n```python\nmy_list = [1, 2, 3]\niterator = iter(my_list)  # 创建一个迭代器\n\nprint(next(iterator))  # 输出: 1\nprint(next(iterator))  # 输出: 2\nprint(next(iterator))  # 输出: 3\n# next(iterator)  # 这时调用会抛出 StopIteration 异常\n```\n\n**`__iter__` 和 `__next__` 魔术方法**\n\n- **`__iter__(self)`**：可迭代对象和迭代器都应该实现这个方法。对于可迭代对象，`__iter__()` 返回一个新的迭代器对象；对于迭代器，`__iter__()` 通常返回 `self`（即迭代器本身）。\n  \n- **`__next__(self)`**：这是迭代器对象实现的关键方法。它返回序列中的下一个元素，如果序列结束，则抛出 `StopIteration` 异常。\n\n自定义迭代器示例：\n\n```python\nclass MyIterator:\n    def __init__(self, data):\n        self.data = data\n        self.index = 0\n    \n    def __iter__(self):\n        return self\n    \n    def __next__(self):\n        if self.index < len(self.data):\n            item = self.data[self.index]\n            self.index += 1\n            return item\n        else:\n            raise StopIteration\n\nmy_iter = MyIterator([1, 2, 3])\nfor item in my_iter:\n    print(item)\n```\n\n输出：\n```\n1\n2\n3\n```\n\n**迭代的执行流程**\n\n- 当一个对象被用于 `for` 循环时，Python 会在后台调用该对象的 `__iter__()` 方法，以获取一个迭代器。\n- 然后，循环会反复调用迭代器的 `__next__()` 方法，直到抛出 `StopIteration` 异常为止。\n\n执行过程的分解：\n\n```python\nmy_list = [1, 2, 3]\niterator = iter(my_list)  # 获取迭代器\n\nwhile True:\n    try:\n        item = next(iterator)\n        print(item)\n    except StopIteration:\n        break\n```\n\n**生成器（Generators）**\n\n生成器是创建迭代器的一种简洁方式。它通过 `yield` 关键字逐步返回值，每次迭代时暂停函数的执行状态，保存上下文，以便下次继续。\n\n- **定义生成器函数**：生成器函数与普通函数的区别在于它使用了 `yield` 关键字，而不是 `return`。\n- **生成器对象**：调用生成器函数返回一个生成器对象，生成器对象是一个迭代器。\n\n示例：\n\n```python\ndef my_generator():\n    yield 1\n    yield 2\n    yield 3\n\ngen = my_generator()\n\nfor value in gen:\n    print(value)\n```\n\n输出：\n```\n1\n2\n3\n```\n\n生成器的执行过程：\n\n生成器函数在每次调用 `next()` 时会暂停在 `yield` 语句，保存当前的状态，并在下一次调用时从该状态继续执行。\n\n```python\ngen = my_generator()\n\nprint(next(gen))  # 输出: 1\nprint(next(gen))  # 输出: 2\nprint(next(gen))  # 输出: 3\n# next(gen)  # 这时调用会抛出 StopIteration 异常\n```\n\n**`iter()` 函数与 `next()` 函数**\n\n- **`iter(object)`**：返回对象的迭代器。该函数首先检查对象是否实现了 `__iter__` 方法，如果没有，则检查是否实现了 `__getitem__`，以支持通过索引访问。\n- **`next(iterator, default)`**：调用迭代器的 `__next__()` 方法返回下一个元素。如果迭代结束，并且提供了 `default` 参数，则返回 `default`，否则抛出 `StopIteration`。\n\n示例：\n\n```python\nmy_list = [1, 2, 3]\niterator = iter(my_list)\n\nprint(next(iterator))  # 输出: 1\nprint(next(iterator))  # 输出: 2\nprint(next(iterator, \"End of list\"))  # 输出: 3\nprint(next(iterator, \"End of list\"))  # 输出: End of list\n```\n\n**可迭代对象和迭代器的区别**\n\n- **可迭代对象**：实现了 `__iter__()` 方法，可以返回一个迭代器，但它自身不一定是迭代器。\n- **迭代器**：实现了 `__iter__()` 和 `__next__()` 方法，且 `__iter__()` 通常返回自身，`__next__()` 负责返回序列中的下一个值。\n\n可迭代对象和迭代器的主要区别在于，迭代器一次性消耗，即遍历完后不能再次迭代；而可迭代对象每次调用 `__iter__` 方法都会返回一个新的迭代器。\n\n**惰性迭代**\n\n迭代器和生成器的一个重要特性是**惰性迭代**，即它们不会一次性生成所有元素，而是按需逐个生成。当我们需要处理非常大的数据集时，这种特性非常有用。\n\n示例：生成无限序列\n\n```python\ndef count(start=0):\n    while True:\n        yield start\n        start += 1\n\ncounter = count()\n\nprint(next(counter))  # 输出: 0\nprint(next(counter))  # 输出: 1\nprint(next(counter))  # 输出: 2\n```\n\n生成器 `count()` 将一直生成数字，直到被手动终止。\n\n\n\n","tags":["Python"],"categories":["computer_technology"]},{"title":"Python装饰器","url":"/2024/09/15/Python装饰器/","content":"\n## 基本概念\n\n### 定义\n\n装饰器本质上是一个函数，该函数接受一个函数作为参数，并返回一个新的函数。（可以理解为输入一个函数，返回装饰后的函数，所谓装饰，一般来说就是为该函数添加一些功能）\n\n装饰器的核心部分只有两部分：\n\n1. 定义一个内部函数：为原函数添加功能（在参数与返回类型上应与原函数保持一致）\n2. 返回该内部函数\n\n这是一个简单装饰器的例子\n\n```python\nimport time\n\ndef calculate(a,b):\n    sum =0\n    for i in range(a,b):\n        sum = sum+i\n    print(sum)\n    return sum\n\ndef decorator_cal(func):\n    def wapper(*args, **kwargs):\n        start_time = time.time()\n        res = func(*args, **kwargs)\n        end_time =time.time()\n        diff_time = end_time-start_time\n        print(f\"{func.__name__} took {diff_time:.10f} seconds\")\n        return res\n    return wapper\n\ncalculate= decorator_cal(calculate)\n\ncalculate(6,10263)\n```\n\n1. 首先我们定义了一个简单的求和函数calculate(a,b)，输入是区间[a,b)，返回区间和。\n\n2. 接下来我们定义了一个装饰器函数\n\n   其中的关键是\n\n   - *args, **kwargs：这些是可变参数，用于接收任意数量的非关键字参数和关键字参数。这样可以确保 `wapper` 函数能够接收和处理 `func` 所有的参数。\n\n   - res = func(*args, **kwargs)：调用传入的 `func` 函数，并把原始的参数传递给它。执行完 `func` 函数后，会将结果保存在变量 `res` 中。\n   - return res 由于原函数包含返回值，所以wapper也需要有和原函数相同的返回值。如果原函数没有返回值，wapper自然也不需要返回值。\n\n3. 最后我们显示调用该装饰器函数：calculate= decorator_cal(calculate)，从此以后，调用calculate就是调用装饰过后的calculate了(注意我们一般通过@符号完成该步骤，这里是方便理解)\n\n### @符号\n\n@decorator本质上是一个语法糖，当他添加在某函数(func)上时，它等价与func = decorator(func)\n\n装饰器通常使用`@decorator_name`的语法糖直接应用到需要装饰的函数上。\n\n### 带参数的装饰器\n\n有时，装饰器本身需要接受参数。此时可以使用多一层嵌套来实现。\n\n比如，我想控制打印精度\n\n```python\nimport time\ndef Precision_control(precision):\n    def decorator_cal(func):\n        def wapper(*args, **kwargs):\n            start_time = time.time()\n            res = func(*args, **kwargs)\n            end_time =time.time()\n            diff_time = end_time-start_time\n            print(f\"{func.__name__} took {diff_time:.{precision}f} seconds\")\n            return res\n        return wapper\n    return decorator_cal\n\n@Precision_control(5)\ndef calculate(a,b):\n    sum =0\n    for i in range(a,b):\n        sum = sum+i\n    print(sum)\n    return sum\n\ncalculate(6,10263)\n```\n\n\n\n## 示例\n\n我们可以通过 Python 装饰器来实现多种功能，比如日志记录、权限验证、性能测量、缓存、输入检查等。\n\n### **日志记录（Logging）**\n\n日志记录用于在函数执行时记录相关信息，帮助调试和了解系统行为。可以通过装饰器自动记录函数的调用情况。\n\n```python\nimport logging\nfrom functools import wraps\n\n# 设置日志\nlogging.basicConfig(level=logging.INFO)\n\ndef log_decorator(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        logging.info(f\"Running {func.__name__} with args: {args} and kwargs: {kwargs}\")\n        result = func(*args, **kwargs)\n        logging.info(f\"{func.__name__} returned {result}\")\n        return result\n    return wrapper\n\n@log_decorator\ndef add(a, b):\n    return a + b\n\nadd(2, 3)\n```\n\n日志输出：\n\n```\nINFO:root:Running add with args: (2, 3) and kwargs: {}\nINFO:root:add returned 5\n```\n\n### **权限验证（Authentication）**\n权限验证用于在执行某些敏感操作之前验证用户身份或权限。可以使用装饰器来检查用户是否有权限执行特定操作。\n\n```python\ndef check_permissions(user):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            if user['role'] != 'admin':\n                raise PermissionError(f\"User {user['name']} does not have admin rights\")\n            return func(*args, **kwargs)\n        return wrapper\n    return decorator\n\nuser = {'name': 'Alice', 'role': 'user'}\n\n@check_permissions(user)\ndef delete_data():\n    print(\"Data deleted.\")\n\ntry:\n    delete_data()\nexcept PermissionError as e:\n    print(e)\n```\n\n输出：\n\n```\nUser Alice does not have admin rights\n```\n\n### **性能测量（Performance Monitoring）**\n性能测量用于评估函数的执行时间。可以通过装饰器来记录函数的开始时间和结束时间，并计算执行时间。\n\n```python\nimport time\n\ndef timer_decorator(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        result = func(*args, **kwargs)\n        end_time = time.time()\n        print(f\"{func.__name__} took {end_time - start_time:.4f} seconds\")\n        return result\n    return wrapper\n\n@timer_decorator\ndef slow_function():\n    time.sleep(2)\n    return \"Finished\"\n\nslow_function()\n```\n\n输出：\n\n```\nslow_function took 2.0001 seconds\n```\n\n### **缓存（Caching）**\n缓存用于存储函数的返回值，从而避免多次计算相同输入的结果。可以使用装饰器来实现简单的缓存机制。\n\n```python\ndef cache_decorator(func):\n    cache = {}\n    \n    @wraps(func)\n    def wrapper(*args):\n        if args in cache:\n            print(\"Using cached result\")\n            return cache[args]\n        result = func(*args)\n        cache[args] = result\n        return result\n    return wrapper\n\n@cache_decorator\ndef expensive_computation(x):\n    print(f\"Computing for {x}\")\n    return x * x\n\nexpensive_computation(4)\nexpensive_computation(4)\n```\n\n输出：\n\n```\nComputing for 4\nUsing cached result\n```\n\n### **输入检查（Validation）**\n输入检查用于验证函数的参数是否合法，避免无效的输入导致错误。可以使用装饰器自动检查参数的类型或范围。\n\n```python\ndef validate_decorator(func):\n    @wraps(func)\n    def wrapper(a, b):\n        if not isinstance(a, int) or not isinstance(b, int):\n            raise ValueError(\"Both arguments must be integers\")\n        return func(a, b)\n    return wrapper\n\n@validate_decorator\ndef add(a, b):\n    return a + b\n\ntry:\n    add(2, \"three\")\nexcept ValueError as e:\n    print(e)\n```\n\n输出：\n\n```\nBoth arguments must be integers\n```\n\n### **重试机制（Retry）**\n重试机制用于在函数失败时自动重试，特别是在处理不稳定的外部资源（如网络请求）时很有用。\n\n```python\ndef retry_decorator(retries=3):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            attempt = 0\n            while attempt < retries:\n                try:\n                    return func(*args, **kwargs)\n                except Exception as e:\n                    print(f\"Attempt {attempt + 1} failed with error: {e}\")\n                    attempt += 1\n            raise Exception(f\"Function failed after {retries} retries\")\n        return wrapper\n    return decorator\n\n@retry_decorator(retries=5)\ndef unstable_function():\n    raise ValueError(\"Random failure\")\n\ntry:\n    unstable_function()\nexcept Exception as e:\n    print(e)\n```\n\n输出：\n\n```\nAttempt 1 failed with error: Random failure\nAttempt 2 failed with error: Random failure\nAttempt 3 failed with error: Random failure\nAttempt 4 failed with error: Random failure\nAttempt 5 failed with error: Random failure\nFunction failed after 5 retries\n```\n\n### **@atexit装饰器**\n`atexit`装饰器用于在程序退出之前自动执行某些操作，比如清理资源或记录日志。Python的`atexit`模块可以注册函数在程序退出时执行。\n\n```python\nimport atexit\n\ndef goodbye():\n    print(\"Program is exiting. Goodbye!\")\n\natexit.register(goodbye)\n```\n\n当程序正常退出时，会打印：\n\n```\nProgram is exiting. Goodbye!\n```\n\n### **@deprecated装饰器**\n`deprecated`装饰器用于标记一个函数已不推荐使用，提醒开发者在调用时使用替代方案。\n\n```python\nimport warnings\n\ndef deprecated(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        warnings.warn(f\"{func.__name__} is deprecated\", category=DeprecationWarning)\n        return func(*args, **kwargs)\n    return wrapper\n\n@deprecated\ndef old_function():\n    print(\"This function is old and deprecated.\")\n\nold_function()\n```\n\n输出：\n\n```\nold_function is deprecated\nThis function is old and deprecated.\n```\n\n## Django中的装饰器\n\n在 Django 框架中，装饰器广泛用于简化代码、增强功能和实现一些常见的功能需求。\n\n**功能：**\n\n`@login_required` 是 Django 中最常用的装饰器之一，确保用户在访问特定视图之前必须已经登录。它会检查当前请求的用户是否已经登录，未登录的用户将被重定向到登录页面。\n\n**使用示例：**\n\n```python\nfrom django.contrib.auth.decorators import login_required\n\n@login_required\ndef my_view(request):\n    return HttpResponse(\"You are logged in!\")\n```\n\n如果用户没有登录，Django 会将用户重定向到默认的登录页面（可以通过 `LOGIN_URL` 配置自定义登录页面）。\n\n自定义登录页面：\n\n```python\n@login_required(login_url='/custom-login/')\ndef my_view(request):\n    return HttpResponse(\"Custom login page if not authenticated.\")\n```\n\n### **@permission_required**\n\n**功能：**\n\n`@permission_required` 用于检查用户是否具有特定的权限。它要求用户具备指定的权限才能访问视图。如果用户不具备该权限，系统会显示一个“403 Forbidden”错误或将用户重定向到指定页面。\n\n**使用示例：**\n\n```python\nfrom django.contrib.auth.decorators import permission_required\n\n@permission_required('app_label.permission_codename')\ndef my_view(request):\n    return HttpResponse(\"You have the necessary permission!\")\n```\n\n可以自定义权限不足时的重定向页面：\n\n```python\n@permission_required('app_label.permission_codename', login_url='/no-permission/')\ndef my_view(request):\n    return HttpResponse(\"You are redirected due to insufficient permissions.\")\n```\n\n### **@user_passes_test**\n\n功能：\n\n`@user_passes_test` 是一个通用装饰器，允许你根据自定义的测试条件决定是否允许用户访问某个视图。你可以通过传递一个函数来进行验证。如果测试未通过，用户将被重定向到登录页面或指定页面。\n\n使用示例：\n\n```python\nfrom django.contrib.auth.decorators import user_passes_test\n\ndef check_if_superuser(user):\n    return user.is_superuser\n\n@user_passes_test(check_if_superuser)\ndef superuser_view(request):\n    return HttpResponse(\"You are a superuser.\")\n```\n\n自定义重定向页面：\n\n```python\n@user_passes_test(check_if_superuser, login_url='/no-access/')\ndef superuser_view(request):\n    return HttpResponse(\"Only superusers can see this.\")\n```\n\n### **@csrf_exempt**\n\n**功能：**\n\nDjango 默认开启了跨站请求伪造 (CSRF) 防护机制。`@csrf_exempt` 装饰器用于排除某些视图不进行 CSRF 检查，特别是在处理第三方系统的请求时非常有用。\n\n**使用示例：**\n\n```python\nfrom django.views.decorators.csrf import csrf_exempt\n\n@csrf_exempt\ndef my_view(request):\n    return HttpResponse(\"CSRF protection is disabled for this view.\")\n```\n\n注意：在禁用 CSRF 防护时要小心，确保这个视图只用于安全的外部系统或只接受安全的请求。\n\n### **@require_http_methods**\n\n功能：\n\n`@require_http_methods` 限制视图只允许通过指定的 HTTP 方法（如 GET、POST 等）访问。它是简化对请求类型验证的一种快捷方式。\n\n使用示例：\n\n```python\nfrom django.views.decorators.http import require_http_methods\n\n@require_http_methods([\"GET\", \"POST\"])\ndef my_view(request):\n    return HttpResponse(\"This view only allows GET and POST requests.\")\n```\n\n如果客户端发送了非指定的 HTTP 方法（如 PUT、DELETE 等），服务器将返回 405 状态码（Method Not Allowed）。\n\n### **@require_GET, @require_POST**\n\n**功能：**\n\n- `@require_GET`：确保视图只能通过 GET 请求访问。\n- `@require_POST`：确保视图只能通过 POST 请求访问。\n\n**使用示例：**\n\n```python\nfrom django.views.decorators.http import require_GET, require_POST\n\n@require_GET\ndef my_get_view(request):\n    return HttpResponse(\"This view only allows GET requests.\")\n\n@require_POST\ndef my_post_view(request):\n    return HttpResponse(\"This view only allows POST requests.\")\n```\n\n### **@cache_page**\n\n**功能：**\n\n`@cache_page` 装饰器用于缓存视图的输出。它可以显著提升性能，尤其是对于经常被访问但不常变化的页面。\n\n**使用示例：**\n\n```python\nfrom django.views.decorators.cache import cache_page\n\n@cache_page(60 * 15)  # 缓存时间为 15 分钟\ndef my_view(request):\n    return HttpResponse(\"This view is cached for 15 minutes.\")\n```\n\n你可以通过缓存的时间长度来控制缓存失效的时间（以秒为单位）。此外，你可以根据 URL 或请求参数实现更复杂的缓存策略。\n\n### **@never_cache**\n\n功能：\n\n`@never_cache` 装饰器确保视图的响应永远不会被缓存。它可以用于那些内容经常变化且不应该被缓存的视图。\n\n使用示例：\n\n```python\nfrom django.views.decorators.cache import never_cache\n\n@never_cache\ndef my_view(request):\n    return HttpResponse(\"This view should never be cached.\")\n```\n\n### **@vary_on_headers, @vary_on_cookie**\n\n功能：\n\n- `@vary_on_headers`：根据请求的 HTTP 头信息来区分缓存内容。\n- `@vary_on_cookie`：根据请求中的 Cookie 信息来区分缓存内容。\n\n使用示例：\n\n```python\nfrom django.views.decorators.vary import vary_on_headers, vary_on_cookie\n\n@vary_on_headers(\"User-Agent\")\ndef my_view(request):\n    return HttpResponse(\"Vary on User-Agent.\")\n\n@vary_on_cookie\ndef my_cookie_view(request):\n    return HttpResponse(\"Vary on cookies.\")\n```\n\n这些装饰器通常结合缓存机制一起使用，可以实现针对不同用户、浏览器或请求的缓存控制。\n\n### **@transaction.atomic**\n\n功能：\n\n`@transaction.atomic` 装饰器用于将视图的数据库操作封装在一个事务中。如果在视图执行过程中出现错误，所有的数据库操作都将回滚，确保数据一致性。\n\n使用示例：\n\n```python\nfrom django.db import transaction\n\n@transaction.atomic\ndef my_view(request):\n    # 所有的数据库操作将在这里封装成一个事务\n    ...\n```\n\n如果在视图中抛出异常，数据库的变更将不会被保存。\n\n### **@sensitive_post_parameters**\n\n功能：\n\n`@sensitive_post_parameters` 用于在处理敏感数据（如密码、信用卡号等）的视图中，防止这些数据出现在错误报告或日志中。它会将指定的 POST 参数标记为敏感信息，避免暴露。\n\n使用示例：\n\n```python\nfrom django.views.decorators.debug import sensitive_post_parameters\n\n@sensitive_post_parameters('password', 'credit_card_number')\ndef my_view(request):\n    password = request.POST['password']\n    credit_card_number = request.POST['credit_card_number']\n    ...\n```\n\n## Python装饰器与Java注解\n\nPython 装饰器和 Java 注解是两种不同语言中用于增强代码功能的机制，虽然它们的语法和使用方式不同，但都可以用来对函数、类、方法或变量进行修饰或附加行为。\n\n### **定义与用途**\n\n- **Python 装饰器**：\n  Python 装饰器是一种高阶函数，通常用于在不改变原有函数或方法代码的情况下，为其添加额外的功能。装饰器接受一个函数或类作为参数，返回一个被包装后的函数或类。常见用途包括日志记录、权限检查、性能监测、缓存等。\n\n- **Java 注解**：\n  Java 注解（Annotation）是一种元数据标注形式，它为类、方法、字段等元素提供额外的信息。注解本身并不直接执行代码，而是通过编译器、框架或运行时机制（如反射）解析注解，并做出相应的处理。常见用途包括文档生成、代码检查、运行时行为定制等。\n\n### **运行机制**\n\n#### Python 装饰器\n\n- **运行时处理**：Python 装饰器在代码运行时对函数或类进行修饰。当装饰器被调用时，实际会执行包装的逻辑。它可以在函数调用之前、之后或者替换整个函数的行为。\n  \n- **动态性强**：装饰器可以动态地修改或增强函数的行为，不需要对原有的代码进行修改。由于 Python 是动态语言，这种动态修改的能力非常灵活。\n\n#### Java 注解\n\n- **编译时或运行时处理**：Java 注解可以在编译时或运行时处理。像 `@Override` 这样的注解是在编译时检查的，而像 `@Entity`、`@Transactional` 等注解是由框架在运行时通过反射机制处理的。\n\n- **元数据驱动**：注解提供的是元数据，不直接改变代码的执行逻辑。注解通常配合框架或者工具（如 Spring、Hibernate）一起使用，由这些工具根据注解来决定如何处理代码。\n\n### **常见用途**\n\n#### Python 装饰器的用途\n\n- **日志记录**：在函数执行前后记录日志信息。\n- **权限检查**：在访问敏感功能前进行权限验证。\n- **性能监测**：测量函数执行的时间。\n- **缓存**：缓存函数结果，避免重复计算。\n- **输入校验**：对函数输入进行参数校验。\n\n示例：权限检查装饰器\n\n```python\ndef require_admin(func):\n    def wrapper(user, *args, **kwargs):\n        if not user.is_admin:\n            raise PermissionError(\"Admin privileges required\")\n        return func(user, *args, **kwargs)\n    return wrapper\n\n@require_admin\ndef delete_user(user):\n    print(f\"User {user.name} deleted.\")\n```\n\n#### Java 注解的用途\n\n- **编译时检查**：`@Override` 用于检查方法是否正确覆盖了父类的方法。\n- **依赖注入**：`@Autowired` 用于 Spring 框架中进行依赖注入。\n- **事务管理**：`@Transactional` 用于声明方法或类是事务性操作。\n- **映射关系**：`@Entity`、`@Table` 等用于 Hibernate 框架中映射数据库表。\n- **测试**：`@Test` 用于 JUnit 测试框架标识测试方法。\n\n示例：Spring 中的事务管理\n\n```java\nimport org.springframework.transaction.annotation.Transactional;\n\npublic class MyService {\n\n    @Transactional\n    public void performOperation() {\n        // 数据库操作将在一个事务中执行\n    }\n}\n```\n\n### **差异与对比**\n\n| 维度         | Python 装饰器                              | Java 注解                                          |\n| ------------ | ------------------------------------------ | -------------------------------------------------- |\n| **处理时间** | 运行时动态处理                             | 编译时和运行时（通过反射或框架处理）               |\n| **功能**     | 直接修改或增强函数/类的行为                | 提供元数据，不直接修改行为，通常通过框架或工具解析 |\n| **灵活性**   | 非常灵活，可用于任意函数或类，动态修改代码 | 注解多为框架或工具依赖，元数据驱动                 |\n| **常见用途** | 日志、权限验证、性能监控、缓存、输入校验等 | 编译时检查、依赖注入、事务管理、ORM 映射等         |\n| **语法**     | 使用高阶函数实现，修饰函数或类             | 使用元数据标注，修饰类、方法、字段等               |\n\n### **总结**\n\n- **Python 装饰器**：是一个动态的、灵活的机制，可以修改或增强函数和类的行为，广泛用于日志记录、性能分析、权限验证等。\n  \n- **Java 注解**：是一种静态的元数据标注，通常用于编译时检查或通过框架在运行时处理。Java 注解的主要作用是通过工具或框架的解释为代码增加额外的行为。\n\n## 拓展\n\n### 类装饰器\n\n类装饰器的实现与函数装饰器类似，只是它接收和返回的是类对象。\n\n类装饰器是指**装饰类**，即使用装饰器修饰一个类，而不仅仅是函数或方法。这种装饰器和函数装饰器类似，主要是为了增强类的功能，修改类的行为，或者为类添加某些功能。\n\n当我们说“类装饰器”，一般是指**作用在类上的装饰器**，即用来修饰类的装饰器，而不是用类来实现的装饰器。类装饰器主要用于改变类的属性、方法或实例的行为，甚至可以返回一个修改过的类。\n\n**应用场景**\n\n- **类的属性或方法自动增强**：可以在不改变类定义的情况下，动态地修改或添加属性和方法。\n- **类的注册机制**：将类自动注册到某个管理系统中（比如某个全局注册表）。\n- **单例模式**：强制类只能创建一个实例。\n- **权限控制**：为某类对象的方法添加权限检查。\n\n类装饰器的语法\n\n类装饰器的使用和函数装饰器非常相似，使用 `@decorator_name` 的语法，装饰器接受类作为参数并返回修改后的类。\n\n```python\ndef class_decorator(cls):\n    # 这里可以对类进行修改\n    return cls\n\n@class_decorator\nclass MyClass:\n    def method(self):\n        pass\n```\n\n示例\n\n- **为类添加额外的方法**\n\n这是一个简单的类装饰器例子，它为类动态地添加一个新的方法。\n\n```python\ndef add_method_decorator(cls):\n    def new_method(self):\n        return \"This is a dynamically added method!\"\n    \n    cls.new_method = new_method\n    return cls\n\n@add_method_decorator\nclass MyClass:\n    def original_method(self):\n        return \"This is the original method.\"\n\n# 创建实例并调用方法\nobj = MyClass()\nprint(obj.original_method())  # 输出: This is the original method.\nprint(obj.new_method())       # 输出: This is a dynamically added method!\n```\n\n在这个例子中，装饰器 `add_method_decorator` 向类 `MyClass` 添加了一个 `new_method` 方法，而不需要修改类定义。装饰后的类实例可以调用这个新增的方法。\n\n- **单例模式**\n\n单例模式是一种常见的设计模式，它确保一个类只能有一个实例。使用类装饰器可以优雅地实现这一点。\n\n```python\ndef singleton(cls):\n    instances = {}\n\n    def get_instance(*args, **kwargs):\n        if cls not in instances:\n            instances[cls] = cls(*args, **kwargs)\n        return instances[cls]\n\n    return get_instance\n\n@singleton\nclass MySingletonClass:\n    def __init__(self, value):\n        self.value = value\n\n# 创建两个实例\nobj1 = MySingletonClass(10)\nobj2 = MySingletonClass(20)\n\n# 确保它们是同一个实例\nprint(obj1 is obj2)  # 输出: True\nprint(obj1.value)    # 输出: 10\nprint(obj2.value)    # 输出: 10\n```\n\n在这个例子中，`singleton` 装饰器通过内部字典 `instances` 缓存类的实例，确保每次调用时都返回同一个实例。尽管两次使用不同的参数创建对象，装饰器强制它们共享同一个实例。\n\n- **类注册装饰器**\n\n类装饰器还可以用于自动注册类，这在大型应用中非常有用，比如在插件系统中。\n\n```python\nregistry = {}\n\ndef register_class(cls):\n    registry[cls.__name__] = cls\n    return cls\n\n@register_class\nclass MyClassA:\n    pass\n\n@register_class\nclass MyClassB:\n    pass\n\n# 输出已注册的类\nprint(registry)\n```\n\n输出：\n\n```\n{'MyClassA': <class '__main__.MyClassA'>, 'MyClassB': <class '__main__.MyClassB'>}\n```\n\n在这个例子中，`register_class` 装饰器将类注册到全局的 `registry` 字典中，允许程序在其他地方动态地查找和使用这些类。\n\n### 使用functools.wraps\n\n`functools.wraps` 是一个装饰器，通常用于在自定义装饰器中保持被装饰函数的元数据（如函数名、文档字符串、注释等），以免被装饰器的内部函数覆盖。它能够让装饰过的函数看起来依然像原来的函数，从而保持一致性。\n\n**例子**\n\n下面我们使用 `functools.wraps` 来构建一个装饰器，记录函数的调用日志，并保证装饰后的函数保留原函数的元信息。\n\n```python\nimport functools\n\ndef log_execution(func):\n    @functools.wraps(func)  # 保留被装饰函数的元信息\n    def wrapper(*args, **kwargs):\n        print(f\"Executing '{func.__name__}' with arguments {args} and keyword arguments {kwargs}\")\n        result = func(*args, **kwargs)\n        print(f\"'{func.__name__}' returned {result}\")\n        return result\n    return wrapper\n\n@log_execution\ndef add(a, b):\n    \"\"\"Returns the sum of two numbers.\"\"\"\n    return a + b\n\n# 调用函数\nresult = add(10, 20)\nprint(f\"Result: {result}\")\nprint(f\"Function name: {add.__name__}\")\nprint(f\"Function docstring: {add.__doc__}\")\n```\n\n输出：\n\n```\nExecuting 'add' with arguments (10, 20) and keyword arguments {}\n'add' returned 30\nResult: 30\nFunction name: add\nFunction docstring: Returns the sum of two numbers.\n```\n\n在这个例子中，`log_execution` 装饰器在函数执行前后打印日志，记录调用时的参数和返回值。由于我们使用了 `functools.wraps(func)`，装饰后的 `add` 函数依然保留了原函数的名称和文档字符串，否则它们会被内部的 `wrapper` 函数覆盖掉。\n\n如果不使用 `functools.wraps` 的效果：\n\n```python\ndef log_execution(func):\n    def wrapper(*args, **kwargs):\n        print(f\"Executing '{func.__name__}' with arguments {args} and keyword arguments {kwargs}\")\n        result = func(*args, **kwargs)\n        print(f\"'{func.__name__}' returned {result}\")\n        return result\n    return wrapper\n\n@log_execution\ndef add(a, b):\n    return a + b\n\nprint(f\"Function name: {add.__name__}\")\nprint(f\"Function docstring: {add.__doc__}\")\n```\n\n输出：\n\n```\nFunction name: wrapper\nFunction docstring: None\n```\n\n可以看到，如果不使用 `functools.wraps`，`add` 函数的名称变成了 `wrapper`，而且原来的文档字符串也丢失了。因此，`functools.wraps` 非常重要，它确保装饰后的函数保留原始函数的元数据信息。\n","tags":["Python"],"categories":["computer_technology"]},{"title":"Linux命令手册","url":"/2024/09/08/Linux命令手册/","content":"\n## 命令合集\n\n### 1. **基础命令**\n\n- **`echo`**: 用于打印消息或输出变量的值。\n\n  ```bash\n  echo \"Hello, World!\"\n  echo \"Current user: $USER\"\n  ```\n\n- **`cd`**: 更改当前目录。\n\n  ```bash\n  cd /path/to/directory\n  ```\n\n- **`pwd`**: 显示当前工作目录。\n\n  ```bash\n  pwd\n  ```\n\n- **`ls`**: 列出目录中的文件和子目录。\n\n  ```bash\n  ls -l   # 详细信息\n  ls -a   # 包括隐藏文件\n  ```\n\n- **`touch`**: 创建空文件。\n\n  ```bash\n  touch newfile.txt\n  ```\n\n- **`cp`**: 复制文件或目录。\n\n  ```bash\n  cp source.txt destination.txt\n  ```\n\n- **`mv`**: 移动或重命名文件/目录。\n\n  ```bash\n  mv oldname.txt newname.txt\n  mv /path/to/source /path/to/destination\n  ```\n\n- **`rm`**: 删除文件或目录。\n\n  ```bash\n  rm file.txt\n  rm -r directory/  # 递归删除目录\n  ```\n\n### 2. **条件语句**\n\n条件语句在 Linux 脚本编程中用于根据特定条件执行不同的操作。条件语句通常用于检查文件、变量值或其他条件，并基于这些条件控制程序的流程。主要的条件语句包括 `if-else`、`case` 和 `test`。以下是详细的解释和示例：\n\n1. **`if-else` 语句**\n\n`if-else` 语句是最常用的条件语句，用于根据条件执行不同的代码块。\n\n基本语法：\n\n```bash\nif [ condition ]; then\n    # 如果条件为真，则执行这部分代码\nelse\n    # 如果条件为假，则执行这部分代码\nfi\n```\n\n示例：\n\n检查文件是否存在：\n\n```bash\n#!/bin/bash\n\nfile=\"/path/to/file.txt\"\n\nif [ -f \"$file\" ]; then\n    echo \"File exists.\"\nelse\n    echo \"File does not exist.\"\nfi\n```\n\n- **`-f \"$file\"`**：检查指定的路径是否存在且是一个文件。\n- **`\"$file\"`**：变量引用，双引号防止路径中有空格导致的问题。\n\n示例：检查目录是否存在且是否为空：\n\n```bash\n#!/bin/bash\n\ndir=\"/path/to/directory\"\n\nif [ -d \"$dir\" ]; then\n    if [ \"$(ls -A $dir)\" ]; then\n        echo \"Directory is not empty.\"\n    else\n        echo \"Directory is empty.\"\n    fi\nelse\n    echo \"Directory does not exist.\"\nfi\n```\n\n- **`-d \"$dir\"`**：检查指定路径是否是一个目录。\n- **`ls -A $dir`**：列出目录中的所有文件（包括隐藏文件），如果结果不为空则表示目录不为空。\n\n2. **`case` 语句**\n\n`case` 语句用于多重条件判断，适合于选择不同的代码块来处理不同的情况。\n\n基本语法：\n\n```bash\ncase \"$variable\" in\n    pattern1)\n        # 如果 $variable 匹配 pattern1，则执行这部分代码\n        ;;\n    pattern2)\n        # 如果 $variable 匹配 pattern2，则执行这部分代码\n        ;;\n    *)\n        # 如果 $variable 不匹配任何模式，则执行这部分代码\n        ;;\nesac\n```\n\n示例：\n\n根据用户输入执行不同操作：\n\n```bash\n#!/bin/bash\n\nread -p \"Enter a day of the week: \" day\n\ncase \"$day\" in\n    Monday)\n        echo \"Start of the work week.\"\n        ;;\n    Friday)\n        echo \"End of the work week.\"\n        ;;\n    Saturday | Sunday)\n        echo \"Weekend!\"\n        ;;\n    *)\n        echo \"Invalid day.\"\n        ;;\nesac\n```\n\n- **`Monday`** 和 **`Friday`**：匹配具体的字符串。\n- **`Saturday | Sunday`**：匹配多个模式。\n- **`*`**：默认情况，如果没有匹配到任何模式则执行。\n\n3. **`test` 命令**\n\n`test` 命令用于评估文件属性和字符串比较，是 `[` 命令的底层实现。\n\n基本语法：\n\n```bash\ntest expression\n```\n\n或\n\n```bash\n[ expression ]\n```\n\n常用选项：\n\n- **文件测试**：\n  - **`-e`**：检查文件是否存在。\n  - **`-f`**：检查是否为普通文件。\n  - **`-d`**：检查是否为目录。\n  - **`-r`**：检查是否可读。\n  - **`-w`**：检查是否可写。\n  - **`-x`**：检查是否可执行。\n\n- **字符串比较**：\n  - **`=`**：比较两个字符串是否相等。\n  - **`!=`**：比较两个字符串是否不相等。\n  - **`-z`**：检查字符串是否为空。\n  - **`-n`**：检查字符串是否非空。\n\n- **数字比较**：\n  - **`-eq`**：等于。\n  - **`-ne`**：不等于。\n  - **`-lt`**：小于。\n  - **`-le`**：小于或等于。\n  - **`-gt`**：大于。\n  - **`-ge`**：大于或等于。\n\n示例：检查文件是否存在且是否为可执行文件：\n\n```bash\n#!/bin/bash\n\nfile=\"/path/to/script.sh\"\n\nif [ -x \"$file\" ]; then\n    echo \"The file is executable.\"\nelse\n    echo \"The file is not executable.\"\nfi\n```\n\n- **`-x \"$file\"`**：检查文件是否具有可执行权限。\n\n示例：字符串比较：\n\n```bash\n#!/bin/bash\n\nstr1=\"hello\"\nstr2=\"world\"\n\nif [ \"$str1\" = \"$str2\" ]; then\n    echo \"Strings are equal.\"\nelse\n    echo \"Strings are not equal.\"\nfi\n```\n\n- **`\"$str1\" = \"$str2\"`**：比较两个字符串是否相等。\n\n### 3. **循环**\n\n- **`for`**: 遍历列表中的每个元素。\n\n  ```bash\n  for file in *.txt; do\n    echo \"Processing $file\"\n  done\n  ```\n\n- **`while`**: 基于条件的循环。\n\n  ```bash\n  counter=1\n  while [ $counter -le 5 ]; do\n    echo \"Counter: $counter\"\n    ((counter++))\n  done\n  ```\n\n### 4. **函数**\n\n- 定义和调用函数。\n\n  ```bash\n  my_function() {\n    echo \"Hello from function!\"\n  }\n  \n  my_function\n  ```\n\n- 函数带参数。\n\n  ```bash\n  greet() {\n    echo \"Hello, $1\"\n  }\n  \n  greet \"Alice\"\n  ```\n\n### 5. **输入输出和重定向**\n\n- **输入重定向**：从文件或命令中读取输入。\n\n  ```bash\n  cat < inputfile.txt\n  ```\n\n- **输出重定向**：将输出写入文件。\n\n  ```bash\n  echo \"Some text\" > outputfile.txt  # 覆盖输出文件\n  echo \"More text\" >> outputfile.txt  # 追加输出\n  ```\n\n- **管道 (`|`)**：将一个命令的输出作为另一个命令的输入。\n\n  ```bash\n  ls | grep \".txt\"\n  ```\n\n### 6. **变量**\n\n- 定义和使用变量。\n\n  ```bash\n  name=\"Alice\"\n  echo \"Hello, $name\"\n  ```\n\n- 读取用户输入。\n\n  ```bash\n  read -p \"Enter your name: \" username\n  echo \"Welcome, $username\"\n  ```\n\n### 7. **参数传递**\n\n- 脚本可以接受命令行参数。\n\n  ```bash\n  #!/bin/bash\n  echo \"First argument: $1\"\n  echo \"Second argument: $2\"\n  ```\n\n- 获取所有参数。\n\n  ```bash\n  echo \"All arguments: $@\"\n  ```\n\n### 8. **文件处理**\n\n**创建文件**\n\n- **`touch`**：创建一个空文件或更新现有文件的时间戳。\n\n  ```bash\n  touch filename.txt\n  ```\n\n  - 如果 `filename.txt` 已存在，`touch` 会更新文件的最后修改时间。\n  - 如果 `filename.txt` 不存在，则会创建一个空文件。\n\n- **`echo`**：创建一个文件并写入内容。\n\n  ```bash\n  echo \"Hello, World!\" > hello.txt\n  ```\n\n  - 使用 `>` 重定向符将文本 `\"Hello, World!\"` 写入 `hello.txt` 文件。如果文件已存在，会被覆盖。\n\n**读取文件**\n\n- **`cat`**：显示文件内容。\n\n  ```bash\n  cat filename.txt\n  ```\n\n  - **`cat`** 命令会将整个文件的内容输出到标准输出（通常是终端）。\n\n- **`more`** 和 **`less`**：分页显示文件内容。\n\n  ```bash\n  more filename.txt\n  less filename.txt\n  ```\n\n  - **`more`**：逐页显示文件内容，按空格键翻页，按 `q` 退出。\n  - **`less`**：比 `more` 更强大，支持前后翻页，按 `q` 退出。\n\n- **`head`**：显示文件的开头部分。\n\n  ```bash\n  head -n 10 filename.txt\n  ```\n\n  - **`-n`** 选项指定显示的行数，默认显示前10行。\n\n- **`tail`**：显示文件的结尾部分。\n\n  ```bash\n  tail -n 10 filename.txt\n  ```\n\n  - **`-n`** 选项指定显示的行数，默认显示最后10行。\n  - **`tail -f filename.txt`**：实时显示文件新增的内容，用于监控日志文件。\n\n**写入文件**\n\n- **`>`**：将输出重定向到文件，覆盖文件内容。\n\n  ```bash\n  echo \"New content\" > filename.txt\n  ```\n\n- **`>>`**：将输出追加到文件末尾。\n\n  ```bash\n  echo \"Additional content\" >> filename.txt\n  ```\n\n- **`tee`**：将输出写入文件并显示在终端。\n\n  ```bash\n  echo \"Content\" | tee filename.txt\n  ```\n\n  - **`tee`** 命令会将输出内容写入 `filename.txt` 文件，并同时输出到标准输出。\n\n**查找和处理文件**\n\n- **`find`**：查找符合条件的文件。\n\n  ```bash\n  find /path/to/dir -name \"*.txt\"\n  ```\n\n  - 查找 `/path/to/dir` 目录下所有 `.txt` 文件。\n\n- **`grep`**：在文件中查找匹配的文本。\n\n  ```bash\n  grep \"search_term\" filename.txt\n  ```\n\n  - 查找 `filename.txt` 中包含 `\"search_term\"` 的行。\n\n- **`sed`**：流编辑器，用于查找和替换文本。\n\n  ```bash\n  sed 's/old/new/g' filename.txt\n  ```\n\n  - 将 `filename.txt` 中的所有 `old` 替换为 `new`。\n\n- **`awk`**：文本处理工具，用于格式化和处理数据。\n\n  ```bash\n  awk '{print $1}' filename.txt\n  ```\n\n  - 打印 `filename.txt` 中每一行的第一个字段。\n\n**修改文件**\n\n- **`mv`**：移动或重命名文件。\n\n  ```bash\n  mv oldname.txt newname.txt\n  ```\n\n  - 将 `oldname.txt` 重命名为 `newname.txt`。\n  - 也可以将文件移动到不同目录。\n\n- **`cp`**：复制文件。\n\n  ```bash\n  cp source.txt destination.txt\n  ```\n\n  - 复制 `source.txt` 文件到 `destination.txt`。\n\n- **`rm`**：删除文件。\n\n  ```bash\n  rm filename.txt\n  ```\n\n  - 删除 `filename.txt` 文件。\n\n- **`chmod`**：修改文件权限。\n\n  ```bash\n  chmod 755 filename.txt\n  ```\n\n  - 修改 `filename.txt` 的权限为 `rwxr-xr-x`。\n\n**处理文本文件**\n\n- **`sort`**：对文件内容进行排序。\n\n  ```bash\n  sort filename.txt\n  ```\n\n  - 对 `filename.txt` 的内容进行升序排序。\n\n- **`uniq`**：去除重复行。\n\n  ```bash\n  sort filename.txt | uniq\n  ```\n\n  - `uniq` 通常与 `sort` 命令结合使用，用于去除重复行。\n\n- **`cut`**：从文件中提取特定字段。\n\n  ```bash\n  cut -d',' -f1 filename.txt\n  ```\n\n  - 提取 `filename.txt` 中以逗号分隔的第一列数据。\n\n**文件权限**\n\n- **`chmod`**：修改文件权限。\n\n  ```bash\n  chmod 644 filename.txt\n  ```\n\n  - 将 `filename.txt` 的权限设置为 `rw-r--r--`（用户可读写，组用户和其他用户可读）。\n\n- **`chown`**：修改文件的所有者和组。\n\n  ```bash\n  chown user:group filename.txt\n  ```\n\n  - 将 `filename.txt` 的所有者更改为 `user`，组更改为 `group`。\n\n**文件比较**\n\n- **`diff`**：比较两个文件的差异。\n\n  ```bash\n  diff file1.txt file2.txt\n  ```\n\n  - 显示 `file1.txt` 和 `file2.txt` 之间的差异。\n\n- **`cmp`**：逐字节比较两个文件。\n\n  ```bash\n  cmp file1.txt file2.txt\n  ```\n\n  - 比较两个文件的内容，显示第一个不同的字节位置。\n\n**归档和压缩**\n\n- **`tar`**：创建和解压归档文件。\n\n  ```bash\n  tar -cvf archive.tar file1.txt file2.txt\n  ```\n\n  - 创建一个名为 `archive.tar` 的归档文件，包含 `file1.txt` 和 `file2.txt`。\n\n  ```bash\n  tar -xvf archive.tar\n  ```\n\n  - 解压 `archive.tar` 归档文件。\n\n- **`gzip`** 和 **`gunzip`**：压缩和解压文件。\n\n  ```bash\n  gzip filename.txt\n  ```\n\n  - 压缩 `filename.txt` 文件，生成 `filename.txt.gz`。\n\n  ```bash\n  gunzip filename.txt.gz\n  ```\n\n  - 解压 `filename.txt.gz` 文件，恢复为 `filename.txt`。\n\n### 9. **退出状态**\n\n- **`exit`**：返回脚本的退出状态。\n\n  ```bash\n  exit 0  # 成功退出\n  exit 1  # 失败退出\n  ```\n\n- 检查上一条命令的退出状态。\n\n  ```bash\n  if [ $? -eq 0 ]; then\n    echo \"Previous command succeeded\"\n  else\n    echo \"Previous command failed\"\n  fi\n  ```\n\n### 10. **日志与调试**\n\n- **`set -x`**：用于调试，显示执行的每一行命令。\n\n  ```bash\n  set -x\n  ```\n\n- **`set +x`**：关闭调试模式。\n\n  ```bash\n  set +x\n  ```\n\n- **日志输出**：将信息输出到日志文件。\n\n  ```bash\n  echo \"Script started\" >> script.log\n  ```\n\n### 11. **权限**\n\n在 Linux 系统中，文件和目录的权限决定了哪些用户或用户组可以对文件进行读、写、执行操作。每个文件和目录的权限由三组表示：\n\n1. **用户权限（owner）**：文件的所有者。\n2. **用户组权限（group）**：文件所属的用户组。\n3. **其他用户权限（others）**：系统中其他用户的权限。\n\n**查看权限：**\n\n使用 `ls -l` 命令可以查看文件的权限：\n\n```bash\nls -l filename\n```\n\n输出示例：\n\n```\n-rwxr-xr--\n```\n\n- 第一个字符表示文件类型（`-` 表示普通文件，`d` 表示目录）。\n- 后面九个字符分别表示用户、组和其他人的权限。\n  - **r**：可读（read）。\n  - **w**：可写（write）。\n  - **x**：可执行（execute）。\n  - 没有权限时用 `-` 表示。\n\n如上面的例子：\n\n- `rwx`：用户（owner）可以读、写、执行。\n- `r-x`：组用户可以读和执行，但不能写。\n- `r--`：其他用户只能读。\n\n**修改权限：**\n\n使用 `chmod` 命令修改文件或目录的权限。\n\n1. 数字模式：\n\n权限用三个数字表示，每个数字为权限组合值的总和：\n\n- **读（r）**：4\n- **写（w）**：2\n- **执行（x）**：1\n\n组合值：\n\n- **7** = 读 + 写 + 执行\n- **6** = 读 + 写\n- **5** = 读 + 执行\n- **4** = 读\n\n例如，给文件赋予 `rwxr-xr--` 权限（用户：读写执行，组：读执行，其他用户：只读）：\n\n```bash\nchmod 754 filename\n```\n\n2. 符号模式：\n\n使用符号来设置权限：\n\n- **u**：用户（owner）\n- **g**：组用户\n- **o**：其他用户\n- **+**：添加权限\n- **-**：移除权限\n- **=**：设置权限\n\n示例：\n\n```bash\nchmod u+x filename    # 给用户添加执行权限\nchmod g-w filename    # 移除组用户的写权限\nchmod o=r filename    # 设置其他用户只有读权限\n```\n\n### 12. **进程控制**\n\nLinux 是一个多任务操作系统，进程控制是管理和操作系统中运行的程序或任务的重要功能。通过管理进程，用户可以查看、终止、暂停和恢复程序的执行。\n\n**查看进程：**\n\n使用 `ps` 命令查看系统中当前运行的进程。常用选项包括：\n\n```bash\nps aux\n```\n\n- **`ps`**：显示当前进程信息。\n- **`aux`**：显示所有用户的所有进程以及详细信息。\n\n示例输出：\n\n```\nUSER       PID  %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\nroot         1  0.0  0.1  22564  1392 ?        Ss   09:21   0:02 /sbin/init\nuser      2735  0.2  1.3 110236 25356 ?        S    10:30   0:05 /usr/bin/python\n```\n\n- **PID**：进程 ID。\n- **%CPU**：CPU 使用率。\n- **%MEM**：内存使用率。\n- **COMMAND**：正在执行的命令。\n\n**后台运行进程**\n\n使用 `&` 将进程放在后台执行：\n\n```bash\n./script.sh &\n```\n\n- **`&`**：将脚本放入后台执行，终端不会等待脚本执行完毕。\n\n**停止和恢复进程**\n\n- **`Ctrl + Z`**：暂停前台运行的进程。\n- **`bg`**：将暂停的进程放入后台继续运行。\n- **`fg`**：将后台进程恢复到前台。\n\n**终止进程**\n\n使用 `kill` 命令可以终止进程。\n\n```bash\nkill <PID>\n```\n\n- **`<PID>`**：进程的 ID，通过 `ps` 命令获得。\n\n**强制终止进程**\n\n如果一个进程无法正常终止，可以使用 `-9` 强制终止：\n\n```bash\nkill -9 <PID>\n```\n\n**常用进程控制命令**\n\n1. **`top`**：实时显示系统中正在运行的进程以及资源使用情况。\n\n   ```bash\n   top\n   ```\n\n2. **`htop`**：功能更强大的进程监控工具，需要单独安装。\n\n   ```bash\n   htop\n   ```\n\n3. **`jobs`**：查看当前会话中的后台作业。\n\n   ```bash\n   jobs\n   ```\n\n## 使用示例：\n\n### `grep` - 文本搜索工具\n\n1. **查找文件中的文本**\n\n   ```bash\n   grep \"search_term\" filename.txt\n   ```\n\n   - **功能**：在 `filename.txt` 中查找包含 `search_term` 的行，并显示这些行。\n   - **常用选项**：\n     - `-i`：忽略大小写。\n     - `-v`：显示不包含 `search_term` 的行。\n     - `-r` 或 `-R`：递归地在目录中查找文件。\n     - `-n`：显示匹配行的行号。\n     - `-H`：显示匹配的文件名。\n\n   ```bash\n   grep -i \"error\" /var/log/syslog\n   ```\n\n   - **功能**：在 `/var/log/syslog` 文件中查找包含 `error`（忽略大小写）的行。\n\n2. **查找进程相关信息**\n\n   ```bash\n   ps aux | grep \"process_name\"\n   ```\n\n   - **功能**：列出所有进程，然后通过 `grep` 过滤出包含 `process_name` 的进程信息。\n   - **常用选项**：\n     - `-e`：显示所有进程。\n     - `-f`：显示详细信息。\n     - `aux`：结合 `a`（所有用户的进程）、`u`（以用户格式显示）和 `x`（显示没有控制终端的进程）。\n\n   ```bash\n   ps aux | grep \"apache\"\n   ```\n\n   - **功能**：列出所有进程，并显示包含 `apache` 的行，用于查找与 Apache 相关的进程。\n\n3. **显示指定目录下所有文件中包含特定内容的行**\n\n   ```bash\n   grep -r \"search_term\" /path/to/dir\n   ```\n\n   - **功能**：递归搜索 `/path/to/dir` 目录及其子目录中的所有文件，查找包含 `search_term` 的行。\n\n### `top` - 实时系统监控工具\n\n1. **基本使用**\n\n   ```bash\n   top\n   ```\n\n   - **功能**：显示系统上当前运行的进程及其资源使用情况，实时更新。\n   - **常用功能**：\n     - **`P`**：按 CPU 使用率排序。\n     - **`M`**：按内存使用情况排序。\n     - **`q`**：退出 `top`。\n\n2. **指定更新间隔**\n\n   ```bash\n   top -d 5\n   ```\n\n   - **功能**：每隔 5 秒更新一次显示。\n\n3. **显示指定用户的进程**\n\n   ```bash\n   top -u username\n   ```\n\n   - **功能**：仅显示 `username` 用户的进程。\n\n4. **自定义显示**\n\n   ```bash\n   top -b -n 1\n   ```\n\n   - **功能**：以批处理模式运行 `top`，输出一次快照并退出（适合将输出重定向到文件）。\n\n### `ps` - 显示进程状态\n\n1. **显示所有进程**\n\n   ```bash\n   ps aux\n   ```\n\n   - **功能**：显示所有用户的所有进程，提供详细信息，包括 CPU 和内存使用情况。\n   - **常用选项**：\n     - `a`：显示所有用户的进程。\n     - `u`：以用户格式显示。\n     - `x`：显示没有控制终端的进程。\n\n2. **显示特定用户的进程**\n\n   ```bash\n   ps -u username\n   ```\n\n   - **功能**：仅显示 `username` 用户的进程。\n\n3. **显示特定进程的信息**\n\n   ```bash\n   ps -p PID\n   ```\n\n   - **功能**：显示进程 ID 为 `PID` 的进程信息。\n\n4. **显示树状进程结构**\n\n   ```bash\n   ps -ejH\n   ```\n\n   - **功能**：以树状结构显示进程及其子进程。\n\n**结合使用**\n\n1. **查找占用高 CPU 的进程**\n\n   ```bash\n   top -b -n 1 | grep \"Cpu(s)\"\n   ```\n\n   - **功能**：运行 `top` 命令并筛选出 CPU 使用情况的行。\n\n2. **检查特定进程的资源使用情况**\n\n   ```bash\n   ps aux | grep \"process_name\" | awk '{print $1, $2, $3, $4, $11}'\n   ```\n\n   - **功能**：查找 `process_name` 相关的进程，并使用 `awk` 提取用户、PID、CPU 使用率、内存使用率和命令名。\n\n3. **实时监控进程状态**\n\n   ```bash\n   top -p $(pgrep -d',' -f process_name)\n   ```\n\n   - **功能**：实时监控与 `process_name` 相关的进程，`pgrep` 用于查找进程 ID，并将其传递给 `top` 命令。\n","tags":["Linux"],"categories":["computer_technology"]},{"title":"正则表达式","url":"/2024/08/01/正则表达式/","content":"\n> 冷笑话一则：\n>\n> 正则表达式和正则化有什么关系啊？\n>\n> 正则化是防止过拟合的。\n>\n> 什么意思？\n>\n> 它俩没关系，你的脑子过拟合了。\n\n## 规则\n\n### 字符类\n\n- `[abc]`：匹配 'a', 'b' 或 'c' 中的任意一个字符。\n\n  ```regex\n  [abc]\n  ```\n\n  示例：\n\n  ```tex\n  a, b, c\n  ```\n\n- `[^abc]`：匹配除了 'a', 'b' 或 'c' 以外的任意一个字符。\n\n  ```regex\n  [^abc]\n  ```\n\n  示例：\n\n  ```tex\n  d, e, 1, @\n  ```\n\n- `[a-z]`：匹配从 'a' 到 'z' 范围内的任意一个字符。\n\n  ```regex\n  [a-z]\n  ```\n\n  示例：\n\n  ```tex\n  a, m, z\n  ```\n\n- `[0-9]`：匹配从 '0' 到 '9' 范围内的任意一个字符。\n\n  ```regex\n  [0-9]\n  ```\n\n  示例：\n\n  ```tex\n  0, 5, 9\n  ```\n\n### 预定义字符类\n\n- `.`：匹配除换行符外的任意一个字符。\n\n  ```regex\n  .\n  ```\n\n  示例：\n\n  ```tex\n  a, 1, @, (space)\n  ```\n\n- `\\d`：匹配任意一个数字字符（等价于 `[0-9]`）。\n\n  ```regex\n  \\d\n  ```\n\n  示例：\n\n  ```tex\n  0, 5, 9\n  ```\n\n- `\\D`：匹配任意一个非数字字符（等价于 `[^0-9]`）。\n\n  ```regex\n  \\D\n  ```\n\n  示例：\n\n  ```tex\n  a, @, (space)\n  ```\n\n- `\\w`：匹配任意一个单词字符（字母、数字、下划线）。\n\n  ```regex\n  \\w\n  ```\n\n  示例：\n\n  ```tex\n  a, 5, _\n  ```\n\n- `\\W`：匹配任意一个非单词字符。\n\n  ```regex\n  \\W\n  ```\n\n  示例：\n\n  ```tex\n  @, (space), #\n  ```\n\n- `\\s`：匹配任意一个空白字符（空格、制表符、换行符等）。\n\n  ```regex\n  \\s\n  ```\n\n  示例：\n\n  ```tex\n  (space), \\t, \\n\n  ```\n\n- `\\S`：匹配任意一个非空白字符。\n\n  ```regex\n  \\S\n  ```\n\n  示例：\n\n  ```tex\n  a, 1, @\n  ```\n\n### 边界匹配\n\n- `^`：匹配字符串的开始。\n\n  ```regex\n  ^Hello\n  ```\n\n  示例：\n\n  ```tex\n  Hello world (匹配)\n  world Hello (不匹配)\n  ```\n\n- `$`：匹配字符串的结束。\n\n  ```regex\n  world$\n  ```\n\n  示例：\n\n  ```tex\n  Hello world (匹配)\n  world Hello (不匹配)\n  ```\n\n- `\\b`：匹配单词边界。\n\n  ```regex\n  \\bword\\b\n  ```\n\n  示例：\n\n  ```tex\n  word (匹配)\n  words (不匹配)\n  ```\n\n- `\\B`：匹配非单词边界。\n\n  ```regex\n  \\Bword\\B\n  ```\n\n  示例：\n\n  ```tex\n  swordfish (匹配)\n  word (不匹配)\n  ```\n\n### 量词\n\n- `*`：匹配前面的子表达式零次或多次。\n\n  ```regex\n  a*\n  ```\n\n  示例：\n\n  ```tex\n  '', 'a', 'aaa'\n  ```\n\n- `+`：匹配前面的子表达式一次或多次。\n\n  ```regex\n  a+\n  ```\n\n  示例：\n\n  ```tex\n  'a', 'aaa' (匹配)\n  '' (不匹配)\n  ```\n\n- `?`：匹配前面的子表达式零次或一次。\n\n  ```regex\n  a?\n  ```\n\n  示例：\n\n  ```tex\n  '', 'a' (匹配)\n  'aa' (不匹配)\n  ```\n\n- `{n}`：匹配前面的子表达式恰好 n 次。\n\n  ```regex\n  a{3}\n  ```\n\n  示例：\n\n  ```tex\n  'aaa' (匹配)\n  'aa', 'aaaa' (不匹配)\n  ```\n\n- `{n,}`：匹配前面的子表达式至少 n 次。\n\n  ```regex\n  a{2,}\n  ```\n\n  示例：\n\n  ```tex\n  'aa', 'aaa' (匹配)\n  'a' (不匹配)\n  ```\n\n- `{n,m}`：匹配前面的子表达式至少 n 次，至多 m 次。\n\n  ```regex\n  a{2,4}\n  ```\n\n  示例：\n\n  ```tex\n  'aa', 'aaa', 'aaaa' (匹配)\n  'a', 'aaaaa' (不匹配)\n  ```\n\n### 分组和捕获\n\n- `()`：定义子表达式的范围，并捕获匹配的文本。\n\n  ```regex\n  (abc)\n  ```\n\n  示例：\n\n  ```tex\n  abc (匹配)\n  aabc, abcc (不匹配)\n  ```\n\n- `|`：表示选择，匹配的是 `|` 前或 `|` 后的表达式。\n\n  ```regex\n  a|b\n  ```\n\n  示例：\n\n  ```tex\n  a, b (匹配)\n  c, d (不匹配)\n  ```\n\n## 示例\n\n### 匹配电话号码\n\n假设有一个包含电话号码的文本，我们想匹配格式为 `(123) 456-7890` 的电话号码：\n\n```regex\n\\(\\d{3}\\) \\d{3}-\\d{4}\n```\n\n- `\\(`：匹配左括号 `(`。\n- `\\d{3}`：匹配三个数字。\n- `\\)`：匹配右括号 `)`。\n- ` `：匹配空格。\n- `\\d{3}`：匹配三个数字。\n- `-`：匹配连字符 `-`。\n- `\\d{4}`：匹配四个数字。\n\n### 匹配电子邮件地址\n\n```regex\n^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\n```\n\n解释：\n\n- `^[a-zA-Z0-9._%+-]+`：匹配以字母、数字、点、下划线、百分号、加号、减号组成的一个或多个字符开头。\n- `@`：匹配 @ 符号。\n- `[a-zA-Z0-9.-]+`：匹配域名的一部分，可以包含字母、数字、点、减号。\n- `\\.`：匹配点字符。\n- `[a-zA-Z]{2,}$`：匹配顶级域名部分，由两个或更多字母组成。\n\n2. **匹配 URL**\n\n```regex\n^(https?|ftp)://[^\\s/$.?#].[^\\s]*$\n```\n\n解释：\n\n- `^(https?|ftp)://`：匹配以 http、https 或 ftp 开头的 URL。\n- `[^\\s/$.?#]`：匹配非空白字符、斜杠、美元符号、点、问号、井号的字符。\n- `[^\\s]*$`：匹配除空白字符以外的任意字符，零次或多次，直到字符串结束。\n\n## 使用\n\n### Java\n\n需要使用使用 java.util.regex 包中的 `Pattern` 和 `Matcher` 类\n\n```java\nimport java.util.regex.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        // 正则表达式\n        String pattern = \"^(https?|ftp)://[^\\s/$.?#].[^\\s]*$\";\n        Pattern compiledPattern = Pattern.compile(pattern);\n        // 测试字符串\n            String url = \"ftp://ftp.example.com\",\n        // 匹配\n            Matcher matcher = compiledPattern.matcher(url);\n            if (matcher.matches()) {\n                System.out.println(\"Matched: \" + url);\n            } else {\n                System.out.println(\"Not matched: \" + url);\n            }\n        \n    }\n}\n\n```\n\n### Python\n\n```python\nimport re\n# 正则表达式\npattern = r'^(https?|ftp)://[^\\s/$.?#].[^\\s]*$'\n\n# 测试字符串\nurl = 'https://www.example.com/path/to/resource',\n\n# 匹配\n    if re.match(pattern, url):\n        print(f\"Matched: {url}\")\n    else:\n        print(f\"Not matched: {url}\")\n\n```\n\n在 Python 中，使用正则表达式时，建议在字符串前面加上 `r`（即创建原始字符串），以便更方便地处理正则表达式中的转义字符。这个 `r` 字母并不是正则表达式的一部分，而是 Python 字符串的一个标记，用于指示这是一个原始字符串（raw string）。\n\n原始字符串使得正则表达式中的反斜杠 `\\` 不需要额外转义。例如，在正则表达式中，`\\\\` 用于匹配一个字面上的反斜杠。如果你使用普通字符串，你需要写成 `\\\\\\\\`，因为每个反斜杠都需要转义一次。而在原始字符串中，你只需要写成 `\\\\`。\n\n### JavaScript\n\n```js\n// 正则表达式\nconst pattern = /^(https?|ftp):\\/\\/[^\\s/$.?#].[^\\s]*$/;\n\n// 测试字符串\nurl = 'http://example.com',\n\n// 匹配\nif (pattern.test(url)) {\n    console.log(`Matched: ${url}`);\n} else {\n    console.log(`Not matched: ${url}`);\n}\n\n```\n\n在 JavaScript 中，正则表达式通常是使用斜杠 `/` 来表示的，这种方式称为**正则表达式字面量**。正则表达式字面量是将正则表达式直接写在斜杠之间的方式\n\n### MySQL\n\n```sql\nSELECT url\nFROM urls\nWHERE url REGEXP '^(https?|ftp)://[^\\s/$.?#].[^\\s]*$';\n```\n","tags":["RegExp"],"categories":["computer_technology"]},{"title":"魏晋","url":"/2024/07/23/魏晋/","content":"\n## 魏晋\n\n### 《观沧海》\n\n> 东临碣石，以观沧海。\n> 水何澹澹，山岛竦峙。\n> 树木丛生，百草丰茂。\n> 秋风萧瑟，洪波涌起。\n> 日月之行，若出其中；\n> 星汉灿烂，若出其里。\n> 幸甚至哉，歌以咏志。\n>\n> \n>\n> **译文\n> \n> **东行登上高高的碣石山，来观赏苍茫的大海。\n> 海水多么宽阔浩荡，海中山岛罗列，高耸挺立。\n> 周围树木葱茏，各种草植生长茂盛。\n> 萧瑟的风声传来，草木动摇，海中翻涌着巨大的海浪。\n> 太阳和月亮升起降落，好像是从这浩瀚的海洋中发出的。\n> 天河里的灿烂群星，也好像是从大海的怀抱里涌现出来的。\n> 太值得庆幸了！就用诗歌来表达心志吧。\n>\n> **注释**\n> 临：登上，有游览的意思。\n> 碣（jié）石：山名。碣石山，河北昌黎碣石山。公元207年秋天，曹操征乌桓得胜回师时经过此地。\n> 沧：通“苍”，青绿色。\n> 海：渤海\n> 何：多么\n> 澹澹（dàn dàn）：水波摇动的样子。\n> 竦峙（sǒng zhì）：耸立。竦 ，通耸，高。\n> 萧瑟：树木被秋风吹的声音。\n> 洪波：汹涌澎湃的波浪\n> 日月：太阳和月亮\n> 若：如同.好像是.\n> 星汉：银河，天河。\n> 幸：庆幸。\n> 甚：很，程度副词。\n> 至：极点。\n> 幸甚至哉，歌以咏志：太值得庆幸了！就用诗歌来表达心志吧。（最后两句每章都有，与本诗正文的内容没有的直接关系。）\n\n1. 在这个魏晋时代的时刻的一个重要的变化是什么呢？就是诗歌的个性化。我们来看这个以前的诗歌的时候，我们会注意到一个问题，就是说我们如果说把诗经和这个汉乐府，包括古诗十九首在内，看成是以前的这个中国诗歌的主要的这个脉络的化，因为这个骚体它是已经很快的转向另外一个方向去了。我们可以这样来下一个断语，就是说以前的这个诗歌它基本上都是歌谣性质，所谓歌谣性质的诗歌它有一个什么样的特点？就是说它表现的往往是一种公众化的感情，所谓公众化的感情就是说它没有一种特异的个性，是普遍性的感情。你也可以说这种诗歌往往写的都是一种所谓永恒主题。\n\n2. 所谓永恒主题，我就想起想，有一次坐那个坐车打的，然后看那个司机，然后再放一个音乐，就是那个孙悦唱的那个祝你平安啊，听到那个他唱的两句，突然笑起来了，他说这个你的所得还那样少吗？你的付出还那样多吗？这就是歌谣的特点，他表达的是一种公正性的感觉，所有人都会感觉到我的所得很少，我的付出很多。\n\n3. 每个人在跟世界算账的时候，总是觉得没有说世界给我太多，而是说世界给我的那一份不是我应该得的那一份，它少于我应得的那一份。\n\n4. 在社会当中流传的这样的一种作品，因此他要适应大多数人的这种普遍性的这种情感。那么这个对于诗歌来说它就会出现一个什么问题，就会出现这个内容和主题的它的重复。歌谣的这个主题它是会很容易重复的。我一开始的时候就讲过，就诗经的很多作品，你如果对他的这个语言没有一种隔阂感，你去读，你会发现在你的内心里面它没有时间感的，你甚至可以把它就当做流行歌曲来看待。\n\n5. 那么诗歌要发展到什么样的程度才会更加丰富呢？那就是个性化的，因为每一个人当他从自己的独特的个性和他独特的生命经历当中来写诗的时候，诗就会变得很复杂，是跟诗人的特殊的生命经历、特殊的情感和特殊的个性联系在一起。\n\n6. 一读这个曹操这首诗，你立刻就感觉到你跟读以前的诗是不一样的。这个诗歌的这种意境，它特别的开阔宏大，而意境的开阔宏大意味着什么呢？意味着世人的这个情感世界的壮阔，情感世界的状况。\n\n7. 讲杜甫的诗的时候，我经常讲一句这个话，就是杜甫就是不登高，不写愁。为什么叫不登高不写愁呢？因为在一个蜷曲的角落里的人的这个精神世界它会被收缩掉，也就是说诗歌当中所显示出来的这一种人格形象是蜷曲的、猥琐的。当你面对一个广大的世界的时候，你觉得你的这种悲哀，它是和更广大的这种情感和生命意志联系在一起。\n\n8. 杜甫的旅夜书怀，杜甫写旅夜书怀的时候是他生命的最终的时刻，因为他病得很重，那么当时离开四川出三峡，最后他死在湖南。这个旅行的目标是什么？我不太清楚，我们只能清楚的是他生到生命到了最终的时期了。\n\n9. 这个星垂平野阔，月涌大江流。这个是我唐诗里面读到的，就是说最精致的这个对仗句子之一。那唐诗那个最精致的对仗句差不多全是杜甫写的，他为什么要写这个？你知道吗？就是说那种愁苦烦闷，那种无聊和失望，唉，对生命的根本的失望的这种悲哀。但是在说这个悲哀之前，他需要一个非常广大的世界，星垂平野阔，晚上是看不到广阔的世界的，但是可以怎么样去体会呢？星星垂的很低很低，可见这大地是辽阔的。月涌大江流，晚上是看不到江水流动的，但是这个江水流动的时候，这个涌起的波浪，月光照耀的涌起的波浪，这个波浪的翻滚是可以感到的。\n\n10. 我们知道这个曹操出生在一个，所以所谓有一点背景，但是背景不很强大的这样一个这样的一个家庭，在中国的大动乱的这个过程里面，凭借自己的毅力和智慧评定了中国的北方，成为中国北方的实际的统治者。接下来就是南征，完成中国的统一大业。在完成中国统一大业之前，他又要做一件什么件事呢？北征乌桓。\n\n11. 所以他是站在他的人生的顶点上，就是说奠定了中原北征乌桓，一切都成功准备第二年就要南征了，这个时候回兵集合，正是志得意满，站在人生的高峰上。\n\n12. 碣石这个地方很特殊，这个地方号称海门，就海之门，就是陆地和大海的交接的地方。这是秦始皇祭海的地方，是汉武帝祭海的地方，现在明白了吗？这个地方，秦始皇来过这个地方，汉武帝来过这个地方，俺曹操，曹孟德来也。我说到这里，大家就会想起毛主席的那个“往事越千年，魏武挥鞭。东临碣石有遗篇。萧瑟秋风今又是，换了人间”。毛主席是懂历史的，毛主席写这个的时候也会想到这个地方，秦始皇来过这个地方，汉武帝来过这个地方，曹孟德来过这个地方，现在我来了。哈哈哈。\n\n13. 我们来体会一种伟大历史人物的这样的一种豪迈的、壮阔的这样一种胸怀，这也是我们生命当中潜在的一份可能。就是当我们体会诗的时候，我们就在体会我们自己的世界。\n\n\n### 《短歌行》\n\n> 对酒当歌，人生几何！\n> 譬如朝露，去日苦多。\n> 慨当以慷，忧思难忘。\n> 何以解忧？唯有杜康。\n> 青青子衿，悠悠我心。\n> 但为君故，沉吟至今。\n> 呦呦鹿鸣，食野之苹。\n> 我有嘉宾，鼓瑟吹笙。\n> 明明如月，何时可掇？\n> 忧从中来，不可断绝。\n> 越陌度阡，枉用相存。\n> 契阔谈讌，心念旧恩。\n> 月明星稀，乌鹊南飞。\n> 绕树三匝，何枝可依？\n> 山不厌高，海不厌深。\n> 周公吐哺，天下归心。\n>\n> \n>\n> **译文**\n> 一边喝着酒，一边唱着歌，人生的岁月有多少。\n> 好比晨露转瞬即逝，已经逝去的时光实在太多！\n> 宴会上的歌声激昂慷慨，心中的忧愁却难以遗忘。\n> 靠什么来排解忧闷？唯有豪饮美酒。\n> 有学识的才子们啊，你们令我朝夕思慕。\n> 只是因为你们的缘故，让我沉痛吟诵至今。\n> 阳光下鹿群呦呦欢鸣，在原野吃着艾蒿。\n> 一旦四方贤才光临舍下，我将奏瑟吹笙宴请嘉宾。\n> 高悬夜空的明月哟，什么时候可以摘取呢？\n> 心中深深的忧思，喷涌而出不能停止。\n> 远方宾客穿越纵横交错的小路，屈驾前来探望我。\n> 久别重逢谈心宴饮，重温那往日的恩情。\n> 月光明亮星光稀疏，一群寻巢的喜鹊向南飞去。\n> 环绕着树反复盘旋，哪里才有它们栖身之处？\n> 高山不辞土石才见巍峨，大海不弃涓流才见壮阔。\n> 我愿如周公一般礼贤下士，愿天下的英杰都真心归顺于我。\n>\n> \n>\n> **注释**\n> 对酒当歌：一边喝着酒，一边唱着歌。当，是对着的意思。\n> 几何：多少。\n> 去日：过去的日子；苦：太。\n> 慨当以慷：指宴会上的歌声激昂慷慨。当以，这里无实际意义。全句意思是，应当用激昂慷慨（的方式来唱歌）。\n> 杜康：相传是最早造酒的人，这里代指酒。\n> 青青子衿（jīn），悠悠我心：这里用来比喻渴望得到有才学的人。子，对对方的尊称。衿，衣服的交领。青衿，是周代读书人的服装，这里指代有学识的人。悠悠，长久的样子，形容思虑连绵不断。\n> 沉吟：沉思，深思，这里指对贤才的思念和倾慕。\n> 呦（yōu）呦鹿鸣，食野之苹。我有嘉宾，鼓瑟吹笙（shēng）：出自《诗经·小雅·鹿鸣》。\n> 呦呦：鹿叫的声音。苹：艾蒿。\n> 鼓：弹。\n> 何时可掇（duō）：什么时候可以摘取呢？掇，拾取，摘取。另解：掇读chuò，为通假字，掇，通“辍” ，即停止的意思。\n> 越陌度阡：穿过纵横交错的小路。陌，东西向田间小路。阡，南北向的小路。\n> 枉用相存：屈驾来访。枉，这里是“枉驾”的意思；用，以。存，问候，思念。\n> 䜩（yàn）：同“宴”。\n> 三匝（zā）：指三周，形容反复盘旋。匝，周，圈。\n> 海不厌深：一本作“水不厌深”。意思是表示希望尽可能多地接纳人才。\n> 吐哺：极言殷勤待士\n\n1. 曹操诗歌的这个特点,就是说我说悲歌慷慨,或者说悲凉慷慨吧。慷慨就是一种情绪很激烈的这一种状态。这种悲凉慷慨，\n2. 那为什么他是悲凉的，又是慷慨的？所谓悲凉它跟那个整个时代背景有关系。这个毛泽东曾经说过这个中国历史上的一些现象，就中国历史上就曾经出现过多次的这种人口的大衰亡，人口损失一半以上多次出现。我们看到那个建安七子，大家去看那个建安七子的那个生平的话，你会看到发现好几个人是同一年死的，为什么？瘟疫。社会的动乱和人口的伤亡这种时代的变化，它给人的精神上带来的这个打击是非常沉重。所以这个时代就像包括曹操，也包括其他的一些诗人，他都有一种悲凉的气息。\n3. 所谓慷慨是指什么呢？是一种激昂的情绪，因为悲凉它有可能导致人的一种情绪的消沉，但是曹操表现出慷慨，一种奋发有为的志向，原因是这种混乱的时代当中，那么它也给那些有志者带来机会。当世人对曹操的这个评价，说就说奸雄，所谓说治世之奸者而乱世之英雄。\n4. 当世界处于一个稳定的这个状态的时候，这个获取权利的过程是受这个既有的权利秩序的抑制的。而在动乱的时代，一个具有强大的这个创造性力量的人物，他获得的这个成功的机会更高。他在历史舞台上得以表达自己的机会就更多啊。所以我们来读曹操的时候，就会读到这种东西。\n5. 这首诗大家都很熟悉，我讲一点背景，第二个我就讲它实际上是一个两重奏的东西，就是所谓悲凉慷慨这两重奏两个音乐主题，就像我们听那个贝多芬的那个第九交响乐一样，它是两个主题。（建功立业和世事无常）\n6. 曹操在说他要建立功业的过程里面，他需要依赖别人，他需要得到帮助。老子讲这个上善若水的里面有一个重要的要点是容纳，因为一个伟大人物，他并不是他的个人力量特别伟大。一个伟大人物之所以是伟大人物，是因为他能够使其他人的力量成为他的力量。那就是像百川归海一样。\n7. 月明星稀，乌鹊南飞。绕树三匝，何枝可依？这句诗一般把它解释为就是说那些前来投奔他的人，就是说在没有投奔他之前那种茫然，这个无所依归的那种状态，就像这个深夜当中的这个乌鹊，找不到栖息之地的那种感觉。但是从整个诗歌的这个，就我说从诗意的流动来看，这个解释不一定好，我不是说它完全不成立，但不一定好。\n8. 他仍然是我刚刚说的是双重主题，就是一种人生的失落和无所依归之感。我们在这个世界上就是说，如果说你对你自己的人生目标或者人生的价值和意义的确定没有那么坚定。尤其是说在世界所谓无常的这个变化过程当中，一切都那样不能坚定、不那么确认，不那么有信心的时候，你会产生一种无所依托的感觉：生命是没有着落的。\n9. 我们读了曹操的诗，我们就立刻就感觉到，就是说诗人的诗跟歌谣是不一样的，它是一种独特的生命、独特的经验。它在打动我们，以一种非常特殊的方式打动我们，唤起我们心里面的某一种内在的情感和期待。\n\n### 《名都篇》\n\n> 名都多妖女，京洛出少年。\n> 宝剑值千金，被服丽且鲜。\n> 斗鸡东郊道，走马长楸间。\n> 驰骋未及半，双兔过我前。\n> 揽弓捷鸣镝，长驱上南山。\n> 左挽因右发，一纵两禽连。\n> 馀巧未及展，仰手接飞鸢。\n> 观者咸称善，众工归我妍。\n> 归来宴平乐，美酒斗十千。\n> 脍鲤臇胎鰕，寒鳖炙熊蹯。\n> 鸣俦啸匹侣，列坐竟长筵。\n> 连翩击鞠壤，巧捷唯万端。\n> 白日西南驰，光景不可攀。\n> 云散还城邑，清晨复来还。\n>\n> \n>\n> **译文\n> \n> **名都盛产艳丽的美女，洛阳更有风度翩翩的少年。\n> 我佩带的宝剑价值千金，身着的衣服奢华鲜艳。\n> 斗鸡在东郊的道路上，赛马于长列的楸树间。\n> 我骑马驰骋还不到半路，一双野兔就蹦到了跟前。\n> 于是立即弯起弓弩搭上了响箭，扬鞭策马追上了南山。\n> 我左手挽弓，右手发箭，只一箭就把双兔射倒了。\n> 别的技巧还没有施展，又迎头射中空中的飞鸢。\n> 观猎的行人齐声喝彩，旁边的射手为我赞叹。\n> 归来大宴于平乐古观，美酒一斗便值十千钱。\n> 细切了鲤鱼烹煮虾羹，爆炒甲鱼再烧烤熊掌。\n> 呼朋引伴地前来入座，长长的筵席顷刻坐满。\n> 蹴鞠和击壤忙个不停，身手敏捷，花样翻新。\n> 太阳永远疾驰在西南，流逝的光景不可追攀。\n> 盛宴后我们如云骤散，明天清晨再来此畅饮游玩！\n>\n> **注释\n> \n> **名都：著名的都会，如当时的临淄、邯郸等。妖女：艳丽的女子，这里指倡伎。\n> 京洛：指东京洛阳。少年：指贵族纨绔子弟。洛阳是东汉的国都、是贵族麕集之地，从东汉的乐府和文人诗中就常有写洛阳纨绔生活的作品了。此篇中心是写少年，上句写妖女是为此句作陪衬。\n> 直：同值。\n> 被服：指衣著。被，同披。服，穿。\n> 斗鸡：看两鸡相斗以为博戏，这是汉魏以来直到唐代盛行的一种习俗。\n> 长楸间：指两旁种着高楸的大道。楸，落叶乔木，也叫大樟。\n> 捷：插。\n> 南山：指洛阳之南山。\n> 左挽右发：左手拉弓向右射去。一般都用右手拉弓，这里故意用左手，以卖弄“巧伎”，与下文之“余巧未及展”相应。\n> 一纵：一发。\n> 两禽连：两禽同时被射中。两禽，即指上文所说的双兔，古代对飞鸟和走兽都可以称禽，后来才分开，专以禽指飞鸟。\n> 接：迎射对面飞来的东西。《白马篇》有“仰手接飞猱”，与此句式相同。\n> 鸢（yuān冤）：鹞子。\n> 众工：许多善射者。工，巧。\n> 归我研：称道我的射艺高。妍，美善。\n> 平乐：宫观名，东汉时明帝所建，在洛阳西门外。\n> 斗十千：一斗酒价值万钱，极言其宴饮之豪奢。\n> 脍鲤：把鲤鱼做成肉丝。脍（kuài），切肉成丝。\n> 臇胎鰕：把胎做成肉羹。臇（juǎn），动词，做成肉羹。胎，有籽的肥。\n> 寒鳖：酱腌甲鱼。\n> 炙熊蹯（fán凡）：烤熊掌。\n> 鸣、啸，都指招呼。\n> 俦、匹、侣：都是同类同伴的意思。\n> 竟：终。\n> 连翩：动作轻捷的样子。\n> 鞠壤：鞠和壤。古代两种游戏用具。击壤是一种古老的游戏，用两个一头大一头小的木块，把一块放在几十步外，持另一块投击，击中者为胜。\n> 巧捷万端：灵巧变化层出不穷。\n> 光景：日光。\n> 攀：挽留。\n> 云散：如云之散，言众少年宴罢散归。以上四句是说，转眼白日西沉，时光无法拦阻，今晚只好各自回家了，但是大家约好了明天一早还来这样游玩。\n\n1. 诗歌的一个很常见的现象就是重复前人的主题，这个是非常普遍的现象。但是另外一方面就是说那些杰出的诗人，他们总是在试图找到一种独特的表达方法，一种跟别人完全不同的这种表达方法，那么那么因此我们在诗歌的世界里，我们看到就是各种各样的，就是说星光灿然，每一个星都有他自己的这个光彩。\n2. 在杜甫出现以前，这个中国诗歌的世界当中的王者就是曹植，在杜甫出现以后，所谓杜甫出现以后，其实也就是杜甫的价值和地位被人们充分的认识以后，还那还不是唐代的事情。这个在杜甫的这个价值充分被人们认识到以后，那么杜甫成为诗歌的世界的王者，这当然是一个比较笼统的或者带有一种比拟性的这个说法。但是我们从个这个里面可以体会到，是说这个曹植在诗歌史上的重要性。\n3. 这种重要性体现在什么地方？我在这边这只简化的说一点，就是说到了曹植的时候，这个诗歌的这种修辞性显著的提高了。就诗歌只有就明显的趋向于一种精致和华美。\n4. 魏晋以后的诗歌，它有一个总体的趋向，就是提高这个诗的修辞性，追求诗歌的精致与华美，而且这个过程一直可以说延续到唐诗，如果说我们它的开端是曹植的话，那么它的地位自然而然就凸显出来了。\n5. 这是描写贵公子的那种日常的这种游乐生活。读下去的时候，你会感觉一个就是它是对这种享乐生活的一种赞美，甚至是夸张。我们在以前的文学史上我们常常会看到，就是说把它理解为是一种讽刺性的诗歌，因为在中国固有的这种传统，特别是在儒家的这个文化传统里面。那么他是把节俭视为一种德性，把享乐视为一种对德性的破坏，因此赞美享乐生活很容易被理解为就是说是不应该的、不恰当的。如果写这个赞美享乐生活的诗人是一个大家比较喜爱的、比较尊敬的诗人，那么我们自然而然这个逻辑会往什么方向这样推导呢？就是说它其实不是赞美，那其实是讽刺。这里面有一个在一种社会文化规则的力量下所形成的一种逻辑推导。\n6. 可是我一再强调的一点就是一首诗，不管批评者怎么去这个解说，它也不管诗人，就是作者了，比如说包括小说，不管作者怎么去解说，它都没有用，你从这个文学作品里面直接感受的那种情感的状态才是最真实的。文学的这个问题，就是说不管你怎么去掩饰它，怎么去解说他这个文学，他有他内在的有一种这个情感的信息，这种情感的信息他会打动你，让你体会到这个作者的这种趣味所在。\n7. 《海上花列传》，因为是写的是那一个妓院里面的生活，然后作者在这本书的这个前言里面，就很严肃、很正经的说，我是在这个风流场里面见过很多的人啊。我看到这个很多这个年轻人不懂事的人被继女所欺骗，受到很大的损伤，我要告诫他们怎么。然后就是好像他就把自己打扮成一个道德教师似的：我是在这个里面经历过的人，我告诉你们不要上当。他这其实就是按照社会的文化规则，这个社会的道德价值来给自己找到一个冠冕堂皇的理由和一个正面立场。但是这个小说的价值完全不在这个地方，不在他自己所解说的这个道德教化。\n8. 这个小说之所以有成就，恰恰就是因为它不是一个道德教化。《海上花列传》写的这个在妓院当中所发生的这种情感故事，它是一种肤浅的梦。我们说在其他条件下的这种男女这种欢乐情感的欢乐。它是一场梦，但是它是一种深沉的梦，这个梦可以做得很久。而在妓院里面所发展的这个男欢女乐，它并不只是拿钱去买一种这个性行为的完成，它是有感情的，但是这个感情它是肤浅的，它是一个就是在梦的进行当中就知道它是梦，但是它仍然是梦，它仍然是有它的悲欢。这种就是说对人性，人的情感的一种把握。他是很微妙的。所以张爱玲喜欢他，他的价值绝不在于这个作者自己所宣称的，我是一个老道的人，我告诉你们不要上妓女的当，那个完全不是这么回事。\n9. 那么我们读这首诗的时候，我们就看到这里面的一种对于享受的赞美和所体现出那种心情的快乐，\n10. 斗鸡就是那种贵族子弟的一种娱乐生活，你感觉到他们他在整个的一天生活描写下来的就是无所事事，就到处寻欢做乐。\n11. 斗鸡东郊道，走马长楸间。\n    驰骋未及半，双兔过我前。\n    揽弓捷鸣镝，长驱上南山。\n    左挽因右发，一纵两禽连。\n    馀巧未及展，仰手接飞鸢。你注意到这个时的特点吗？它节奏变化非常的快，一个动作还没有结束，下一个就接上来了。这样一种夸张的这种快节奏转换的，这样的一个动作感非常强烈的这样的一种描写。你会觉得它带有一种卡通气息，而这种所谓卡通气息在表达的真正的东西是什么？就是生命力的，青春生命的活泼，青春生命的活泼在这种享乐的生活当中以一种非常快的节奏的这个展现开来。它是一个青春的生命的那一种勃发的姿态。\n12. 有非常强烈的动作感，它不是说这个大家一起安安静静的在喝酒，而是这个鸣俦啸匹侣，列坐竟长筵。长长的一个宴席，然后叫那些他们的那些这个年轻的朋友一起来。鸣，啸，都是那种很自在、很响亮的声音，就是夸张。简单的说他就是描写一种张扬的姿态。我先跟你们这个年轻的时候，我们非常能够体会这个喝酒就喝酒吧。但是不是说这个很文雅的安静的时候，而大是大声的喊，张某，李某，我们去喝酒去了，不上课了。啊呜，去，就这个样子。那为什么呢？这个生命力太旺盛。没有一种这个强烈的这个姿态，这个一种迅速的这种节奏，它不能够表现在这个生命的力量和欢快。\n13. 连翩击鞠壤，巧捷唯万端。这个过程里面体现出来的生命的姿态是巧，捷。灵巧和敏捷是青春生命的特征，老头子是死重的，稳当持重的。巧捷是青春生命的特征。\n14. 各种各样的情形，各种各样的姿态，各种各样的，一天玩到晚，从早上起来就玩那个上山打猎、打兔子、打鸟，然后奔马，回到家里喝酒，喝完酒以后这个然后再踢球，踢完球以后怎么办呢？太阳下山了，白日西南驰，光景不可攀。时间是过得很快的，一天很快就过去，但是光景，就时光流逝，你不能够追究它，生命是短暂的，在短暂的生命里面要尽情的相处。所以云散还城邑，一群年轻人都分散了。分散来以后怎么着呢？清晨复来还：明天早上大家再聚在一起。\n15. 你说它是一个讽刺的话，当然你这个立场也能成立，就是觉得这种一味的享乐的生活难道是生命的美好的姿态吗？但是你如果换一个角度的去看，它其实真正要表达的不是对享乐生活本身的这个赞美，而是对这个青春的生命力量的赞美，它构成了这个中国古典诗歌的一个流脉的，就是所谓贵游少年的那种生活，我们在唐诗里面可以找到很多。它表面上写的是一种享乐的生活，但实际上它着眼点不在这个地方。而在于歌颂一种热烈的美好的青春生命。\n\n### 《咏怀八十二首·其十七》\n\n> 独坐空堂上，谁可与欢者？\n> 出门临永路，不见行车马。\n> 登高望九州，悠悠分旷野。\n> 孤鸟西北飞，离兽东南下。\n> 日暮思亲友，晤言用自写。\n>\n> **译文\n> \n> **独自坐在空荡荡的屋子里，谁是可以与我欢颜笑谈的人？\n> 出门就对着那条通往远方的长路，但却不见亲友的车马从此经过。\n> 登高极目远望，只见悠悠的江河把大地分割成一块块的旷野。\n> 一只倦鸟独自向西北飞去，而我却像失群的孤兽孤独地来到了东南方。\n> 在这暮色苍茫的时候我格外思念远方的亲友，只能用自言自语来排解忧愁。\n>\n> **注释\n> \n> **临：对着。\n> 永路：长路。\n> 九州：我国古代分为九州：冀州、兖州、青州、徐州、扬州、豫州、荆州、梁州、雍州（见《尚书·禹贡》）。此处指极目远望。\n> 离兽：失群的孤兽。\n> 晤言：对坐而谈。晤（wu,四声），对。\n> 用自写：以自我排解忧愁。用，以。写，消除。\n\n1. 正史时代的诗人，我们就只选了这个阮籍，讲到这个阮籍的时候，我们会遇到一个的诗歌史上比较大的问题，就是诗歌当中哲理的渗透。那么这里面我们可以从两面来说，一方面来说就是说诗歌不会仅仅因为它这个包含了哲理就会变得更好。因为如果说一首诗，把它变成一个哲学讲义，然后谈论这个哲学道理的话，诗歌就面对一个很明显的问题，就说如果说只是为了产生一个哲理的话，那么散文它要比诗歌有效的多。\n2. 所以我就要说两句话，一句话是诗歌不会仅仅因为它包含了哲理就会成为非常好的诗。但是另外一句话是诗歌有可能因为它包含了哲理而变得更加的厚重，这会给诗歌带来非常大的改变。它对于诗歌的美，特别的一种美感，它是有效的，是有意义的。\n3. 我就说正史时代的诗歌，阮籍包括嵇康那些诗人，诗歌里面都有比较显著的哲理性的成分。\n4. 那么这个时代的诗歌为什么出现就是说那种哲理性的内涵呢？这个跟这个时代的这个文化变化有关系。我们知道在这个魏晋之交的时代，是一个玄学流行的时代，玄学的流行是中国思想史上一个很大的变化。简单的说玄学是从日常生活经验当中去讨论抽象原理的学问，就是说它不停留在这个日常的这个生活经验之中，而是讨论着这个事物的内在的规律，有一种普遍性的原理。\n5. 玄本来的意思就是虚的意思，我们所谓玄虚。而玄虚不是算是空无，而是说他喜欢讨论一些抽象的问题。\n6. 那么在诗歌里面就是说当诗歌渗透玄理的时候，如果它只是抽象的在那里讨论玄理的话，它很容易变成一种很干枯燥的东西。在诗歌当中如果能够恰当的把这种日常生活经验和日常情感和这种抽象的普遍的道理结合在一起的话，那么它会获得一种非常特殊的一种表现。\n7. 独坐空堂上，谁可与欢者？当你一开始读这两句的时候，你会感觉到一个它没有什么特殊的：正好今天家里没人，或者说正好今天寝室里没人，到了礼拜五晚上全走光了。他是一个日常生活经验，但是你再往下看的时候你会发现它不太像日常经验。出门临永路，不见行车马。出门以后来到大马路上，你说说寝室里没有人，张小三去谈恋爱了，我孤零零的。然后我就来到邯郸路上，邯郸路上根本连车也没有，人也没有，这有点怪了，邯郸路怎么会车也没有，人也没有呢？你会发现这个是有问题的，但是你还可能觉得说这还是一个日常经验，就正好此时此刻他遇到的这个情景是没有人，但再往下你就发现不对了，登高望九州，悠悠分旷野。登到一个高处去看这个世界，这个世界一片荒茫。\n8. 诗的特质是从日常经验中产生的，因为诗歌中的经验是情感经验，情感经验不能产生于抽象的原理，只能产生于日常的生活。\n9. 没有一个地方登上去能看九州的，这是一个哲学的高点，在这个哲学的高点里面看到的世界是一个荒凉的世界，那么它就不是日常经验了，你可以感觉到它这一个从日常经验往抽象的方向上推导的一个过程，那么它这样它能够保持一个诗的特质。诗的一个什么特征呢？就是首先它是从日常经验当中产生的，因为诗歌当中的经验是情感经验，而是情感经验，它不能产生于抽象的原理，情感的经验它要产生于这个日常生活。但它又是一个玄学背景下的诗歌，这种玄学背景下的诗歌它会把日常经验推导到一个哲理上去。这时你就明白了这种孤独，它不只是生活中的孤独，它还是一种哲理性的孤独。\n10. 所谓哲理性的孤独就是人归根结底是孤烈的，是孤单的，孤独是我们体认自我的一种方式。当我们越是体感受到自己的孤独的时候，我们也就越是感受到我们自身的一个独立性的存在，当我们的独立性不能被世界上任何东西所融化的时候，我们是最孤独的：我们怎么能够不孤独。\n11. 人的群体性越强的时候，那么人的个体性会越弱，比如说这个几千上万人在一起，这个在举行一个仪式的时候，一个非常大的热烈的仪式之后，很多人在一起在唱歌的时候，个体会融入到这个群体之中，个体会消失掉，个体会把这个群体的存在方式看成是自己的生命方式。所以有研究者很简明的告诉我们，就是说这种场合其实是一种巫术的表现，它并不只是一种原始文化，它是跟人的生命根本相连的一种文化。\n12. 就是说在那种欢闹的这种场合里面，你会感觉到这周边全是无意义的声音，你会忽然感觉到你听到的只是一些声音，看到的只是一些影子。它们没有任何意义。这种情况在人的生命里面它会交替的出现，有时候我们会融入到一个群体当中去，有时候我们会从这个群体当中浮现出来。这跟一个人的这个生活方式和对世界的理解有关系，也跟一个时代的文化有关。\n13. 越是崇尚自我，或者说越是把自己看得重要的人，把个体的存在看得重要的人，孤独感会越强烈。因此我们会看到伟大的人物都很孤独，伟大的人物很多，或者自己认为自己伟大的人也都很孤独。比如说这个鲁迅很孤独，你读鲁迅的这个小说，散文，你会觉得是真的非常孤独。\n14. 那么说到这个魏晋时代的特点的话，在李泽厚的美的历程中，他强调的就是说，魏晋时代是一个个人存在的发现的时代，一种个性发现的时代。\n15. 人类生活在语言构拟的意义世界里面。它包括两方面：历史的意义:从群体的发展来说，我们的社会存在的合理性，以及美好的未来; 个人的意义:我们在历史的意义中存在的价值。这是一个语言所隔离的意义世界，但是语言所隔离的意义世界它是受条件限制的：人没有能力预言未来，\n16. 就是当机器人问我是谁的时候，因为人之所以是人，就是人会问这个问题，我是谁？当机器人要问我是谁的时候，大概我们就差不多要完蛋了。\n17. 我的刚刚说说人没有能力语言未来，人只是在当下的条件下勾拟世界的意义，世界的秩序，使这个世界在一个有序的状态当中存在和运化，但是这个意义世界很容易会被破坏掉。我们看魏晋时代，这个两汉经学所勾拟的这个意义时间在魏晋时代它被破坏掉了。很多那种神圣的东西，崇高的东西，它现在变成了一种可笑的东西。（司马懿指洛水发誓，顾批）这个时候人们一方面就感觉到就是说一种虚无感，就是说这个原来意义世界其实它是不存在的，它只是一种假设，它没有根本的根据，让人感觉到这种虚无感，而在这种虚无感的这个笼罩当中，人更强烈的会感受到在生命仅仅是一个个体性的存在，或者说个体性的存在才是生命的真实存在。\n18. 个体性的凸显，它给人的精神上带来很大的负担。因为要一个人完全凭借他自己的精神力量来承担这种生命存在的全部的意义和由此而产生的各种精神负担和焦虑。它是有困难的。\n19. 阮籍是一个是感受非常敏锐，而思维又非常深刻的人，同时在现实生活当中又是一个缺乏决断和很犹豫的人。阮籍的很多故事都像哲理性的预言，我简单举一个，有助于体会他的诗歌。一个就是很有名的那个说穷途恸哭的故事。这个故事说阮籍经常这个驾着车漫无目标的在外面走，走到这个路不通的时候，就大哭一场回来。这个驾车在世界上慢目标的走，你可以理解为一个哲学的一个描述，就是世界本来就没有什么意义，人生本来就没有什么目标，但是为什么还驾着车呢？因为即使世界没意义，人生没有目标，但是人的存在它就是一种行动性的存在。就像这个舞台表演一样。你说人生如戏，戏的特征就是什么呢？戏的特征就是动作性。也就是说即使没有目标，没有意义，但是人必须有动作，没有动作不行。但是即使是没有意义目，没有目标的人生，他仍然是要碰壁的。因为只要你是处于动作当中，就可能面临一种困境：动作是可以无法完成的。这个就是这个故事所包含的一个哲理性的阐述。\n20. 孤鸟西北飞，离兽东南下。不仅是看不到人，看到的野兽也是孤零零的。失群的鸟和失群的兽，一切都孤零零。\n21. 这种哲理性的孤独和日常性的孤独的最大的不同，很容易明白：日常性的孤独它可以改变这个日常场景，它就会改变掉，它就不再孤独了，而哲理性的孤独它不能改变啊。大庭广众声欢笑之中，你会越来越孤独，你坐在一个酒宴上，一大群人都快乐的不得了，在那里谈天说地，欢声笑语。你会觉得这些东西跟你一点关系都没有，你觉得你坐在这里，你就坐在一片声音之中，有时候人会有这样去感觉，即使你不得跟别人说句话：你好，这个酒不错，你发觉你仍然是发出的是无意义的声音。\n22. 这种感受它是生命没有办法忍受，没有办法负担的，所以它要改变它的方式是什么呢？日暮思亲友，晤言用自写。这个写就是泄。到了黄昏的时候思念亲友，想跟他们在一起。\n23. 你会发现一个矛盾，他如果有了亲友，难道就可以解脱了吗？如果有了亲友就可以解脱，它又回到日常性的孤独中去了，那又不是一个哲理性的东西了，也就是这个孤独到这里它好像又被否定掉了。你可以注意一点，就是这种哲理性的孤独，它其实不能够用日常生活的方式来排除的，所以被排除的不是孤独而只是一种无聊。\n24. 我自己有一天晚上我自己读这个东西，我认为我读懂这个时候我真的是有一种浑身惊颤的感觉。感觉他写得很可怕。就是当我们体会到我们是一个孤独性的存在的时候，我们会体会到这个孤独是我们无法承担的，因此我们需要转换它，转换它的方式就是把我们的存在转化为一种无聊的废话，这种无聊的废话就是当你跟在亲友在一起的时候，你能够解除的，而不是你的那种生命的孤独。转换为就是你可以在朋友跟朋友在一起说一些废话，忘记你的孤独。\n25. 整个过程就是我们的生命在人群当中越来越孤独，我们会发现就是说我们找不到这个存在的真实的意义，也找不到存在的真实的归属。我们体会到的人仅仅是一个孤独的存在，但是最后我们又感觉到连这个孤独是也是我们无法承担的，我们还要转回到人群当中去，我们成为一个说废话的人。就是晤言用自写。\n26. 我们读这首诗的时候，会发现这个诗歌里面的东西它非常重，中国的诗歌就是因为阮籍的出现，或者说以阮籍为代表的真实诗歌的这样的一个出现，变得厚重。它不再是描写日常经验的东西，他把日常经验的东西推导为一些人的生命的一种根本状态，试图追究人和这个世界的关系到底是一种什么关系。\n\n### 《咏怀八十二首·其七十一》\n\n>  木槿荣丘墓，煌煌有光色。\n>  白日颓林中，翩翩零路侧。\n>  蟋蟀吟户牖，蟪蛄鸣荆棘。\n>  蜉蝣玩三朝，采采修羽翼。\n>  衣裳为谁施，俛仰自收拭。\n>  生命几何时，慷慨各努力。\n\n1. 木槿，一种花朵。生命周期很短的。开在坟墓边上。木槿它跟坟墓相对照，一面是死亡，一面是生命的美好。\n2. 樱花凋落得非常快。那么这个樱花的这个美丽和它的凋零，它会使人对联想到一种对生命的感想。\n3. 蟋蟀吟户牖，蟪蛄鸣荆棘。蟋蟀，蝉，他们都唱得非常好听。越是生命到了快要结束的时候，他们越是唱的动人。\n4. 蜉蝣玩三朝，采采修羽翼。蜉蝣只有三天的生命，其实很多蜉蝣三天都没有，很多蜉蝣化为成虫以后只有一天，但是尽管他的生命这样短，他还采采修羽翼，这个修变成一个主动的行为，好像这个他的美丽的翅膀是他修饰的结果。\n5. 我们这么说就是春天来了，学校就会变得漂亮。学校变得漂亮的一个很重要的原因不是因为草绿了、花开了，而是女生打扮得很漂亮。女生穿着很漂亮的衣服在校园里走来走去，我在这里面可以感受到一种生命的美好。\n6. 衣裳为谁施，生命那么短，你的美丽也很短，这种美丽是为谁而存在？也就是说是这个美丽的生命有它的归属吗？人在世界上他会感觉到一种荒凉、无所皈依的感觉。人是一个孤独的存在，而这种孤独感跟无归属也有关系，就是说你无所皈依。\n7. 俛仰自收拭。俯仰之间，短暂的一抬头、一低头。在一抬头、一低头之间，你还在努力的打扮自己。\n8. 生命几何时，慷慨各努力。生命它是不是有一种确定的意义，可以使人安然的这样的一种归属？生命没有意义和归属，就是一个无目的的孤独的存在。那么这个是阮籍对生命的一种理解和认识。\n9. 我只是说从诗歌史上来说，这样的一种诗歌的出现，它让人感受到一种很深重的东西，我们接下去要讲陶渊明，我们需要回到一个诗歌系列里去理解这种生命的焦虑，无所归宿，难以确认它的意义。这种焦虑其实在汉末的诗歌里面就已经很明显了。\n10. 但是我们大概的说，古诗 19 首在东汉中后期以后流行起来，这样的说法虽然有点含糊，但是它是可靠的。古诗十九首里面我们就已经看到那种生命的这种短暂的焦虑，而克服这种声明的短暂的焦虑的方法是什么呢？在古诗 19 首这里我们可以看到多种方法，比如说这个亲情和友情。就是这种人际之间的温暖，把这种人际之间的温暖看成是一种克服生命焦虑的一种途径，然后是及时享乐，然后是这个追求荣名，追求社会荣耀。\n11. 我们会看到在建安诗歌里面就是比较强烈的表现出来的是：追求一种不朽事业，就是生命虽然是短暂的，但是当你完成一个不朽的事业之后，那么你的生命就转化为另外一个形态，你的生命就以你的不朽的事业体现出来。当然我们可以感觉到这个建安诗歌的这一种对生命的理解是更激进一点，所以建安诗歌里面所表现出来的那种情绪也比较热烈一点。尽管它有一个灰暗的背影：对酒当歌，人生几何！譬如朝露，去日苦多。但是写到最后山不厌高，海不厌深。周公吐哺，天下归心的时候，它是会有转换为一种很热烈的一种生命感情，就是当我们能够把生命寄托在一个伟大的事业当中的时候，我们生命可以获得不朽。\n12. 但是这些东西到了阮籍这里，它全部被排除。阮籍试图告诉你，这些东西都是没有意义的，有钱是不可靠的。朋友可能会成为陷害你的人。因为魏晋之交，我们知道这是一个非常动荡的时代，是一个改朝换代的时代。在这个时代里面，每个人如何保全自己，如何获取利益啊？个人都有个人的打算，每个人都有欲望，所有的欲望互相冲突。在社会变化剧烈的时代，人的欲望的冲突就显得更加的残忍。所以亲情、友情它是不可靠的，建功利益也是不可靠的。\n13. 建功利益的不可靠：首先它是一个并非有你可以选择的东西，不是说你想建功立业就能建功立业，也不是说你有能力建功立业你就能建功立业。阮籍登那个广武涧，就项羽跟刘邦当时作战的战场，然后发了一个感慨，叫时无英雄，使竖子成名。他自己心里面可能是这样的一个认为，就是说如果没有合适的这个机会和条件，你有再大的本领也没有用。如果有合适的机会，有合适的条件，那么无能的人也可以成名。\n14. 生命焦虑是一个不可克服的事实，但是前人提出来就是这种生命焦虑，它可以有各种各样克服的方法，而这种克服的方法在阮籍的咏怀诗里一一被排除了。排除之后，生命在阮籍看来就呈现出它的本质：就是孤独和无意义。\n15. 因此生命只是在焦虑当中走向死亡的一个过程。阮籍的诗意，有时候这个跟西方现代哲学是可以直接联系在一起的。比如说跟叔本华的一段这个话放在一起，你会感觉这两个人写的是一样的东西，\n16. 就是说这个凝视着生命的这种焦虑、灰暗和无望的时候，也不能够把它理解为一个纯粹的消极现象，因为在这里面我们看到的是一种对生命一种敏感。魏晋文学的一个非常大的特点，就是它是非常敏感的。而鲁迅也是非常敏感的，敏感是一种生命力量的表现。生命没有力量的人，他不能够去体会这样一种生命真实，所以我们不能够简单的把它是看成是消极的。\n17. 我们读曹操，会觉得他诗歌的这种发奋的。这种健康向上的力量是容易感受到的。我们读阮籍的时候，我们觉得它太晦暗，但是这个晦暗仍然体现出一种人的精神力量，没有精神力量的人他是麻木的。\n18. 巴金晚年的时候为什么要写《随想录》？因为巴金的生命曾经沉落到一种污秽和麻木之中，他失去了他曾经有的那种对生命的敏感和精神力量，因为周围的力量实在太强大，他根本无法抵抗，他就沉落到一种麻木之中。\n    当他有一天忽然醒过来的时候，他对那一段生命感到痛苦。不是说对他的这个所遭受的这种打击的惨重而感到痛苦，真正痛苦的是生命如何在这种压力之下变得那么的卑贱和麻木。所以他要把这个卑贱和麻木从自己的生命当中剔除出去，那就是从骨缝里把自己的肮脏给洗刷掉，那是非常痛苦的过程。小孩子不懂这个东西，韩寒会说随想录文字写得很差，这是太轻薄的一个表达啊。\n19. 阮籍诗歌大概几个要点：1在玄学发展的背景和社会面临激烈变动的背景之中，中国诗歌开始渗入一种哲理的色彩。2作为诗歌而言，这种哲理的色彩不能离开日常经验和日常情感。这种抽象的哲理不是哲学讲义，而是生命感受。3阮籍诗歌的晦暗并不只是表面的消极，它有着更深层的含义。\n\n","tags":["骆玉明古典诗词鉴赏"],"categories":["classical_poems"]},{"title":"两汉-古诗十九首","url":"/2024/07/23/两汉-古诗十九首/","content":"\n## 两汉·古诗十九首\n\n### —总序\n\n1. 从诗歌史上来看，五言诗的成熟是一重大的事件，因五言诗是中国古典诗歌的核心形态。\n2. 先秦诗歌有两个源头，一个就是诗经。它的主体是四言诗，那么另外一个就是骚体。那么这个构成了中国诗歌的两个大的源头，但是这两个东西它都不是中国古典诗歌的核心形态。四言诗发展到汉代以后，它慢慢就衰落了。\n3. 汉代以后那个也有写四言诗写的好的这个作者，但是不多，我们可以说出来的，曹操、嵇康那个陶渊明，差不多就这些，而大多数诗人都不太写了，或者写了也不是什么很出色的。那么骚体它演化到后来，它往辞赋那个方向去发展。也就是说它抒情性降低，往那种这个文的这个方向去发展。\n4. 古诗十九首所处的一种特殊的地位，它是这个中国的这个古典诗歌的核心的诗体发展到成熟阶段的一个标志性的作品。\n5. 古诗：  泛义:古代的诗;        狭义:南朝时代的人称汉魏时代流传下来的无名氏的作品。\n6. 也就是说它不是民间的一般的作者能够写得出来的，它经过这个相当程度的这个修饰的一个结果。所以用一个含糊的概念来说的话，我们把它理解成就是说这种歌谣性的作品和文人的这个创作的这样的一种结合。\n7. 那么诗歌为什么会从四言诗转化到五言诗呢？\n8. 一个就是这个节奏的问题，四言诗的节奏相对来说它是比较简单的。因为汉语的音，这个停顿就是它自然而然的就形成这个两个字一个停顿，我们可以把它理解为一个音乐的这个节拍。唉，两个这一个排：窈窕淑女，君子好求，它自然而然就形成这样的，然后你就会发现就是这样的一个节拍，它相对来说它很单调。然后你读五言诗，你会发现它的节拍会比较丰富，就是说这个，这个因为它有一个单音节，它是由两个双音节和一个单音节组成的，而这个单音节的位置是可以变化的。因此它这个音节就会变得比较丰富。而因为追求双音阶的结原因，它在表达一定的这个情感内容的时候，它会造成一个什么呢？就造成一个用这个语助词去凑这个音节，也就是产生许多没有意义的语助词。你会发现这个语言它不够精简，而诗歌发展到这个一定的过程的时候，它要求这个诗歌的语言是趋向于精炼的。\n9. 再有一个就是跟音乐也有关系，就是说这个在这个先秦时代，在先秦时代那个主流主体的这个音乐它是打击乐，这个金石打击乐，那么金石打击乐相对而言它的这就应该是这个比较单纯一点，这个所以他跟诗经的配合的比较好，到了汉代以后这个流行的音乐它不再是那种金石打击乐了，它是以丝竹乐为主的，这个就是管乐和弦乐。那么这个音乐的这个因素他也在影响做这个诗歌的这种节拍的变化。\n10. 诗歌是一个民族语言最美的表达形式。创作诗歌就是寻求语言最完美，最精致的表达方式。\n11. 诗人要对对生活有更深的理解，拥有更敏感的天性。同时要善于把握语言的力量，使语言能够最充分地体现所要表达的情感内容。\n12. 新诗总是，一般就是说对读者大众的这个影响力总不如古诗，我们读到后来我们还是会喜欢这个古诗。这个道理也很简单，就是古诗它是在非常长的历史年代当中形成的，实际上就是中国的诗人一直不断的在寻求，就是说汉语语言的最好的表达方式是什么？大概这样的一种寻求的努力，到了唐代基本上就完成了，那么所以唐以后这个诗歌的发展实际上是往词和曲那个方向而发展的更丰富一点。\n13. 《古诗十九首》之所以经典，1有明显的歌谣性的特点:清新自然、朴素直白; 2 修辞程度很高，语言表达精致。\n14. 比如说我们读词的时候，我们最喜欢读的其实就是李后主这种词和往后的话就纳兰性德。可是你会发现其实词作者当中就是有这种风格的词人，数量不多，清词实际上水平很高的，但是像纳兰性德这样写词的人很少，为什么呢？就说他就说要清新、朴素、自然而精致。\n15. 这个就是阿Q 对自己的这个胜利。因为他一生活得的胜利不多，所以经常要提起这个。\n\n### 《青青河畔草》\n\n> \n>\n> 青青河畔草，郁郁园中柳。\n> 盈盈楼上女，皎皎当窗牖。\n> 娥娥红粉妆，纤纤出素手。\n> 昔为倡家女，今为荡子妇。\n> 荡子行不归，空床难独守。\n>\n> **译文\n> \n> **河边草地青青，园中柳树郁郁葱葱。\n> 站在绣楼上的那位女子体态盈盈，她靠着窗户容光照人好像皎皎的明月。\n> 上着艳丽妆容，姿容美好，纤纤手指扶着窗儿眺望着远方。\n> 她曾经是常年卖唱的歌女，现在已经成了游子的妻子。\n> 不想游子远行在外总是不回来，丢下她一个独守空房实在难以忍受寂寞。\n>\n> **注释\n> \n> **郁郁：茂盛的样子。\n> 盈盈：形容举止、仪态美好。\n> 皎皎：皎洁，洁白。\n> 牖（yǒu）：古建筑中室与堂之间的窗子。古院落由外而内的次序是门、庭、堂、室。进了门是庭，庭后是堂，堂后是室。室门叫“户”，室和堂之间有窗子叫“牖”，室的北面还有一个窗子叫“向”。上古的“窗”专指在屋顶上的天窗，开在墙壁上的窗叫“牖”，后泛指窗。\n> 娥娥：形容女子姿容美好。\n> 倡家：古代指从事音乐歌舞的乐人。\n> 荡子：即“游子”，辞家远出、羁旅忘返的男子。\n\n1. 你会发现这种叠词的这个修辞是歌谣的一个特点，可是你看他的这个选择，他的这个描写，我跟你说比那个李清照的那个寻寻觅觅要好很多。我女儿在读那个李清照的诗词的时候，寻寻觅觅，冷冷清清，凄凄惨惨戚戚。我跟他说这个写的不好。嗯，她不明白为什么写的不好。我就说这个做作矫情，用那么多这个叠词来表现自己的一种冷清孤独，很矫情。那真的不如这个青青河畔草你读上去很清爽的感觉。青青河畔草，郁郁园中柳。盈盈楼上女，皎皎当窗牖。\n2. 歌谣的这个特点它是这样，它是不跟作者联系在一起的。因此写这个诗的人他不会考虑到就是说我在这个诗当中呈现出来的这个形象，跟我的生活当中的这个自我的一个关系问题。\n3. 可是你还能认为它是民歌吗？这个民间的这个歌谣它能够写得这么细致吗？能够把那个一层一层的叠词用的这么好吗？\n4. 这个在这一个古诗里面写到这种倡家女的时候，它就包含着一层意味的：他们拥有的是短暂的青春，他们追求的是热烈的享受。\n5. 你读这样的诗的时候，无论作者是男的还是女的，就是说一个男的借由女子的口吻来写，或者是女的写自己的，你都会觉得他过分了，他就赤裸裸的说，就说你不回家，我要找人，哈哈哈，我不能够等待一个不回家的人。为什么呢？我的青春是有限的，我的生命是有限的。因为我是倡家女，我跟那些所谓大家闺秀不一样，我的生活就是那种欢快的生活，我只习惯于那种快乐的生活啊。我的生活里面是没有你们所习惯的那种崇高和道德性内容的。\n6. 负德这样的东西对她来说不是她习惯的内容，不是她的生命价值的体现，快乐和享受是她的生命价值的体现，她需要这个丈夫和她在一起，欢乐的度过她的生命的每一刻。所以就是说后人读这样的时候，惊讶于就是说他的清新、自然、朴素。同时惊讶于他的那种直白和大胆，他会给你一种震撼感，这样的话你不敢说。\n7. 从这个青青河畔草转出去，就转到这个《古诗十九首》的一个中心主题就是：生命的焦虑和及时享乐。\n8. 我刚刚说《古诗十九首》的一个特点，就是说它有相近的主题，就是生命的焦虑和及时享乐的这种期望。这里面就牵扯到我在中国文学史课上反复指出的这个问题，就是中国文学内在的存在着一个虚无主义。这个是我说这话还是比较慎重的。就是说我们会在中国文学里反复看到这种虚无主义的这个情绪的，这种再三的反复的出现。就是说当然人的生命必须是有意义的、有德性。那么中国文化传统里面它也包含着这一种，就是说很高的这个对于这个生命的意义和德性的这个这种追求。\n9. 中国文化传统包含了对生命的意义和德性的追求。而西方文化中对生命价值和意义的追求体现在宗教意识里，而中国文化它不是通过这个方式来确认的。中国文化的这种确认，它就是一种对于德性的追求。\n10. 你读论语的话你会发现一个很特别的值得注意的现象，就是说孔子一方面就是说仁，他有各种各样的表现和解释，仁者爱人，仁者说话比较慢所谓克己复礼。但是你如果仔细的把它归纳在一起的话，你会发现就是说其实仁是他有一个确定的特征的，就仁是人的德性的最高完成，所以孔子不轻许仁。就是当你开始追求仁的时候，你已经在这条路上了，这仁离你不远，但是仁呢，你永远不能说你已经完成了。\n11. 孔子这个地方对仁的解释里面，他已经提出来了一个对中国文化来说一个非常重要的一个核心的概念：对道德和品行的追求。当这个这种把生命的这种人格的这个完善和对德性的这种追求作为生命的价值和意义的体现的时候，它会遇到一个什么问题呢？就是这种价值的确认，这种意义的确认它有时候会受到打击。特别是如果这种对德性的追求，它跟这个国家意识形态和社会意识形态就是说扭为一体的时候。也就是说这个这种对于生命意义的追求，它和一种为政治服务的一种现实利益目标联系在一起的时候。那么这种追求它会被政治的肮脏所污染，因此它会出现一种失落感。这也就是为什么许多诗人在诗歌中表现出享乐和虚无主义。\n12. 历史的归向和我们存在的价值是什么？这两个问题其实是同一个问题，这东西它并不能预先被确定，它是一个实践过程。\n13. 相对来说，对价值和意义的确认在宗教性的文化里稳定性会比较强。因为它跟现世的这种利益关系，它相对而言它可以产生一种超越，它不是说它不会被政治污染，很简单，你说那个，你看那个这个十日谈你就知道，这个圣徒的这肮脏啊。它其实也就是说这种宗教它被现实的利益所污染的这样一种情况。但是总的而来说，相比较而言，就是说宗教文化的这种对于价值和意义的确定，它会比较稳定一点，而完全通过这种德性来追求中国通过人格的完善和人这个德性的这个目标来追求这个生命的价值和意义，它会在现实的世界当中，它会经常被动摇。而一旦会被动摇的时候，生命的另外一面就会出来。\n14. 生命无非是两个：意义和快乐，当意义淡薄的时候，快乐的呼声就会出来。\n\n### 《回车驾言迈》\n\n> \n>\n> 回车驾言迈，悠悠涉长道。\n> 四顾何茫茫，东风摇百草。\n> 所遇无故物，焉得不速老。\n> 盛衰各有时，立身苦不早。\n> 人生非金石，岂能长寿考？\n> 奄忽随物化，荣名以为宝。\n>\n> \n>\n> **译文\n> \n> **转回车子驾驶向远方，路途遥远，长途跋涉，难以到达。\n> 一路上四野茫茫无边无际，阵阵春风吹绿百草。\n> 眼前看到的都不是过去的事物，人怎么能够不迅速衰老？\n> 人生的盛衰各有不同的时间，只恨建立功名的机会来得太迟。\n> 人的生命不如金石般坚固，哪里能够长生不老？\n> 倏忽之间生命就衰老死亡了，只有好的美名才是真正的宝藏。\n>\n> **注释\n> \n> **回：转也。驾：象声词。言：语助词。迈：远行也。一说喻声音悠长。\n> 悠悠：远而未至之貌。涉长道：犹言“历长道”。涉，本义是徒步过水；引申之，凡渡水都叫“涉”；再引申之，则不限于涉水。\n> 茫茫：广大而无边际的样子。这里用以形容“东风摇百草”的客观景象。\n> 东风：指春风。百草：新生的草。\n> 无故物：承“东风摇百草”而言。故，旧也。\n> “焉得”句：是由眼前事物而产生的一种联想，草很容易由荣而枯，人又何尝不很快地由少而老呢？\n> 各有时：犹言“各有其时”，是兼指百草和人生而说的。“时”的短长虽各有不同，但在这一定时间内，有盛必有衰，而且是由盛而衰的。\n> 立身：犹言树立一生的事业基础。早：指盛时。\n> “人生”句：言生命的脆弱。金，言其坚。石，言其固。\n> 寿考：犹言老寿。考，老也。即使老寿，也有尽期，不能长久下去。\n> 奄忽：急遽也。随物化：犹言“随物而化”，指死亡。\n> 荣名：美名。一说指荣禄和声名\n\n1. 这个“言”是个语助词。古诗十九组里面已经比较少见了。不是说用语助词，它就会减少诗歌的美。而是说在语助词用的很多的时候，这个诗歌的这个密度就会降低。\n2. 回车驾言迈，悠悠涉长道。它并不是记述一次出行，它其实是一个象征性，就是我们在世间不停的奔波，我们到底是到哪里去？他虽然诗歌里面他没有往下说，但是它已经包含着这个东西，我们在这个世上不停的奔波，我们的本我是什么？这个四顾何茫茫，东风摇百草。这是一个春天，原野里一片葱润。\n3. 这个摇它是一个什么？就是风对草的摇动引起的这个内心的摇动，就是说对我们的触动。当然你如果看这个说风吹草动的时候，你心不触动，说它是一个纯粹的自然形象。当然也可以。\n4. 在大自然中，在这个世界当中万物都在不停的变化，那么你也是在这个变化的过程，你怎么能够不很快就老了？\n5. 我们注意到这个跟那个青青河畔草的不同了吗？青青河畔草的这种描写我们当然可以说他语言写得很精致，但是他那个调子，他还是那种歌谣的比较轻快的调子。而在这个地方你会发现它的语言要精美的多了。\n6. 我们只是自然中的一部分，和万物一样，都有盛衰。我们能够做到的就是有所成功。这几乎就是张爱玲说的那句话，成名要趁早。因为到了很晚你在成名的时候，你的生命就已经没有滋味了。\n7. 跟朱先生读书的时候，朱先生把这个寿考，哈哈改成这个。他说学生非金石，岂能长受考，一天到晚考试学生都考死掉了。\n8. 即时享乐这个东西，可能我说的这个就包含东西太多，有我们一般的理解的想说这个比如说喝美酒穿漂亮的衣服这个，但是它也包含就是说这个所谓建立功名。\n9. 现在大家回到我一开始讲那个萚兮，大家明白了吧。萚兮其实是包含着中国文学最重要的两个主体，一个是时间所引起的焦虑，第二个是生命中的问题。\n10. 《古诗十九首》的要点:五言诗的成熟:从四言诗到五言诗的转化是中国诗歌发展变化重要的环节。\n    《古诗十九首》的特质:既有歌谣的清新明快，又有文人诗歌的精致和情感表达层面的深化。\n","tags":["骆玉明古典诗词鉴赏"],"categories":["classical_poems"]},{"title":"两汉-乐府篇","url":"/2024/07/23/两汉-乐府/","content":"\n## 两汉·乐府\n\n汉乐府词的两大要点:1 关注底层人民生活的艰辛;2 汉乐府词叙事性比较强。\n\n从汉乐府民歌开始，中国诗歌的叙事性开始加强，叙事的技巧得到了很大的提高\n\n### 《战城南》\n\n> 战城南，死郭北，野死不葬乌可食。\n> 为我谓乌：且为客豪！\n> 野死谅不葬，腐肉安能去子逃？\n> 水深激激，蒲苇冥冥；\n> 枭骑战斗死，驽马徘徊鸣。\n> 梁筑室，何以南？何以北？\n> 禾黍不获君何食？愿为忠臣安可得？(不 一作：而)\n> 思子良臣，良臣诚可思：\n> 朝行出攻，暮不夜归！\n>\n> **译文**\n>\n> 城南城北都有战事，有许多人战死在野外，尸体不埋葬乌鸦来啄食。\n> 请为我对乌鸦说：“在吃我们外乡的战士之前请为我们悲鸣几声！\n> 战死在野外没人会为我们埋葬，这些尸体哪能从你们口中逃掉呢？”\n> 清澈透明的河水在不停地流淌着，茂密的蒲苇草显得更加葱郁。\n> 善战的骏马都在战斗中牺牲，只有劣马还在战场上徘徊哀鸣。\n> 在桥梁上筑直了营垒工事，那南北两岸的人民将如何交往？\n> 连禾黍都不能收获你吃什么？就是想成为忠臣保卫国家都无法实现啊！\n> 怀念那些忠诚卫国的好将士，那些忠良将士实在令人怀念：\n> 天刚亮他们就忙着出去打仗，可是到晚上却未能一同回来。\n>\n> **注释\n> \n> **郭：外城。野死：战死荒野。\n> 野死：死于野外。乌：乌鸦。\n> 客：指战死者，死者多为外乡人故称之为“客”。豪：同“嚎”，大声哭叫，号叫。\n> 谅：当然。\n> 安：怎么。\n> 激激：清澈的样子。\n> 冥冥：深暗的样子。\n> 枭（xiāo）骑：通“骁”，作“勇”解，指善战的骏马。\n> 驽（nú）马：劣马，此诗中指疲惫的马。\n> 梁：表声字。\n> 而：一作“不”。\n> 良臣：指忠心为国的战士。\n\n1. 汉代的诗歌基本上是分成两大块：一个是汉代的乐府诗，第二个就是这个所谓古诗十九首。\n2. 乐府是古代的音乐行政机关。秦代朝廷设立乐府作为管理音乐的官署，汉代之后则沿用了秦时的名称。乐府在汉代，特别是在汉武帝时代，它有非常显著的一个规模的扩大和功能的增加。\n3. 乐府的两个功能一是制作乐曲、歌词，用于特定的仪式，典礼。二是收集和保存民间乐曲、歌词。\n4. 民间的这些歌谣它是随生随灭的，产生了，在民间流传了以后，没有人去记录、保存的话，那么它就消失掉了。我们可以推测在历史上不知道产生过多少，消失过多少，而只有人去关注它，把它这个选择出来，把它这个写定，把它保存下来，那么它才成为一个文本形态。\n5. 汉代乐府诗有一种特别显著的现象，就是对底层民众艰难生活的关注和体现。\n6. 所谓文学史不断发展的，如果把它简化来说，大致上可以说两个方向：一个方向，就是往深度去发展，比如说对人类的生活，所谓对人性、对人类的感情，更深入的、更细致的这种发现和考察。另外一个维度就是往广度上发展，就是说原来不是这个文学的重要的主题的东西，它成为文学的重要的主题，它被文学所关注。这就是所谓文学世界的扩大就意味着人类精神世界的扩大。\n7. 以前我们对诗经是有误解的，就是把所谓民间歌谣这样的东西，把国风解释成民间歌谣，把民间歌谣解释成这个底层民众，然后这个底层民众在具体的落实为这个奴隶，这样一来就是对于诗经的整个理解就稍产生了非常大的偏差。如果我们比较客观的或仔细的去看的话，我们可以这样的做一个判断，《诗经》主要是反映贵族生活，体现的是一种贵族情调。《诗经》的趣味是一种贵族趣味。\n8. 在诗经的个别篇章里面，它会描绘到一些劳动形象，比较多的就是那种这个樵夫的形象，比如汉广这样的一种劳动景象。而这种劳动景象我这么说有时候它也并不是了解劳动者的生活，它只是一种起兴的材料，就是说它是一个诗歌的出发点。我们讲是讲汉广，我们偏向于把它理解成一位樵夫，一个社会身份比较低的人，他对一个社会身份比较高的一个女性的一种启幕和追求不得的伤感。但是即使如此，他也不是典型的底层生活的景象。就是说，就说一个男子因为他的这个爱慕的对象，他的身份高于自己，那么因此而伤感，这不并不是典型的底层生活的景象。\n9. 你不能够在诗经里面找到那种很典型的这个底层生活，特别是底层生活的这种艰难。在汉乐府里面我看到了这样的东西，那么它意味着什么呢？：人对于人的世界的一种了解和观察。我说一句最简单的话，不懂得穷人的生活，你不懂得人，不懂得自己。因为贫困生活是人类生活的一种状态，当人被置于一种贫困生活的时候，那么人的情感，人的精神世界会因为这种环境的这种压迫而扭曲，而产生很多很多的变化。当关注贫困生活的时候，你会知道那也是人的一种可能性，而在这种可能性当中，人会成为一种什么样的样态？其实从另一个角度来说，它是深刻的关注自己的一个必要。\n10. 这种对底层生活的贫困和艰难的关注，是中国文化的，中国文学当中的这个精神领域的一个扩展，它对中国文学来说是一个非常重要的经过，并且由于汉乐府这一类诗歌的出现，它对中国后来的诗歌产生了深远的影响。\n11. 中国的这个后来的诗人，他们把关注底层民众的这种艰难一把它看作是自己的一种使命，而这种使命是双重性的，一重就是政治性的。所谓政治性的就是说反映民生的艰难，希望政治能够有所改善，他们认为这是诗人的一种使命。那么而另外一个角度，它实际上是体现着对于人的一种深刻的同情和理解。\n12. 们在诗经里面读过很多这个跟战争有关的，我们读过伯兮，我们读过这个这个君子于役，或者说我们在课堂上虽然没有这个仔细读过，但是大家课外也有所接触的，像这个东山采薇那样的诗，但是没有一首诗像这个战城南那样写的那么惨烈，那么就是说刺激人性。我们知道艰难战争的残酷，战争中人性的那种不安、紧张和扭曲，而是远远超出我们想象。\n13. 那个君子于役和伯兮这样的诗跟这个战城南比，你会感觉到，就是说在那些诗歌里表现的感情，它是伤感的，但它仍然是温和的，它是一种贵族文化的这个气质所要求的东西。哪怕它反映它的士兵的生活，他所表达的仍然是一种贵族文化的气质所要求的东西。\n14. 我们知道嚎是一个死亡仪式，是经过一个仪式以后，这个生命才算真正的结束。如果没有经过一个仪式的话，那么那么这个死亡它都没有真正的结束。就像婚姻需要一个完整的仪式，死亡也需要一个仪式。\n15. 我上次讲伯兮的时候，说就伯兮的后面有一个巨大的不安，但是他没有表达出来。为什么没有表达出来？他需要克制。因为如果他那一种感情表达出来的话，他会产生一种对战争的这个转移，他会倾向于反战。而在这个战城南里面他会把那个战争的这种灾难非常强烈的表达出来\n16. 这段以后还发生一个转变，它变成了一个赞美和感叹。也就是说其实这首诗如果继续发展下去的话，往原来的那种很强烈的情感发展下去的话，它就会变为愤怒：战争是因为什么原因而发生的？战争是由谁发动的？发动战胜的理由是否是必要的？如果战争发动的理由是必要的，那是否就意味着我的死亡一定是必要的？我们在现代的这个战争文学里面会看到这样的质疑。当然他如果往这样的方向发展下去的话，那这他就太厉害。它具有这样一种可能性，而这种可能性它被劫持了。所以后面一部分我们看到它的一个转折，转到对于思子的赞美上。\n\n### 《妇病行》\n\n> 妇病连年累岁，传呼丈人前一言。\n> 当言未及得言，不知泪下一何翩翩。\n> “属累君两三孤子，莫我儿饥且寒，\n> 有过慎莫笪笞，行当折摇，思复念之！”\n> 乱曰：抱时无衣，襦复无里。\n> 闭门塞牖，舍孤儿到市。\n> 道逢亲交，泣坐不能起。\n> 从乞求与孤儿买饵，对交啼泣，泪不可止：“我欲不伤悲不能已。”\n> 探怀中钱持授交。\n> 入门见孤儿，啼索其母抱。\n> 徘徊空舍中，“行复尔耳，弃置勿复道！”\n>\n> **译文**\n> 　　有一妇女长年累月生病，叫她丈夫到跟前有话要说，正要开口还没说话，不觉得泪就哗哗地不断落下。“两三个孤儿拖累你了，不要使我的孩子挨饿受寒，有过错不要捶打，我就要离开人世了，希望你今后还能常想到我的这番嘱咐。”妇女死后：抱孩子没长衣，短衣又破烂得没了衣里。只好紧闭门窗，堵好缝隙，留下孤儿到市场去买食物。半道上碰上亲友，哭得坐在地上起不来。请求亲友替他买食物。对着亲友不停地哭泣，止不住泪水。他说：“我想不伤心不能啊！”说着把手伸进怀里掏钱，取出后拿在手里郑重地交给亲友。回家开门看见孤儿，啼哭着寻找妈妈抱他。进门后无奈地在空空的屋里走来走去，自言自语：“不用说了，用不了多久，孩子又和他妈一样地会死去。”\n>\n> **注释**\n> 丈人：古时对男子的称呼，这里是病妇称她自己的丈夫。\n> 翩翩：泪流不止的样子。\n> 属累：连累，拖累。\n> 笪笞（dá chī）：捶打的意思。\n> “行当”两句：这两句是说我不久就要离开人世了，希望你今后还能常想到我对你的这番嘱咐。行当，将要。折摇，即“折夭”，夭折。\n> 乱：古时称乐曲的最后一章。\n> 襦：短衣，短袄。\n> “闭门”两句：这两句是说将门窗关好，把孩子放在家里，独自到市上去。牖，窗户。舍，放置。\n> 亲交：亲近的朋友。\n> 从：从而。饵：糕饼之类的食品。对交：对着朋友。探：拿取。“交入”两句：这两句是说孤儿见父亲空手回家，哭喊着要妈妈抱。索，求。空舍：是说房子里一无所有。行复尔耳：又将如此。尔，如此。弃置：抛开，丢开。\n\n1. 所谓诗，它是一种最精致的语言，但是也不能很绝对的这样去理解，有时候它就是用很简朴的语言来表达一些生活的这个现象和生活中的这个情感，关键还是它能不能给你带来感动，而这个妇病行它是能够给我们带来强烈的感动的。\n2. 麻木是安慰，是保护我们脆弱的心灵的一种方法。我们的心灵是脆弱的，它不能经常受刺激，所以他需要麻木。但是诗人的心灵是敏感的，我一直经常举例子，我就讲那个这个鲁迅的小说和同时代的作家相比，他的最大的特点就是他是敏感的，像祥林嫂这样的事情。有他的学生读给老太太听，他老太太说这种事情算什么？这我们乡下很多的。老太太对这东西她失去敏感。\n3. 注意一下，就是在古代文献里面用丈人来称丈夫的例子，没有其他的例子。丈人通常是指长辈，因此这首诗完全有可能有另外一种解释的方式，就是这个女人死的时候，她的丈夫已经死了，她是把孩子托给家里的长辈。这种解释也可以成立。但是我们现在为了避免这个把这个话题说的太复杂，我们就按照通常的选本的一种解释方法这样走下去。\n4. 然这个诗句非常的简陋，跟口语是几乎差不多，但是它的每一个细节都非常的这个集中和具有很强烈的这种抒情性。所以这个对诗歌来说形式固然很重要，但是像这种简陋的这个形式并不能一就说它不是诗歌的一种形式。有时候简陋的这个诗歌形式，它能够也如果运用的恰当的话，它也能够表达非常强有力的东西。\n5. 我们读那个战城南和这个妇病行，我们从诗经这个下来再读的话，我们会感觉它真的是不一样的东西，这个才是所谓这个文学史的这种开拓和发展，就是文学开始关注他原来没有关注过的东西，所以文学它最大的功能，它是对生活、对人的一种发现。\n\n### 《艳歌行》\n\n> 翩翩堂前燕，冬藏夏来见。\n> 兄弟两三人，流宕在他县。\n> 故衣谁当补，新衣谁当绽？\n> 赖得贤主人，览取为吾绽。\n> 夫婿从门来，斜柯西北眄。\n> 语卿且勿眄，水清石自见。\n> 石见何累累，远行不如归。\n>\n> **译文\n> \n> **在堂前翩翩飞翔的燕子，冬天躲藏夏天就出来相见。\n> 一家兄弟两三人，漂流游荡在他乡。\n> 旧衣服请谁来补，新衣服叫谁来缝？\n> 多亏贤主人给我补旧衣，缝新衣。\n> 她的丈夫从门外进来，斜倚着西北角的枝杈观看。\n> 请您别怒目相待，水澄清时石子自然显现。\n> 事情真相虽已清清楚楚，但还是不如回自己的家好。\n>\n> **注释\n> \n> **翩翩：疾飞貌。\n> 流宕：同“流荡”，漂流游荡。他县：即他乡，外县。\n> 谁当补：“谁给补”的意思。当，语助词，无义。\n> 绽：同“组”，原义是“裂缝”，这里是解裂布帛，缝制新衣的意思。《说文》段玉裁注云：“古者衣缝解（裂开）曰，今俗谓绽。以针补之曰组，引申之不必故衣亦曰缝组。”\n> 贤主人：指女房东。一说指劳作的东家。\n> 览：是“揽”的假借字，取，撮持。绽：缝补。这二句是说多亏贤主人给我补旧衣，缝新衣。\n> 夫婿：“贤主人”的丈夫。从门来：即从门外来。\n> 斜柯：叠韵连绵字，犹今口语“歪斜”。一作“斜倚”，疑是依义改字。眄（miǎn）：斜着眼。这句是说丈夫发生了猜疑。\n> 语（yù）卿且勿眄：请您别怒目相待。卿，古人相互之间的尊称，犹今口语的“您”。\n> “水清”句：比喻事情真相终能弄清楚。\n> 累累（léiléi）：联缀而众多的样子。\n\n1. 汉乐府它有两个最大的要素，也就是在文学史上来说有两个最重要的这个变化，一个就是我刚刚说的对底层生活的苦难的一种关注，第二个就是叙事性的加强。\n2. 诗经总体来说它是一个，它是抒情性的作品，它里面有的诗歌，它也有叙事的成分，但是这种具有叙事成分的诗歌，他关注的不是事件本身，它不是通过事件和人物的活动来感染我们，因此它这个细节不是很关注。简单的说在诗经里面那种叙事性的材料，它是抒情发生的这个原因。然后它偏重的是在抒情方面。所以整个来说诗经的它叙事性是不强的。而汉乐府里面有很明显的这种叙事性。像妇病行这样，它整个的前后，它都是在叙述一个时间的过程。这种诗歌写多了以后，诗歌的这种叙事性它就会变得越来越发达。\n3. 飘泊在异乡会受到各种各样的这一种猜忌敌视，远行不如归，在外面打工不如回去，我就觉得把这个把这首诗谱成一个曲子给农民工唱也挺好的。\n4. 他这首诗他没有描述什么重大的这个主题，也没有特别强烈的感，因为这个事件本身它不像那个战城南或者妇病行一样，情绪特别强烈，因为他仅仅是被误会，这个误会也没有产生严重的后果，并且最终也证明了就是这个石见何磊磊。他表达的仅仅是这样的一个东西：离乡生活的人们处处感觉到一种伤感。但是他这个情绪它是通过事件来展开的，它不是直接的就是说抒发自己的这种情感，它的抒情的就是直接抒发情感的东西很少，它整个的抒情是通过叙事来完成的。\n\n### 《十五从军征》\n\n> 十五从军征，八十始得归。\n> 道逢乡里人：“家中有阿谁？”\n> “遥看是君家，松柏冢累累。”(遥看 一作：遥望)\n> 兔从狗窦入，雉从梁上飞。\n> 中庭生旅谷，井上生旅葵。\n> 舂谷持作饭，采葵持作羹。\n> 羹饭一时熟，不知饴阿谁。\n> 出门东向看，泪落沾我衣。(东向看 一作：东向望)\n>\n> **译文**\n> 年少时就从军出征，老了才得以回来。\n> 在乡间路上遇到同乡人，问：“我家里还有哪些人健在？”\n> “远远看去那就是你家，但现在已经是松柏青翠，坟冢相连了。”\n> 走到家门前看见野兔从狗洞里出进，野鸡在屋脊上飞来飞去。\n> 院子里长着野生的谷子，野生的葵菜环绕着井台。\n> 拿着捣掉壳的野谷做饭，摘下葵叶来煮汤。\n> 汤和饭一会儿都做好了，却不知赠送给谁吃。\n> 走出大门向着东方远望，老泪纵横洒落在征衣上。\n>\n> **注释**\n> 始：才。\n> 归：回家。\n> 道逢：在路上遇到。\n> 道：路途上。\n> 阿：语气词，没有意思。\n> 君：你，表示尊敬的称呼。\n> 遥看：远远地望去。\n> 松柏（bǎi）：松树、柏树。\n> 冢（zhǒng）：坟墓。\n> 累累：与“垒垒”通，形容丘坟一个连一个的样子。\n> 狗窦（gǒu dòu）：给狗出入的墙洞，窦，洞穴。\n> 雉（zhì）：野鸡。\n> 中庭：屋前的院子。\n> 生：长。\n> 旅：旅生，植物未经播种而野生。\n> 旅谷：野生的谷子。\n> 旅葵（kuí）：即野葵。\n> 舂（chōng）：把东西放在石臼或乳钵里捣掉谷子的皮壳或捣碎。\n> 持：拿着。\n> 作：当做。\n> 羹（gēng）：用菜叶做成的带浓汁的食物。\n> 一时：一会儿就。\n> 饴：同“贻”。送，赠送。\n> 沾：渗入。\n\n1. 古代有时候它那个服役的这个年限它没有明确的规定，说到底就是这个底层人的这个利益不能够得到一种明确的法律保障。因此像这种就是说从军以后一直在军队里面到老才放回家的这种情形，在古代很普遍。\n2. 他有两个过程，一个过程是这个士兵在军队当中度过的这样的一个漫长的时间，还有与此同时他的家乡，他的亲人在这个家乡度过的这个漫长的时间，这个巨大的这种变化，它都浓缩在几句话里面了。\n3. 农村的这个房子有一个好处，大家知道它是用泥土这个打起来。如果这个房子长时间没有人住的话，他会还原回泥土，那些木构件会被人拿走去做别的用处。墙什么就去坍塌了，然后就会还原为泥土。因此村落往往会比其他的地方要高，就因为它不断的造房子坍塌，然后再造，所以这个地方村落的这个土地会比其他地方高。\n4. 葵菜是中国古代一个非常重要的蔬菜， 我们读古诗的时候经常会读到。现在没有了。现在好像就是在西南成都那个地方还有人当蔬菜吃，其他地方都没有了。\n5. 吃饭总得和一个人一起吃，一个人吃饭那不是个道理，不是一个正常的生活，可是叫谁来吃饭呢？\n\n### 《陌上桑》\n\n> 日出东南隅，照我秦氏楼。秦氏有好女，自名为罗敷。罗敷喜蚕桑，采桑城南隅。青丝为笼系，桂枝为笼钩。头上倭堕髻，耳中明月珠。缃绮为下裙，紫绮为上襦。行者见罗敷，下担捋髭须。少年见罗敷，脱帽著帩头。耕者忘其犁，锄者忘其锄。来归相怨怒，但坐观罗敷。(喜蚕桑 一作：善蚕桑)\n>\n> 　　使君从南来，五马立踟蹰。使君遣吏往，问是谁家姝？“秦氏有好女，自名为罗敷。”“罗敷年几何？”“二十尚不足，十五颇有余”。使君谢罗敷：“宁可共载不？”罗敷前致辞：“使君一何愚！使君自有妇，罗敷自有夫！”\n>\n> 　　“东方千余骑，夫婿居上头。何用识夫婿？白马从骊驹，青丝系马尾，黄金络马头；腰中鹿卢剑，可值千万余。十五府小吏，二十朝大夫，三十侍中郎，四十专城居。为人洁白晰，鬑鬑颇有须。盈盈公府步，冉冉府中趋。坐中数千人，皆言夫婿殊。”(白晰 一作：白皙)\n>\n> **译文\n> \n> **　　太阳从东南方向升起，照到我们秦家的小楼。秦家有位美丽的女儿，她的名字叫罗敷。罗敷善于采桑养蚕，有一天在城南边侧采桑。用青丝做篮子上的络绳，用桂树枝做钩笼。头上梳着堕马髻，耳朵上戴着宝珠做的耳环；浅黄色有花纹的丝绸做成下裙，紫色的绫子做成上身短袄。行人见到罗敷，就放下担子捋着胡须注视她。年轻人看见罗敷，禁不住脱帽重整头巾。耕地的人忘记了自己在犁地，锄田的人忘记了自己在锄田；以致于农活都没有干完，回来后相互埋怨，只是因为贪看了罗敷的美貌。\n>\n> 　　太守乘车从南边来到这，拉车的五匹马停下来徘徊不前。太守派遣小吏过去，问这是谁家美丽的女子。小吏回答：“是秦家的女儿，她的名字叫做罗敷。”太守又问：“罗敷今年多少岁了？”小吏回答：“还不到二十岁，但已经过了十五了。”太守就问罗敷：“愿意与我一起乘车吗？”罗敷上前回话：“使君怎么这么愚笨？你已经有妻子了，罗敷我也已经有丈夫了！”\n>\n> 　　“东方上千个骑马的人当中，我的夫婿在前列。凭什么识别我丈夫呢？他骑着一匹白马后边还有黑马跟随，马尾上系着青丝绦，黄澄澄的金饰装点着马头；腰中佩着鹿卢剑，宝剑可以值千千万万。十五岁在太守府做小吏，二十岁在朝廷里做大夫，三十岁做皇上的侍中郎，四十岁成为一城之主。他皮肤洁白，脸上微微有一些胡子；他轻缓地在府中迈方步，从容地出入官府。太守座中聚会时官员无数，都说我丈夫出色。”\n>\n> \n>\n> **注释\n> \n> **陌上桑：陌：田间的路。桑：桑林。\n> 东南隅：指东方偏南。隅，方位、角落。中国在北半球，夏至以后日渐偏南，所以说日出东南隅。\n> 喜蚕桑：喜欢采桑。喜，有的本子作“善”（善于、擅长）。\n> 青丝为笼系：用黑色的丝做篮子上的络绳。笼，篮子。系，络绳（缠绕篮子的绳子）。\n> 笼钩：一种工具。采桑用来钩桑枝，行时用来挑竹筐。\n> 倭堕髻：即堕马髻，发髻偏在一边，呈坠落状。倭堕，叠韵字。\n> 缃绮：有花纹的浅黄色的丝织品。\n> 帩头：帩头，古代男子束发的头巾。\n> 少年：古义（10-20岁）男\n> 但：只是。坐：因为，由于。\n> 使君：汉代对太守、刺史的通称。\n> 踟蹰：徘徊。\n> 姝：美丽的女子。\n> 谢：这里是“请问”的意思。\n> 不：通假字，通“否”音也为“否”的音。\n> 居上头：在行列的前端。意思是地位高，受人尊重。\n> 何用：凭什么。\n> 从：使......跟随。\n> 骊驹（lí jū）：纯黑色的马，泛指马。\n> 鹿卢剑：剑把用丝绦缠绕起来，像鹿卢的样子。\n> 鹿卢：即辘轳，井上汲水的用具。\n> 宝剑：荆轲刺秦王时带的就是鹿卢剑。\n> 侍中郎：出入宫禁的侍卫官。\n> 鬑鬑（lián lián）：须发稀疏貌。\n> 盈盈：仪态端庄美好。\n> 冉冉：走路缓慢。\n\n1. 民众就是就泛指的这个不确定的人群，非官方的，不是由官方制作的，不是由著名的文人写作的。但是过去的一种理解，它会形成一种偏向，就把这个民众理解成这个下层的民众。然后这在 50 年代以后就更清晰了，就是把这个民就理解成劳动人民，劳动民歌是反映劳动人民生活的，也是这个里面这个秦氏有好女，自名为罗敷，她是采桑的，是一个劳动者，问题是这个采桑的这个劳动者，最后又说她的老公是个大官。\n\n2. 秋胡戏妻故事它有一个严重的问题，大家明白吗？就是对于美女的喜爱是人之常情，是一种正常的感情。如果说你把这种正常的感情用一个非常恶劣的，那个就是说特别严重的这个后果去来描述，它破坏了人心当中的这种很自然的美感。\n\n3. 这首诗告诉你美女是可爱的，欣赏美女是自然的，但是欣赏美女不要痴心妄想，人家是有老公的。\n\n4. 喜欢紫颜色的女孩，一般来说内心都比较容易冲动，几乎没有例外。\n\n5. 来归相怨怒，它不是指耕者和锄者，而是回去跟老婆发脾气，外面看了罗敷了，回家看老婆就觉得什么都不对劲。这个汤也做的不好，盐也放多了，这个饭里面的水放的太干了，反正什么都不对。\n\n6. 就是大家看那个胡适和鲁迅的这个选择，是不一样的。胡适非常讲究表面上的好看，他一方面在维持他跟江东秀的婚姻，同时一天到晚在外面探头探脑，又害了不少女人，好多女孩被他害死。然而他去世的时候，蒋介石给他写的挽联：旧道德的楷模，新文化的先锋。\n\n7. 我们注意一下这个在文学里面，就是当女性夸奖自己男子或者女行爱慕一个男主的时候，他骑的马通常是白的。\n\n8. 我们知道汉代人描写一个男子的时候都是这种描写，他就长得很白，长得很白，确实，一般来说就是说经不太出门的人才能长得白，所以白是一个美的标志。\n","tags":["骆玉明古典诗词鉴赏"],"categories":["classical_poems"]},{"title":"秦汉篇","url":"/2024/07/23/秦汉/","content":"\n## 秦汉\n\n### 《垓下歌》\n\n> \n>\n> 力拔山兮气盖世。时不利兮骓不逝。\n> 骓不逝兮可奈何！虞兮虞兮奈若何！\n>\n> \n>\n> **译文**\n> 力量可以拔起大山，豪气世上无人能比。可时运不济宝马也再难奔驰。\n> 乌骓马不前进了我又能怎样呢？虞姬啊！虞姬啊！我又该把你怎么办？\n>\n> **注释**\n> 垓（gāi）下：古地名，在今安徽省固镇县濠城镇。\n> 兮：文言助词，类似于现代汉语的“啊”或“呀”。\n> 骓（zhuī）：意为顶级宝马。\n> 虞：即虞姬。\n> 奈何：怎样；怎么办。\n> 奈若何：拿你怎么办。若，你。\n\n1. 从诗歌史的角度来说，这两首诗也不能算是很杰出的作品。那为什么还选这样的诗？选这样的诗的目的就在于就是说在这诗里面它也包含着一些比较大的一些问题，就是理解中国文化和中国人的生活的一些问题，所以我拿它对照来讲。\n2. 大家看那个司马迁写的那个项羽本纪和高祖本纪，你会看到一种很明显的一种性格的对照。我们知道那个史记，它既是这个历史这个巨著，它同时也是一个文学性的作品。也就是说这个司马迁在记录历史史实，并且试图在历史史实当中探究历史变化的一些内在的这个因素的时候，同时它也在捕捉人性当中的一些东西，它试图在巨大的历史过程里面来理解人。\n3. 那么我看到这个两个人的区别是很明显的，我简单的说就是说他是一个年轻人和中年人的决斗，一个血气方刚的年轻人。我曾经说过一句话，这个有的朋友听上去可能不太喜欢，我说人到中年难免有点无耻。这话是什么意思？就是说人在世间这个经历了久了以后，他不能够再像年轻人那么血气方刚。那么就是说决绝的爱，决绝的爱，他会犹豫，他会斟酌，他会判断利弊，他会做各种各样，这个委屈自己，委屈自己本愿的选择，那么那么这是青年人和中年人的这个区别，它也是一个贵族和一个平民的区别，这个司马迁非常重视这种区别。司马迁在刘邦身上写了很多很多东西。\n4. 刘邦身上那种处于底层社会的那种无赖，那种无所不为、无所畏惧，因为并且因为这种无赖气，这种无所不为、无所畏惧，在道德上的就是说这个毫无约束，在司马迁的描述当中是他成功的一个很重要的原因，其实会令人思考很多问题。\n5. 这个在鸿门宴上相遇，杀了刘邦就没有那么多废话，就没有那么多事情。但是一个具有贵族身份，贵族修养的人，他无法在酒宴上杀死自己的客人，他可以在战场上杀死自己的敌人，但是他不能在酒宴上杀死自己的客人，这跟他的身份有关系。\n6. 项羽在军事上无疑比刘邦有更高的才干，那么项羽所这个指挥的战争所获得的成功，特别是在推翻秦王朝的过程里，项羽指挥作战所获得的成功，那么远远要比这个刘邦要宏大，而最项羽于失败，所以在垓下，在四面楚歌在遭受合围，走投无路，面临绝境的时候，他唱了这样一首歌。\n7. 整个史记才五十多万字他要从皇帝写到汉武帝时代，实际上留给每一个这个人物的这个篇幅是一定要有很节智的。但是司马迁在写项羽失败的时候几乎是不节制的，他就要写这个所谓英雄末路之悲。他一次一次的这种面对，做各种各样的可能性，面对着这种一次一次的，就是说在这种小范围里面的，就是在小规模上的这个战斗的胜利，而最终终究归于就是说整个的战决的全面失败。\n8. 这里我们看到一个古人讨论历史和历史人物的命运的时候，经常会遇到的一个词，时运，谁就无论你有多么巨大的能力，如果时运对你不利的话，你就必然失败。但是实际上这个我们看历史上的那些所谓英雄人物，他们在成功的时候，他们并不强调时运，强调什么呢？强调事有人为。历史上一切成功都是由人来做成的，有什么样的人就有什么样的成就。可是到了失败的时候，他们说那是时运，所以这也是一个很有趣的事情。\n9. 时运是一个不可理解的难以琢磨的东西。然后如果我们一定要给他一种解释的话，那就是各种你不能够预知的外在力量与不能够预知的方式结合的结果。所以英雄在这种时运面前会感觉到无奈。\n10. 女人，我说这句话的时候很多女生听上去不舒服，但我跟你说这并不是我的见解：一个女人是财富，而且占有敌人的女人是胜利者的最大的满足。我可以看到那些成功的帝王，他们的后宫里面常常是罗列着他们的战利品。所以我们就要理解这个项羽说的虞兮虞兮奈若何：但愿我的失败不要成为我永世的耻辱，我希望我的失败到我的死结束。\n\n### 《大风歌》\n\n> 大风起兮云飞扬，\n> 威加海内兮归故乡，\n> 安得猛士兮守四方！\n>\n> \n>\n> **译文**\n> 大风刮起来了，云随着风翻腾奔涌啊，\n> 威武平天下，衣锦归故乡，\n> 怎样才能得到勇士啊为国家镇守四方！\n>\n> **注释\n> \n> **大风歌：这是汉高祖刘邦（公元前256-前195）在击破英布军以后，回长安时，途径故乡（沛县）时，邀集父老乡亲饮酒。酒酣，刘邦击筑（一种打击乐器）高歌，唱了这首《大风歌》。表达了他维护天下统一的豪情壮志。\n> 兮：语气词，相当于现代汉语中的语气助词“啊”。\n> 威：威望，权威。\n> 加：施加。\n> 海内：四海之内，即“天下”。我国古人认为天下是一片大陆，四周大海环绕，海外则荒不可知。\n> 安得：怎样得到。安，哪里，怎样。\n> 守：守护，保卫。\n> 四方：指代国家。\n\n1. 这个刘邦是在中国历史上是一个特别有意味的一个人，那么首先一个非常重要的一点，就是说它是第一个从这个社会下层，我们不说底层是它做过亭长，大概是个小地主吧。如果按照这个解放以后那种成分评定的话。谈不上官，算是一个吏。然后就是但是就是在这个秦末的这个动乱当中，建立了这个中国历史上第一个强大的这个帝国。\n2. 用西方人研究中国历史的一种概念来说：他把这个秦汉称为第一帝国，然后把隋唐成为第二帝国，就是中国历史上的两个那种大的这个帝国和由这个帝国所代表的这种历史阶段。\n3. 就毛泽东诗歌里面所说的那一句很有名的话，就是百代皆行秦政治，这个政治是指那个政治体制。它的延续的时间是非常长的。你可以看到就中国历史跟西方历史是完全不同的，你没有办法用西方历史的模式来解释这个中国历史。\n4. 说这个百代皆行秦政治，虽然始于秦，但是秦王朝存在的时间非常短，但秦并没有使这一种体制获得一种很好的这种稳定的这个形态，也就是说并没有使它成为一个成功的实践。那么使它成为一个稳定的政治形态。\n   那么那是汉，我们知道两汉有 400 多年，那么这是中国历史上第一个这个强大的、稳定的和延续时间，历史时间非常长久的这样的一个王朝。\n5. 这个刘邦是一个非常特殊的人，就是说所谓毫无凭依，所谓提三尺剑取天下，这个用诗的语言来说是很豪迈的。所以他是后来这个历来就是说出于社会下层而有非常宏大的政治理想，有非常这个远大的个人抱负的那些人的榜样。\n6. 后来萧雨写的那个回忆论里面讲到毛泽东，跟他谈起就是毛泽东最佩服的人是谁？他说是刘邦，虽然说这个刘邦有很多事情做的不合适，比如说后来这个建国以后杀了很多这个有功之臣，毛泽东大不以为然。\n7. 在这个剧烈的历史变化，就是这种风云际会中取得这个绝大的成功的在中国历史上啊，有不少，大概最显著的人物要数刘邦、朱元璋、伟大领袖毛主席。\n8. 刘邦写这个大风歌的这个背景，就是回到这个家乡，然后宴请父老，那么找了一帮家乡的儿童，少儿歌唱团，然后唱到的他自己写的这首大风歌，那真是这个义气感慨志得意满的那种感觉，但是你读的时候你又会发现这里面有一种不安，这种不安跟这个项羽的不安是相似的。\n9. 这个大风起兮当然是一个象征性的一个意象，就是对于这个秦末的那个整个国家事态的一种象征性的描述。\n   而在这个大风起兮云飞扬的这个这样的一个动荡的过程里面，有人失败，有人成功，成功的是谁？这刘邦威加海内兮归故乡，找了一帮这个小孩来唱歌。\n10. 那个时候刘邦这个已经比较老了，身体也比较弱，因为他常年这个在从事这个战争这个活动，那么也负过伤，但是这个并不是他不安的根本的原因，他的不安的根本的原因就是对成功的一种意外，就是说为什么会成功？就说一个巨大的历史成功，它并不是仅仅是一个人的努力的这个结果，它还有很多这个说你不能够预料的这种因素在那里起作用。\n11. 既然是一个并非是由一个人努力所决定的可以预料的一个事件的结果，因此它的变化也包含着不可测。\n12. 不是从字面上来理解，就是说又哪能够得到贤臣良将帮自己来统治这个国家？而是一种历史的不安，就是说是一种不可测的因素，在哪里？它会带来什么不知道。\n13. 越是伟大的人物，他又越是会意识到自己的无力，因为越是伟大的人物，他创造了巨大的历史，他感觉到就是这个成功当中的那种不确定的因素和不可预测的这个东西实在是太多，那么这个会构成一种巨大的对历史的不安。\n14. 对于历史的不安，我们可以在中国文学史上，诗歌史上拿出一个整整的系列出来，你可以编一本书，就叫历史的不安。你一直可以编到这个毛主席临终前读那个枯树赋。\n","tags":["骆玉明古典诗词鉴赏"],"categories":["classical_poems"]},{"title":"楚辞篇","url":"/2024/07/23/楚辞/","content":"\n## 楚辞\n\n### —总序\n\n1. 诗经与楚辞的区别：\n\n   《楚辞》的作品篇幅大多数比《诗经》长；\n   《诗经》用于歌唱，《楚辞》用于吟诵；\n   《诗经》语言朴素，《楚辞》语言华丽；\n\n   我们这样说叫：中国文学中以语言华丽为特证的这样的一个部分，它源头就是在楚辞，然后到汉赋，然后到这个六朝的这个骈文，它是这样流动下来的。\n\n2. 诗经的最后的作品是这个春秋中期，也就差不多就是公元前 550 年左右楚辞里面的作品就是屈原的生平，那么差不多是在这个公元前300 年前后，那么这个中间有一个两三百年的时间跨度。\n\n3. 早期的文学史，它不是线状的，就是说它不是一个很清楚的这个流动变化的一个线形脉络，它的很多成分在历史当中埋没掉了，它显现出来的，是一个个的点。这些点是之间是什么关系？它中间的一个变化的过程是什么？是看不到的。\n   因此我们读文学史的时候，我们会看到很多后人对历史做的一种勉强的阐释。比如说诗经以后，我们在文学史上看不到，在诗经和楚辞中间就看不到这个诗歌。那么一种勉强的解释，就是说战国时代春秋战国时代百家争鸣，散文发达了以后，所以诗歌就相对这个没落。这真是站在个人的立场上拍脑袋想出来的，当然想出来的也是学者教授了，但是学者教授不一定都靠得住而靠得住，因为歌谣性的东西它是一个在民间不断产生，而如果没有人去记录，它就会消失掉，它如果不形成一种文本形式，甚至于经典文本形式就很难被保存下来。那么那么它在历史的过程当它就会消失掉了。也就是说你根本没有任何依据这个说这个在诗经和楚辞之间，诗歌创作是冷落的，而且在逻辑上也不能成立。\n\n4. 第二个问题就是地域性的这个差别。我就讲到就是说这个中国这个概念，其实它本来就是一个地域概念，同时也是一个文化中心概念。那么这个地域和这个文化中心它的位置是什么的？在黄河中游。就是说在一定的这个历史阶段里面所讲的中国，其实他就是指黄河中游这个地方，那个这些南方的楚族人他们不认为他是中国。\n   就是说中国的文化它是在很多不同的地域里面起源和和发展变化的。其中最大的两个部分，就是黄河流域和长江流域，而黄河流域这个它的主体就是华夏族，而长江流域它的主体就是楚族。晋楚和华夏是两个民族，当然他两者之间有非常多的这个交流和沟通。那么我们如果读屈原的作品，我们就会发现就屈原所歌颂的古代的圣贤系列，这个圣贤系列包含着大量的这个中原，就华夏族的这个圣贤。\n\n5. 这个北方人从北方打过去，南方人再从南方打过去，然后你打过来，我打过去，然后就打成一体，打成一片，然后中国这个概念，中国这个地域和中国这个文化概念就扩大了。然后南方人他们就统统成为中国人。但是这个两个流域的文化它始终是有区别的。一直到现在，其实这个长江流域的人和黄河流域的人，就是说这个两个地方居住的人们，他们的这个文化习俗甚至于个性都是有区别的，这种区别它不是由一个血缘的原因这个造成的，它实际上是由于这个人和土地的这个关系造成，所以一个上海人到北方去生活久了，他很快就成为北方人。\n\n6. 诗经非常特别：甚至于你站在世界文学的这个立场上来看的时候，你也会觉得他真的是很特异的：他几乎没有神话色彩，即使当它触及到神话元素的时候，它的神话元素也完全不展开，就是大雅的声明和那个商颂的悬了，他已经触及神话元素了，但是他居然一点也不展开，这个特点是非常强烈的。\n   那么相比较而言，就是楚辞里面有更多的这个神话元素，而楚辞的感情表达的也是特别强烈，那么它的语言又非常的华美。那么我们就是说这个带有神话元素的、带有浪漫感情的、热烈的、华丽的、宏大的楚辞。一下子就跟诗经就在各个方面都区分开来了。\n\n7. 那么我们来总结中国文学的这个发展过程的时候，我们会想到就是说你要追溯中国文学最初的这种两个源头的话，那就是诗经这个源头和楚辞这个源头。它这两个源头在这个历史的发展的过程里交融，催生出各种各样新鲜的东西。\n\n8. 比较通行的理解，就是屈原是楚国的一个贵族，参与祖国就楚怀王时代的一个重要的政治人物，在政治上遭受了失败，然后他创作了离骚，就是说我们采取这样的一个说法。《离骚》在过去的文献史料中，通常被理解为是屈原对楚国政治的一种指责和批判，对自己政治立场和政治态度的一种坚持。\n\n9. 在学习过程中，知识结构由两部分组成：经过自己仔细思考和确认的和采纳了别人的意见的。\n\n10. 大家知道这个任何一种写作他都有预定的这个阅读对象，尽管他不知道这个对象是谁。\n     因此写作本身它就是对读者的一个诉求，他要求你来认定，于是你这个时候成了法官，你如果成为法官的话，在离骚里，你忽然会发现法庭上只有原告没有被告，所有关于原被告的罪恶都是由原告提供的，这能够成立吗？我不是说这个离骚所描述的楚国的这个政治状态是非真实的，只是告想要说的一句是你如果说试图去研究，解楚怀王时代的政治，也是屈原时代的楚国政治的话，那么你听单单听屈原说是不够的。\n\n11. 那这个我常常说一句笑话，我在家里跟我太太那个有时候吵架，我就威胁他，我说你要对我好一点，我将来写一个自传，我就把你写得很好。你要是对我不好的话，我就会将来写一个自传，我把你描写得很坏，如果说我的文字我是可以传世的。将来没有人说话了，只有那本书在说话。以后人家就会相信你真的很坏，其实我很坏，但是人家会相信你很坏。\n\n12. 文学家因为他的这个美丽的语言获得一种特权，这种特权就是他可以通过语言传递他想要传递的信息，而别人无法反驳。\n\n13. 政治失败不仅仅是一个政治失败，这可能跟中国的这个很深远的历史传统有关，就是在中国的历史当中，就是政治失败通常是跟道德失败伴随在一起的。\n\n14. 屈原的这个离骚的真正的价值在什么地方？在于就是屈原面对着一个被否定，就是说就说面对的一个政治失败，这个政治失败至少是他自己所体会到的，说到底就是他所在的那个楚国的上层，他在这个世界当中被否定、被抹杀，那么那么那么他面对这样的一个失败，他可以采取什么样的态度？当然有一种方法是可能的，认同。也就是说在认同这种否定的时候，他获得一种苟且偷生的机会。是这个时代世界否定了他面对的态度，是他否定这个世界。他之所以遭遇如此大的失败，是因为这个世界是荒诞的。他需要用最强大的精神力量来证明自己的高贵和美好。离骚是对自己的高贵和美好的一个证明。我就说在那个时代，我们能够看到的最强有力的、最华丽的、最充满想象的语言，去描述它的高贵，它的美好，以此宣布它和世界对立，以此宣布不是他的失败，而是他所陈叔的那个世界的失败。难道这不是一个伟大的文学？难道他不给我们留下了一种巨大的震撼？\n\n15. 关键是问题是王为什么是先天正义的王？如果说王不是不正义的，是蒙蔽的，那么那么这个混乱的原因没有办法解释是吧？因为王在这里是一个决定性的力量，所以王的那种某种程度上的愚蠢，它是必要的愚蠢，它为这个世界的昏暗提供了理由。但是如果这个愚蠢，它不仅仅是愚蠢，还是一种邪恶。王本身就是邪恶。它会出现一个什么样问题？它会出现对这个世界结构的否定，因此屈原它就不再是一个受难者，它会成为一个革命者。但是屈原没有想要成为革命者。这个图示在中国政治历史上不断的出现。\n\n    \n\n### 《九歌·山鬼》\n\n> 若有人兮山之阿，被薜荔兮带女萝。\n> 既含睇兮又宜笑，子慕予兮善窈窕。\n> 乘赤豹兮从文狸，辛夷车兮结桂旗。\n> 被石兰兮带杜衡，折芳馨兮遗所思。\n> 余处幽篁兮终不见天，路险难兮独后来。\n> 表独立兮山之上，云容容兮而在下。\n> 杳冥冥兮羌昼晦，东风飘兮神灵雨。\n> 留灵修兮憺忘归，岁既晏兮孰华予。\n> 采三秀兮于山间，石磊磊兮葛蔓蔓。\n> 怨公子兮怅忘归，君思我兮不得闲。\n> 山中人兮芳杜若，饮石泉兮荫松柏，\n> 君思我兮然疑作；\n> 雷填填兮雨冥冥，猨啾啾兮狖夜鸣。(猨 同：猿)\n> 风飒飒兮木萧萧，思公子兮徒离忧。\n>\n> \n>\n> **译文\n> \n> **好像有人在那山角经过，是我身披薜荔腰束女萝。\n> 含情注视巧笑多么优美，你爱慕我的姿态婀娜。\n> 驾乘红色的豹后面跟着花纹野猫，辛夷木车桂花扎起彩旗。\n> 是我身披石兰腰束杜衡，折枝鲜花赠你聊表相思。\n> 我在幽深竹林不见天日，道路艰险难行独自来迟。\n> 孤身一人伫立高高山巅，云雾溶溶脚下浮动舒卷。\n> 白昼昏昏暗暗如同黑夜，东风飘旋神灵降下雨点。\n> 挽留我与你一起享尽欢乐忘了归去，年岁渐老，谁让我永如花艳？\n> 我在山间采撷益寿的灵芝，岩石磊磊啊葛藤四处缠绕。\n> 抱怨公子啊怅然忘却归去，你思念我啊却没空到来。\n> 我在这山中饮泉水，傍松柏，像杜若般纯正芳香，\n> 你想我啊是真是假。\n> 雷声滚滚雨势溟溟蒙蒙，猿鸣啾啾穿透夜幕沉沉。\n> 风声飒飒啊落木萧萧，思慕公子啊独自悲伤。\n>\n> **注释\n> \n> **山之阿（ē）：山角。\n> 被（pī）：通假字，通“披”。薜荔、女萝：皆蔓生植物，香草。\n> 含睇：含情脉脉地斜视。睇（dì），微视。宜笑：得体的笑。\n> 子：山鬼对自己爱慕男子的称呼，你。\n> 窈窕：美好的样子。\n> 赤豹：皮毛呈红色的豹。从：跟从。文：花纹。狸：野猫。文狸：毛色有花纹的野猫。\n> 辛夷车：用辛夷木做成的车。结：编结。桂旗，桂枝编旗。\n> 石兰、杜蘅：皆香草名。\n> 遗（wèi）：赠。\n> 余：我，山鬼自指。篁：竹林。幽篁，幽深的竹林。\n> 表：独立突出的样子。\n> 容容：即“溶溶”，水或烟气流动的样子。\n> 杳冥冥：又幽深又昏暗。羌：语助词。\n> 神灵雨：神灵降下雨水；雨，作动词用，下雨。\n> 灵修：指神女。憺（dàn）：安乐的样子。\n> 晏：晚。华予：让我像花一样美丽。华，花。\n> 三秀：灵芝草的别名，一年开三次花，传说服食了能延年益寿。\n> 公子：也指神女。\n> 杜若：香草。\n> 然疑作：信疑交加。然，相信；作，起。\n> 填填：雷声。\n> 猨：同“猿”。\n> 狖（yòu）：长尾猿。\n> 啾啾：猿叫声。\n> 离：通“罹”，遭受。\n\n1. 屈原所写的这个九歌，它的用途是什么？这一组作品，它原来都是祭神的乐歌，它可以理解为是一种带有表演性的东西。可以用歌舞的形式来表演。\n\n2. 我们可以泛泛的理解，就山鬼是一个山中女神。他跟什么样的这个历史传说相关联，可能会有不同的解释。一个比较多的一个，就是说比较被认同的一个解释，是郭沫若提出来的一个看法，他说这个山鬼写的就是那个瑶姬的故事，瑶姬是炎帝的小女儿，炎帝的女儿都是折腾的很厉害，所以大家那个如果看中国神话的话，你可以看看为什么炎帝会生那么多这个折腾的女孩。\n\n3. 那个精卫填海的精卫是炎帝的女儿，这个瑶姬是炎帝的女儿。还有一个，反正他生了三个女儿，三个女儿都特折腾。瑶姬的形象是一个什么样人的？他在那个古代那个记文献里面记载它是很简化的，就是这个未嫁尔死，他没有出嫁她就死了。这样的一个条件设定代表着什么呢？代表着一个美丽的生命，没有得到完成。一个女孩的她的自然性的生命的过程是开花结果，就是说出嫁生孩子。那这也是一个悲哀。我们在这里我们可以体会到很多东西，就是比如在古代社会条件下，人均寿命很短，那么有很多生命降生以后他得不到成长的机会，因为种种原因，受自然的原因或者社会的原因，他得不到增长的机会，这里面会带来一个巨大的悲哀。\n\n4. 由此还有一个连带的东西，就是无论从一个人的这个历史而言，还是从一个人类的整体的历史而言，就美好的东西它不断的被毁灭，我们一生的过程就是几乎就是看着美好的事物被毁灭的过程，因此从哀悼这个美好的东西的毁灭在这里面所流露出来的悲伤，它是人类的一个很深刻的悲哀感情：就是世界永远不能像我们所希望的那样美好。\n\n5. 顺便再说一句，我们自己也永远不像我们希望的那么美好，所以要有诗歌。\n\n6. 瑶姬在这个古代的这个记载里面说她死了，未嫁而死，所以她死了以后，她的这个魂气它不消散，按照中国古代的一种解释就是人死以后，它的魂气会消散掉，化落到整个自然的循环中。如果说她在生前受过很大的冤屈，或者说她有巨大的悲哀和不满，那么那么他那个阴气，这个他的阴气会拒绝在那里不散，它会影响人类世界的正常的生活。那么那么天帝看到瑶姬的这样的一个飘荡的这个英魂觉得很不安，然后就派她做了这个巫山的女神，我们知道巫山的女神里面包含着很多东西，一个就是跟性有关的。就是宋玉写的那个《高唐神女》的故事，它的背后其实是一个，也就是说一个美丽的女性，她对于性的满足的期待和要求。这些东西大家不要用那种很枯燥的、无聊的、道德化的这种词语去理解它，这里面隐含着人类的一些最深刻的对生命的期待、愿望和悲伤，希望大家不要把它简单的理解成一种纯粹的一种纵乐享乐的一种故事。\n\n7. 我们注意整个山鬼，他写的是一个对爱情的奢望。那么之所以郭沫若会把它解释为那个瑶姬的故事，就是姚记的故事本身也是一个，就是说爱情不能够得到满足，就是生命不能够得到满足。\n\n8. 然后是这个山鬼孤独的等待的这个场景：\n\n   表独立兮山之上，云容容兮而在下。\n   杳冥冥兮羌昼晦，东风飘兮神灵雨。\n\n   这是一个非常孤独的场景，那么描写的画面感也特别强，就是站在一个高山之上，云漂浮在它的下面，这样一个画面的话能够传达这种气氛，一个孤零零的女子站在高山之上，那么如果没有云的话，那可能是个普通的女孩，那么有云的话，她就带有一种神化的这个意味在里面。\n\n   那么整个诗里面最关键的一句话，其实就下面那句话，岁既晏兮孰华予，字面的意思是一年岁快要过去，这个岁它是借指两个方面的，一个是指时间的流水，一个是自己生命的衰老。我们这样说吧，这个古人的这个平均寿命是很短的，你看那个欧阳修写醉翁亭的时候，其实 40 多岁，你读上去觉得是一个老的像个怎么样的一个老头？其实是因为古人的这个平均寿命很短，哈哈哈，那还是有地位的人，所以这个生命的这种流逝，它会带来很大的一种焦虑和不安。而生命它是需要美丽的开放的。\n\n9. 我们在这里看到一个文化性的问题，就是在人类的社会当中，通常来说，女性她承担的这个功能和责任是不一样的。女性是美丽的，男性是智慧和有力的，它不是一个自然性的性别差异。其实在动物里面这个雄性动物才是更美的，因为雄性动物要去勾引雌性动物，所以他要更多的这个显耀自己。\n\n10. 这是后面的一个问题，就是在人类社会里面它其实是有文化分工的，而女性所担承担的功能体现出来的更多的就是说感性的和美的，在男性身上更多体现出来是理性的和力量，这是一个文化分工的一个结果。\n\n11. 就是你读红楼梦的话，你就会知道为什么世界没有意义，回到女性身边去有意义，因为当世界没有意义的时候，回到女性身边就是回到生命的美和感性。\n\n12. 就是为什么说这一句是整个诗的核心的句子，就是她需要一个爱人，生命才能开放。一个女性的美丽，她需要一个爱情才能得到实现。\n\n13. 我们知道在这个世界上生命所包含的和被期待的美丽，是很难得到实现的。这就是我后来写一篇文章，写润土的故事，我说读润土的故事，我读来读去读不出来，就是说润土的故事给我们带来悲哀，到底是什么？润土真的没有遭遇什么事情，他老婆也没有被衙内强奸，说这个日子过得艰难，谁的日子不艰难？你现在看看就是现在，你看看谁的日子不艰难，可是润土为什么让我们那么悲哀，其实鲁迅就写了这一个东西，一个被期待的生命，它并不能按照期待的方式成长，它会萎缩下去，它会萎缩在一萎缩成一个蜷曲的令人悲哀的状态。这是一个敏感的人对生命的悲哀。\n\n14. 当我们能够拥有美好生命的时候，我们真的要好好对待的。\n\n15. 你还记得鲁迅写那个润土是那一小段吗？天上黄沉沉的大的月亮，人头拿着一个叉，脖子上戴着一个银项圈，那个画面还记得吗？那个画面就是说生命本来是美好的，可是他后来枯萎了。我们这样来读文学的时候从文学里体会很多很多东西。\n\n16. 聊斋写的，这个女鬼聊斋写了很多，很多女鬼聊斋里其实有两种人物，一种就是就是具有确实的社会身份的人，当然它其实也是文学虚构，也就是说那些大家族的那些小姐们或者媳妇，那个夫人们，她们都是稳当的、矜持的，和这个遵守这个循规蹈矩的。另一种类型就是花仙狐妖，花仙狐妖的特点我曾经做过归因：最简单的就是年轻美貌，而且这个无所忌讳，在这个爱情关系当中经常采取主动姿态，这给男生带来很大的方便，而且经常轻飘飘的就从窗户里就飘进来了。还有一个很大的特点就是它不需要养活她，不需要花钱。\n\n17. 我们把它整放在整个文学史上来看的时候，实际上所谓女鬼的形象是人们情感当中所渴望的那种，就是说最热烈的生命形象。简单说在中国文学里最热烈的女性的形象，特别是跟感情有关的。由女鬼来承担的，你不成鬼，你都不能那么美好。\n","tags":["骆玉明古典诗词鉴赏"],"categories":["classical_poems"]},{"title":"诗经篇","url":"/2024/07/23/诗经/","content":"\n## 诗经\n\n### —总序\n\n1. **《诗经》是我国第一部诗歌总集。**中国的早期的诗歌就是说全部都收集这部书当中，我当然说这个早期是指那个楚辞以前那个时代，那么从这个角度来认识的话，那么我们可以预设到诗经这部书的这个特殊意义，它是中国诗歌的一个源头。\n\n2. **《诗经》 是儒家的经典。**根据学者的讨论，诗经成型或者说定稿。一般的来说大家比较接近的看法差不多就是孔子出生的那个时期，我们知道，就是说在论语里面提到诗的时候，它不叫诗经，它叫诗或者叫诗三百，也就是说孔子所接触到的这样一个文本就是 300篇左右的文本。 300 是取整数而言，就是我们现在看到的诗经是 305 篇，那么孔子看到的诗经可能也就是 305 篇。孔子教学生所读的这部诗经，也就是我们现在所读的这部诗经。这话的意思说得很清楚了，儒学作为一个学派是由孔子建立的，那么在远远在孔子建立这个学派之前，诗经这个作品早就产生了。诗经成为一个稳定的文本也是在孔子之前。所以你不可能只是从儒家的经典这个角度上来理解的。况且汉儒的解释和孔子对诗经的理解还是不一样。《诗经》的分类是在经部，并非在集部，它被古人看作是一部经，而非是诗歌总集。那么《诗经》作为儒家经典，拥有着特殊的闻释。例如：毛诗序：是以《关雎》乐得淑女以配君子。后妃之德也：\n\n3. **《诗经》 是中国民族文化的元典。**清华大学李学勤主导的夏商周断代工程不被国际主流学术界承认。原因是夏朝更像是一种传说，它没有很强有力的证明，就是说它没有文献资料来证明它的存在。（指的是无发掘文物与史料文字相照应，事实上确实发掘出了比殷商时期更早的文物，但是并不能证明它属于夏朝或者说是夏文化）。关于的殷商的记载也只有甲骨文，是中国的一种古代文字。甲骨文记录和反映了商朔的政治和经济情况，主要指中国商朝后期(前14~前11世纪)王室用于占卜吉凶记事而在龟甲或兽骨上契刻的文字，内容一般是占卜所问之事或者是所得结果。（王国维在这里对照殷商本纪与甲骨文对应之间做出了较大的贡献）。**中华民族文化的特征，它稳定的这个形成，它是在周代，它是体现在这些经典之中的。**例如诗经，尚书，周易。诗经是其中比较特别的一种，因为它是诗歌的形式，它更多的体现做这个时代人们的生活的情感，就是说人们对生命的理解，人们对生活的期望，人们对人们的这个审美情趣。就说这个人们所理解的这个美好的生活是什么样子的？美好的人生什么样的？\n\n4. 古人把他的情生活经验和情感经验在一种思语言形式当中封存下来。当我们在进入这个作品的时候，我们以我们自身的情感经验去解读它，这个时候我们和诗人产生一种共鸣，我们体会到诗经所体现的人类生活，也就是我们自己的精神生活，也就它是一个具有活力的东西。诗经的很多特点体现着鲜明的生活情感和生活经验，而这种生活情感和生活经验，它对整个中华民族文化的历史发展有一种塑造的作用，这就是元典的意义。\n\n   >汉有游女，不可求思。汉之广矣，不可泳思；江之永矣，不可方思。\n   >\n   >之子于归，言秣其马。\n\n   让我给他的马喂食吧。\n\n5. **诗六义：风、雅、颂、赋、比、兴。** \n\n   > **15国风** （《国风》即各地区的民歌即地方风土之音）：《周南》、《召南》、《邶风》、《鄘风》、《卫风》、《王风》、《郑风》、《齐风》、《魏风》、《唐风》、《秦风》、《陈风》、《桧风》、《曹风》、《豳风》\n\n   > **雅**是周王朝京都地区的乐歌，分大雅、小雅。\n\n   > **颂**是王室宗庙祭祀或举行重大典礼时的乐歌，分周颂、鲁颂、商颂三颂。\n\n   > **赋**是直铺陈叙。也是最基本的表现手法。\n\n   > **比**也就是比喻之意。《诗经》中用比喻的地方很多，手法也富于变化。\n\n   > **兴**是《诗经》乃至中国诗歌中比较独特的手法。兴字的本义是起，因此又多称为起兴，对于诗歌中渲染气氛、创造意境起着重要的作用。也就是我们常说的触景生情。\n\n   ```tex\n   “兴” 是一种情绪的无端的漂移。\n   在诗经中，很多时候兴兼比，即兴带有类比的成分例如：关关雎鸠，在河之洲。树上的鸟儿成双对，夫妻双双把家还。 \n   兴：是“起头”，是托物寓情，从一件事物联想到另外一件事物。\n   ```\n\n   \n\n6. 《诗经》强调人是自然界的一部分。人和自然是一个整体性的存在。也即天人合一。而在中国古代：天人合一的含义包含两部分：\n\n   一是人和自然的一体性：人是自然的一部分。\n\n   二是人伦法则和自然法则的统一性。用日月的关系类比男女的关系并由此解释传统社会下男尊女卑的合理性。\n\n\n\n### 《关雎》\n\n> ​\t\t\t\t\t**《关雎》国风·周南**\n>\n> 关关雎鸠，在河之洲。窈窕淑女，君子好逑。\n>\n> 参差荇菜，左右流之。窈窕淑女，寤寐求之。\n>\n> 求之不得，寤寐思服。悠哉悠哉，辗转反侧。\n>\n> 参差荇菜，左右采之。窈窕淑女，琴瑟友之。\n>\n> 参差荇菜，左右芼之。窈窕淑女，钟鼓乐之。\n>\n> \n>\n> **译文**\n> 关关和鸣的雎鸠，栖息在河中的小洲。贤良美好的女子，是君子好的配偶。\n> 参差不齐的荇菜，在船的左右两边摘取。贤良美好的女子，日日夜夜都想追求她。\n> 追求却没法得到，日日夜夜总思念她。绵绵不断的思念，叫人翻来覆去难入睡。\n> 参差不齐的荇菜，在船的左右两边摘取。贤良美好的女子，弹琴鼓瑟来亲近她。\n> 参差不齐的荇菜，在船的左右两边去挑选它。贤良美好的女子，用钟鼓奏乐来使她快乐。\n>\n> \n>\n> **注释**\n> 关关：象声词，雌雄二鸟相互应和的叫声。\n> 雎鸠（jū jiū）：一种水鸟，一般认为就是鱼鹰，传说它们雌雄形影不离。\n> 洲：水中的陆地。\n> 窈窕（yǎo tiǎo）淑女：贤良美好的样子。窈窕，文静美好的样子。窈，深邃，喻女子心灵美；窕，幽美，喻女子仪表美。淑女：善良美好的女子。\n> 好逑（hǎo qiú）：好的配偶。逑，“仇”的假借字，匹配。\n> 参差：长短不齐的样子。\n> 荇（xìng）菜：一种可食的水草。\n> 左右流之：时而向左、时而向右地择取荇菜。这里是以勉力求取荇菜，隐喻“君子”努力追求“淑女”。流，求取。之：指荇菜。\n> 寤寐（wù mèi）：醒和睡。指日夜。寤，醒觉。寐，入睡。又，马瑞辰《毛诗传笺注通释》说：“寤寐，犹梦寐。”也可通。\n> 思服：思念。服，想。 《毛传》：“服，思之也。”\n> 悠哉（yōu zāi）悠哉：思念之情绵绵不尽，思念深长的样子 。悠，忧思的样子。这句是说思念绵绵不断。悠，感思。见《尔雅·释诂》，郭璞注。哉，语气助词。悠哉悠哉，犹言“想念呀，想念呀”。\n> 辗转反侧：翻覆不能入眠。辗，古字作展。展转，即反侧。反侧，犹翻覆。\n> 琴瑟友之：弹琴鼓瑟来亲近她。琴、瑟，皆弦乐器。琴五或七弦，瑟二十五或五十弦。友：用作动词，此处有亲近之意。这句说，用琴瑟来亲近“淑女”。\n> 芼（mào）：挑选。\n> 钟鼓乐之：用钟奏乐来使她快乐。乐，使动用法，使……快乐。\n\n1. 它有一种忧伤，但是这个忧伤它不是过度的，这种忧愁伤感它不具有一种伤害性，也就是它是不过度的。那么这诗里面也有快乐，但是这个快乐也是有节制的，它也是不过度的，那么体现在诗歌里面。具体而言就是这个辗转反侧，我们知道一个人在床上翻来翻去是一个对社会影响最小的行为，他只跟你自己有关，这你追求一个女孩，你追求不到，以后你就上天落地，这个要杀人放火的。我们知道这个恋爱这个东西，它有一个特点，就是它在情感上引起的这个情感反应会特别的强烈。如果说一个人他没有理性的话，他不能克制自己的话，他会做出非常严重的行动。伤害他人或者社会。\n\n2. 《关雎》的艺术特色：\n   在讲述男女恋爱情感的背后存在着道德因素，因此《关睢》 包含着比较显著的理性因素。此外《关雎》中包含着孔子所强调的重要观点：中庸。\n\n3. 在中国古代的文化里面，我们知道这个有一个很基本的特点，就是说重视家庭的和谐，把因为家庭就是社会的一个基本单元，基本单元家庭的和谐就意味着社会的和谐，就如果家庭不能够和谐的话，那么这个社会也是不能够和谐的。所以这里面就首先包含着一种道德性和理性的因素，理性的因素说这个女孩娶回来要做老婆的，跟这个夫妻双方的这个未来的生活的长期性的这种安定、和谐、幸福是联系在一起，它不是一时的冲动，那么它又包含着一种理性的因素在里面。\n\n4. 孔子认为，学习诗经很有必要：\n\n   诗，可以兴，可以观，可以群，可以怨。\n   不学《诗》，无以言。\n   迩之事父，远之事君。\n   多识于鸟兽草木之名。\n\n### 《野有死麕》\n\n> ​\t**《野有死麕》 国风·召南**\n>\n> 野有死麕，白茅包之。有女怀春，吉士诱之。\n>\n> 林有朴樕，野有死鹿。白茅纯束，有女如玉。\n>\n> 舒而脱脱兮！无感我帨兮！无使尨也吠！\n>\n> \n>\n> **译文**\n>\n> 一头死去的獐子在荒野，白茅缕缕将它包。有位少女春心荡，小伙追着来调笑。\n> 林中丛生小树木，荒野有只小死鹿。白茅捆扎献给谁？有位少女颜如玉。\n> 慢慢来啊少慌张！不要动我围裙响！别惹狗儿叫汪汪！\n>\n> **注释**\n> 麕（jūn）：同“麇（jūn）”，也可用“野有死麇”，獐子。比鹿小，无角。\n> 白茅：草名。属禾本科。在阴历三四月间开白花。包：古音读bǒu。\n> 怀春：思春，男女情欲萌动。\n> 吉士：男子的美称。\n> 朴樕（sù）：小木，灌木。\n> 纯束：捆扎，包裹。\n> 舒：舒缓。\n> 脱脱(tuì）：动作文雅舒缓。\n> 感（hàn）：通假字，通：撼 ，动摇。\n> 帨（shuì）：佩巾，围腰，围裙。\n> 尨（máng）：多毛的狗。\n\n1. 恋爱有两种情形，一种情形就是他一开始他就有很明确的这个婚姻的目标。我们知道还存在另外一种情感，而且就是一种邂逅之爱。什么叫邂逅之爱？简单说它没有过去，也没有未来，它只是在这一个时间里面产生。嗯，现在市场上说的话就是所谓一夜情，有时候大概连一夜也没有。\n2. 他是更活泼和更热烈，但这他没有负担，就是我们碰在了一起，而这个时刻真是美好。然后那我们就美好一把，它没有过去，也没有未来，所以它这个美好一把的这个短暂时光，它是没有负担的。\n3. 男子悲秋，女子怀春。古人认为就是说人和自然具有一体性的。在中国文学里面，这种就是人和自然的一体性，这样的一种表现是非常普遍的，在诗经里面就可以看到很多。\n4. 那么问题是死麕和吉士诱之有什么关系那就是你要去讨好那个女孩，你要带着礼物去的。你有可能又觉得太庸俗了，是吧？谈恋爱就谈恋爱，带着礼物去，这个太庸俗了。不对的，我告诉你，在大自然里面这是正常的。那有一次我们在家里看电视，那个鸟去求偶的时候，它是带着虫子去的，它捉了虫子，含着虫子去给那个雌鸟，这个带虫子去，你说一个雄鸟求一个雌鸟都要带着虫子去。所以女同胞他有权利问你来找我，你的虫子呢？这是女生的权利，因为在自然里面就是说这个雄性是主动的，雄性是主动追求的一方，雌性是等待追求的那一方。那么，那么在古人看来，就人类也是这样的。\n5. 它是两种不同的恋爱。《关雎》这个指向婚姻的恋爱，它是更理性的、更克制和是具有德性的恋爱。邂逅的恋爱，它是只发生在此时此刻。那这个我不得不牺牲一下自己。我曾经在一条路上跟一个女生，这个我说我们从这条路走到那条路结束，我们过去什么也没有，将来什么也没有，我们就走这一条路，从这条路走到那条路结束。 5 分钟时间觉得挺好，我是不是在试验诗经里面的故事那种感觉，是挺好玩的一个过程，年轻的时候觉得有时候很喜欢有这么一个很短的一个过程。嗯，但是比较危险的事情就是到时候你想结束他结束不了。\n6. 牡丹亭跟西厢记到底有什么不同？那个不同在于西厢记里面是先出现一个异性，然后才出现爱情。而在牡丹亭里面是没有那个异性，先出现的是生命的欲望，而有那个欲望创造了他的对象，也就是说只要你有欲望，就会有爱人，爱人是被欲望催生出来的。这就是牡丹亭跟西厢记的不同。\n7. 我讲这悲秋。悲秋而是属于男士的这个主题，因为悲秋它跟自然联系在一起，它就是在永恒的循环里面，就人会意识到，就是说自然的永恒和生命的这个短暂。那么为什么在文学里面比较少的就表现这个女孩的这个悲秋，也就是女孩的感情更多的是所谓感性的，男性的这个感情它里面包含着比较多的理性的成分，或者是哲学性的成分，而且悲秋通常来说它不是说站在一个平地上去悲秋，这最好要站到高山上去悲秋。为什么？在高山上的时候，他会看到更广大的自然和更广大的世界，会把人置于这个天地宇宙之中，去感受人和自然的关系，人和人在这个天地宇宙当中的存在，在这里面去产生很多对人生的感想。\n8. 我们可以看到一种邂逅的，这个在野外的一场邂逅的爱情，它和那个关雎它形成一种对照。我看到这个在诗经里面它既有这种就是说明确的指向婚姻的这种具有理性的、具有德性成分的这样的一种爱情，一种恋爱，也有像这个野有死麕那样更有野性的，也表现得更为直接大胆的这样的一种恋爱。应该说都很美。虽然孔子是更赞美前一种，我也更赞美前一种，但是在文学上我们也理解后一种。\n\n\n\n### 《君子于役》\n\n> ​\t\t\t\t\t\t\t**《君子于役》国风·王风**\n>\n> 君子于役，不知其期。曷至哉？鸡栖于埘，日之夕矣，羊牛下来。君子于役，如之何勿思！\n>\n> 君子于役，不日不月。曷其有佸？鸡栖于桀，日之夕矣，羊牛下括。君子于役，苟无饥渴！\n>\n> \n>\n> **译文\n> \n> **丈夫服役去远方，服役长短难估量，什么时候才回到家呢？鸡已经进了窝，太阳也向西边落，牛羊成群下山坡。丈夫服役在远方，教我怎不把他想？\n> 丈夫服役去远方，每日每月恨日长，什么时候才能又相会？鸡纷纷上了架，太阳渐渐也西下，牛羊下坡回到家。丈夫服役在远方，但愿不会饿肚肠！\n>\n> **注释\n> \n> **于：往。役：服劳役。于役，到外面服役。\n> 期：指服役的期限。\n> 曷（hé）：何时。\n> 至：归家。\n> 埘（shí ）：鸡舍。墙壁上挖洞做成。\n> 如之何勿思：如何不思。\n> 如之：犹说“对此”。\n> 不日不月：没法用日月来计算时间。\n> 有（yòu）佸（huó）：相会，来到。\n> 桀：鸡栖木。一说指用木头搭成的鸡窝。\n> 括：相会，会集。\n> 苟：且，或许。一说但愿。\n\n1. “鸡栖于埘，日之夕矣，羊牛下来。” 我们说诗是一个建构性的东西，而诗的这种建构它一个很重要的手段就是通过这个意境来表达我不能说这个，这个西方的诗歌或者其他民族的诗歌，它对意没有这种对意境的追求，但是我们可以这么说，就是说重视意境，而是中国诗歌的一个非常显著的特征。如果说从表达意义的这个角度来说，中间这一层是可以抽调的，没有这一层也一样。“君子于役，不知其期。曷至哉？君子于役，如之何勿思！” 他的意思是不是表达完了？就中间这句在表达意义的这个功能上，它没有增加任何东西，但是你如果把它抽掉以后，你会忽然会发现它不像一首诗了，它没有什么美感，而把它加上去以后你会发现有一个意境的存在，它对我们是具有感染力的，并且它会吸引我们去体会它，理解它。它需要我们把自身的情感和经验投入到其中，你这个时候你可以看到一个女子，有一个视角在里面，这个视角就是那个女子的视角，你可以看到他似乎是靠在他的这个院子的门口，是吧？靠在那园阁向远处看，是吧？鸡已经回到哦鸡窝里面了，然后这个太阳也下山了，远处有牛羊缓缓的归来，到了黄昏。鸡要回家，牛要回家，老公要回家，现在问题是老公没有回家。\n2. 第二要素就是说在诗经里面，我可以看到中国古人对于这个幸福生活的理解。在诗经它是表现日常生活和日常情感的东西，不是什么很奇异的这种，这个神话元素，很奇异的这一种，没有种类似历险记那一种神奇的这个经历，没有芝麻开门，没有阿里巴巴。它就是日常的生活。诗经他就是说，他表达日常生活的感情，是他的一个非常大的特点。中国古代的那种对日常生活，对家庭生活的这种重视，中国人的所谓幸福感，以后我们会看到这种意境这种表达方式在中国的诗歌里面它会长期的延伸下去，你在陶渊明的诗歌里可以得到他，你在这个王维的诗歌里也可以得到他。就是日常的、平静的、安详的生活，那就是我们所追求的幸福。\n\n\n\n### 《伯兮》\n\n> ​\t\t\t\t\t**国风·卫风《伯兮》**\n>\n> 伯兮朅兮，邦之桀兮。伯也执殳，为王前驱。\n>\n> 自伯之东，首如飞蓬。岂无膏沐，谁适为容？\n>\n> 其雨其雨，杲杲出日。愿言思伯，甘心首疾。\n>\n> 焉得谖草，言树之背。愿言思伯，使我心痗。\n>\n> \n>\n> **译文\n> \n> **我的丈夫真威猛，真是邦国的英雄。我的丈夫执长殳，做了君王的前锋。\n> 自从丈夫东行后，头发散乱像飞蓬。并非没有膏沐以整饰仪容，只是丈夫远征在外，就是专心的打扮，又给谁看呢？\n> 天要下雨就下雨，却出太阳亮灿灿。一心想着我丈夫，想得头痛也心甘。\n> 到哪里去找一株萱草，把它种到北堂去。一心想着我丈夫，使我伤心病恹恹。\n>\n> **注释\n> \n> **伯：兄弟姐妹中年长者称伯，此处系指其丈夫。朅（qiè）：英武高大。\n> 桀：同“杰”，杰出的人。\n> 殳（shū）：古兵器，杖类。长丈二无刃。\n> 膏沐：妇女润发的油脂。\n> 适（dí）：悦。\n> 杲（gǎo）：明亮的样子。\n> 谖（xuān）草：萱草，忘忧草，俗称黄花菜。\n> 背：屋子北面。\n> 痗（mèi）：忧思成病。\n\n1. 我们先说一句话，就是说诗歌它能够感动我们，他需要表达真实的情感，他如果不能够表达真实的情感，那他不能感动我们。人在情感上是非常敏感的。就是说当你表达的情感不真实，就是你首先不能使自己感动的候，你要想来感动我们，那是很困难的。我们读者非常容易体会到这种虚假，因为读者是把自身的情感投入到诗歌当中来体会的，他会感受到那一种虚假的，这是一个方面。那另外一个方面是什么？诗经是不是凡是真实的情感，他就能自由地表达出来？不是的，人是一个社会性的存在，人对事物的理解，比如说对于是非的理解，对于价值的理解，对于什么是包括对于什么样的情感状态是美的理解，它是受社会条件约束的。而这两者他又常常是矛盾的。\n\n2. 这个大哥称她的丈夫，就把丈夫或者情人，也就是夫妻关系或者情人的关系，转化为亲缘关系，用亲缘关系来表达。这是中国诗歌的一个特点。我以前上课的时候问过好多留学生，就是在他们的这个文化里面有没有，基本上是没有，只有一个国家是有的。这个韩国、朝鲜也把情人或者丈夫叫成哥，这个当用哥这个或者妹这样的称呼来称这种夫妻关系或者情人关系的时候，增加了什么呢？我们自己去体会，我们自己的体会我就不解释了。在诗经里面，就是说叫伯的时候一般是叫丈夫，叫叔往往是指的是情人，因为这个博中说起说就是年轻的。一般来说伯代表着这个成熟的男性，叔代表着年轻的和具有魅惑力的男孩，所以叔常常是用来称情人的，伯是用来称丈夫的，这样当然不绝对，但是这是一个蛮有趣的一个现象。\n\n3. 我难道没有那些东西吗？我打扮给谁看？我们这里面我感觉到一种非常微妙的东西，我们知道这就是所谓女为知己者容的这个成语的最初的出处。这个我们也可以这么相信，就是这个妻子，她非常的爱她的丈夫，因此她的丈夫出去打仗以后，她就不再这个修饰自己。也就是说在她心目中，她的美丽完全属于她的丈夫，她的美丽甚至于跟她自己都没关系，所以他头发就像乱稻草一样。可是你难道认为这纯粹的是一种个人感情吗？它不是一个社会力量在作用嘛？我们换一个情形吧：大哥去打仗了是吧？妹子在家呢。溜光水滑是吧？花露水，雪花膏，透涂的满脸都是。然后手里卷个煎饼裹着个大葱，在庄子里村子里晃来晃去很漂亮，大家看到都喜欢。二哥干啥呢？二哥说打麦子呢。问题在于这消息传到前线去，大哥就知道了。你知道你老婆在干嘛？你老婆溜光水滑，整天在庄子里转来转去，看到二哥三哥那个热乎，大哥不能好好打仗，大哥不能为王前驱，大哥要想念家乡。哈哈。我们看到一种非常微妙的情感表达方式，明白吗？就是说在这里面其实有双重的东西，\n\n4. 一重的东西。这个女子对于她丈夫的忠诚，我们不能怀疑她是不真实的，我们觉得她是很自然很真实的东西。她非常爱她的丈夫，她的美丽只属于她的丈夫。但是当她的美丽只属于她的丈夫的同时，它又包含着一种社会需要，一种社会力量的作用。社会力量的作用就是男人由于忠于他的国家而获得荣耀，而女人由于忠于她的丈夫而获得荣耀，因为这时候忠于丈夫不仅仅是忠于丈夫，而且是忠于国家。这个主题，就是说女人通过忠于她的丈夫来表达她对于国家忠诚的这样的一种诗歌主题，那么在中国文学史上是源源流长的。\n\n5. > 自嗟贫家女，久致罗襦裳。\n   >\n   > 罗襦不复施，对君洗红妆。\n   >\n   > ——《新婚别》\n   >\n   > 军功章啊 ，有我的一半，也有你的一半\n   >\n   > ——《十五的月亮》\n\n6. 一种文化要素的作用在作者身上体现出来的时候，他不一定是自觉的。我们也不能够确认这个作者是否是自觉地表达了这两重关系，它也许就自然的表达了这个东西，自然的，但是它背后它是这个双重力量的作用。\n\n7. 打仗是要死人的，回得来回不来是不知道的，明白吗？她背后真正的担忧是这个，所以你感觉到这个感情蛮沉重的，其雨其雨，杲杲出日。这是什么意思？事与愿违。但是他没有说出来，说出来以后会怎么样？会产双重主题的冲突，明白了吗？这双重主题一个就是忠于他的国家，一个是忧念他的大哥，如果这个，如果说忧念的这一层写的过重的话，这个忠诚于国家的这一层会受到伤害，而忠诚于国家的这一层受的过重，如果说把这个忧念的这一层完全压下去的，那么这个感情的表达也是会受到伤害。\n\n8. 我在讲这首诗的时候，说特别想讲的就是诗歌的情感表达和社会力量的制约的一种关系。你不要就读一首诗，你只认为就是说它是诗人的作品，它是诗人的情感的流表达。不是的，诗人在表达情感的时候，我们要看到两层过滤：一层过滤重要就是诗人本身他是一个社会当中生活的人，诗人本身他对事物的这个判断，他是受这个社会力量的影响的。他是读过书，他是受过教育的。所以他的思想，它本身它不是一个纯粹说自己的东西，它本身是跟这个社会文化力量有关系。第二个就是说，诗歌在写作过程当中，他会考虑这种社会力量的作用，他即使是这么想的，他也不一定能这么写。第三个是在流传的过程里面，它会受到社会力量的这种作用，就比如说选择，就是一个作用，诗经里面的诗，是跨越的年代，那么长，最早是西周初的，最晚是春秋中期的。五六百年的时间，那么留下来的就 305 篇。当然有的丢失的原因不一定很清楚，但是你可以知道在这过程里面，它有一个就是说一个社会的文化，这个结构，这个社会的意识形态，它的选择作用，甚至于有的诗它是会被改动的。将来我们读汉乐府，我们就会注意这种现象，可以看到这个汉乐府它被改动的这个痕迹。那么这个是我要讲这首诗的这个一个要点：就是我一开始就讲的就是一首诗歌的产生，它是属于个人情感的作用和社会这个力量的作用相互作用的一个结果。\n\n### 《萚兮》\n\n> ​\t\t\t\t\t**国风·郑风《萚兮》**\n>\n> 萚兮萚兮，风其吹女。叔兮伯兮，倡予和女。\n>\n> 萚兮萚兮，风其漂女。叔兮伯兮，倡予要女。\n>\n> \n>\n> **译文\n> \n> **落叶落叶往下掉，秋风吹你轻轻飘。诸位欢聚小伙子，我来先唱你和调。\n> 落叶落叶往下掉，秋风吹你轻轻飘。对面欢快小伙子，我先唱啊你和调。\n>\n> \n>\n> **注释\n> \n> **萚（tuò）：脱落的木叶。\n> 女（rǔ）：同“汝”，你，指树叶。\n> 叔、伯：都是兄弟的排行，此指众位小伙子。\n> 倡：同“唱”。一说倡导。和（hè）：伴唱。\n> 漂：同“飘”，吹动。\n> 要（yāo）：相约。一说成也，和也，指歌的收腔。\n\n1. 我们会看到就中国诗歌里面就是咏唱落叶的诗，从诗经开始就每个时代都有，一直到新诗里面，是吧？徐志摩写过一个落叶小唱，我们大概同学当中也有人写这个落叶的诗，也就是说中国人对落叶这样的一个自然景象，它会产生很多的这种感想。\n2. 那么这跟中国文化的那个特点有关系，我们所说的这个中国文化，它是一个非宗教类型的文化，它不说没有宗教的影响了，是说受影响相对淡薄的一种文化。那么在这种文化里面，它人的这个生命，它的生命长度就是一个生活长度。所以随着年龄的这个变化，我们对世界，我们对人生很多这个感受会不同。年轻人有时候经常说不怕死，为什么呢？他钱多，就像一个大富豪一样，说钱没有用，钱没用，为什么没有用？钱多？这个到了老的时候就像一个人穷的就是只剩下这个一把硬币了，每掏出去一个的时候心里就会抖，一看又是一年啊。\n3. 但是就是说在一个宗教文化系统里面，也就是在那种这个文化系统里面生活的人，他们对生命的感觉他会不一样，不是说他就不怕死，因为死毕竟是一个令人迷惑的事件，就是说它包含着一些不可知的因素在里面，但是总的来说就它里面这样有一种意识，就是说就生命的这个过程它不只是一个生活长度。生命的价值和生命的意义的实现。最终它不是在此生，而是在彼岸，在上帝那边，在末日审判，经过末日审判以后，你该得的都会得到。\n4. 我有时候说这个宗教，这个其实上帝就是一家保险公司，这个信仰一个宗教就跟投保一样，因为这个人在世界上他希望得到的这个一个根本的东西，我们可以这样说，就是他应得的幸福和公平。但是问题是每个人应得的幸福它的衡量方法它是不一样，所以你也可以说没有多少人他相信在这个世界上已经得到了他应得的幸福和公正的对待。当讲师的时候觉得这个自己的公正是副教授，以后觉得自己的公正是教授。这个你问问我们学校的老师，大概他们可以告诉你这种感觉。\n5. 人在这个世界上有时候会遭遇到所谓不遇之祸，你事先根本没有办法知道的那种突然的、毫无理由的、无法相信的、无法理解的那种灾祸，这我们就不用举具体的例子，大家可以想起很多很多。那么那么对于没有宗教信仰的人来说，他就会感觉到这个生命的一个不可理解荒诞，他会把生命解释为一种荒诞虚妄。对于信仰宗教的人来说，他会从另外一个完全不同的立场上来考虑问题，因为他最终会得到他应得的幸福和公正。\n6. 所以一般来说，这个信仰宗教的人比我们不信仰宗教的人，他的生活态度相对要平静一点好。这样我们再返回我们就知道了，中国文化的这样一个特点，它造成一个什么？对时间的敏感，尤其是对季候的敏感，因为季候是时间变化最强烈的特征，而在所有的季候变化当中，什么样的季候是最令人感到这个触动的呢？就是所谓秋冬之际。\n7. 秋冬之际最显著的情景是什么？落叶飘飞，所以你从这个落叶飘飞想到这个时间的敏感性。会明白这个诗我为什么说它是一个很简单式的诗，但是它的信息也很丰富，就是这个道理，我觉得这个道理。然后我们再读后面一句，你会觉得这个是怎么跳掉了？如果说你不能够理解他的这个内在的那种这个脉络的话，你会觉得这个是跳了的。怎么前面说还在说落叶，后面紧接着就说叔兮伯兮，这个弟兄们唱起歌来，我应和着你，你发现它好像跳。但其实它的内在的脉络，它是不跳的。\n8. 为什么呢？因为落叶令人感觉到生命的一种时间的流逝，生命的流逝，这是一个令人心里发凉的，就是说一种带有恐慌的感觉，但是这是一个又不值得哆嗦的事情。生死是大事，但是也是常事，哪里还有比生死更平常的？你整天说我想到我要死的，你去跟人说这烦不烦哪？谁还不死吗？这话有什么可说的呢？所以这个地方就跳开来了。跳到什么地方去？唱歌。唱歌吧。我应和着你。\n9. 倡予和女：这里面表达的一个东西是什么呢？就是这种时光流逝所带来的对生命的这种焦虑和恐慌，它可以有一个力量，可以把它如果说不能使它消失的话，能够降低这一种这种悲伤，那就是友情。中国的诗歌的一个很重要的主题就是歌颂友情，友情是我们用来克服我们对生命的恐慌的一种力量。你会发现这首诗很短的两句里，实际上包含了中国诗歌最重要的两个要素，就是说对时间流逝的敏感和对友谊温情的一种期待。\n\n\n\n### 《山有枢》\n\n> ​\t\t\t\t\t\t\t\t\t\t\t\t\t**国风·唐风《山有枢》**\n>\n> 山有枢，隰有榆。子有衣裳，弗曳弗娄。子有车马，弗驰弗驱。宛其死矣，他人是愉。\n>\n> 山有栲，隰有杻。子有廷内，弗洒弗扫。子有钟鼓，弗鼓弗考。宛其死矣，他人是保。\n>\n> 山有漆，隰有栗。子有酒食，何不日鼓瑟？且以喜乐，且以永日。宛其死矣，他人入室。\n>\n> \n>\n> **译文\n> \n> **山坡上面有刺榆，洼地中间白榆长。你有上衣和下裳，不穿不戴箱里装。你有车子又有马，不驾不骑放一旁。一朝不幸离人世，别人享受心舒畅。\n> 山上长有臭椿树，菩提树在低洼处。你有庭院和房屋，不洒水来不扫除。你家有钟又有鼓，不敲不打等于无。一朝不幸离人世，别人占有心舒服。\n> 山坡上面有漆树，低洼地里生榛栗。你有美酒和佳肴，怎不日日奏乐器。且用它来寻欢喜，且用它来度时日。一朝不幸离人世，别人得意进你室。\n>\n> **注释\n> \n> **枢（舒shū）、榆（余yú）、栲（考kǎo）、杻（扭niǔ）：皆为树木名。\n> 隰（xí）：指低湿的地方。\n> 曳（叶yè）：拖。娄：即“搂”，用手把衣服拢着提起来。《正义》：“曳娄俱是着衣之事。”\n> 宛：通“菀”，萎死貌。\n> 栲（kǎo）：《毛传》：“栲，山樗（初chū，臭椿）。杻，檍（亿yì）也。”《传疏》：“山樗与樗不同。……叶如栎木，皮厚数寸，可为车幅，或谓之栲栎。”\n> 廷：指宫室。\n> 埽（扫sào）：通“扫”。\n> 考：敲。\n> 保：占有。\n> 永：《集传》：“永，长也。……饮食作乐，可以永长此日也。”\n\n1. 伤感、颓丧是中国文学的要素之一。\n2. 所谓读诗是一个创造性的活动，是说你要调动你的情感和经验。就是说诗人把他的情感和经验封闭在一个语言形式当中，你如果只读它的字面，这就是一个知识性的行为：你把它背出来了，你知道这句诗意思是什么，这是一个知识性的理解。这不是一个真正的读诗，真正的读诗是你用你的情感和经验去激活它，理解它，使这首诗重新成为一个有生命的东西，它幻化出一种生命力来，而且这个生命力是以你的独特的方式呈现出来，它是一个创造性的过程。因此诗它必须给读者留下空间，他必须让读者在这里面体会到一种创造型活动的快乐。\n3. 读诗是一个创造性的活动，写诗的人要给读诗的人留下创造性的空间，而“兴“，是最能提供创造空间的一种写作手法。\n\n### 《月出》\n\n> ​\t\t\t\t\t **国风·陈风《月出》**\n>\n> 月出皎兮，佼人僚兮。舒窈纠兮，劳心悄兮。\n>\n> 月出皓兮，佼人懰兮。舒懮受兮，劳心慅兮。\n>\n> 月出照兮，佼人燎兮。舒夭绍兮，劳心惨兮。\n>\n> \n>\n> **译文\n> \n> **月亮出来多明亮，美人仪容真漂亮。身姿窈窕步轻盈，让我思念心烦忧。\n> 月亮出来多洁白，美人仪容真姣好。身姿窈窕步舒缓，让我思念心忧愁。\n> 月亮出来光普照，美人仪容真美好。身姿窈窕步优美，让我思念心烦躁。\n>\n> **注释\n> \n> **皎：毛传：“皎，月光也。”谓月光洁白明亮。\n> 佼（jiǎo）：同“姣”，美好。“佼人”即美人。\n> 僚：同“嫽”，娇美。\n> 舒：舒徐，舒缓，指从容娴雅。\n> 窈纠：形容女子行走时体态的曲线美。\n> 劳心：忧心。\n> 悄：忧愁状。\n> 懰（liǔ）：体态轻盈的样子。《埤苍》作“嬼”，妖冶。\n> 慅（cǎo）：忧愁，心神不安。\n> 燎：明也。一说姣美。\n> 夭绍：形容女子风姿绰绝。汉赋里往往写作“要绍”，曲貌。“窈纠”、“忧受”、“夭绍”都是形容女子行动时的曲线美，就是《洛神赋》所谓“婉若游龙”。\n> 惨（zào）：当为“懆（cǎo）”，焦躁貌。《集传》：“惨当作懆，忧也。”\n\n1. 诗永远是有歧义的，诗不可能占满所有的空间。\n2. 孔子赞扬《关雎》他不仅仅是在评价一首诗，而是在提倡一种中庸的德行，即用理性来约束自然感情，使自然感情流动在一个有节制的状态下。\n3. 忧伤是中国诗歌的一个特点，这个忧伤的调子的产生的原因可能很复杂，但是我们来解释一下的话，那它跟这种情绪的克制有关系。暴怒他不会忧伤，狂喜也不会忧伤，因为情绪得到这个最大的一种体现，一种爆发式的宣泄，它非常的快乐或者非常的愤怒。他不会是忧伤，尽管情绪很强。只有克制状态的感情是会忧伤的，而这个忧伤跟什么有关？跟感情表达的委婉有关，他会往委婉的方向发展，而且它会表现的细致。\n\n### 《汉广》\n\n> ​\t\t\t\t\t **国风·周南《汉广》**\n>\n> 南有乔木，不可休思；汉有游女，不可求思。\n>\n> 汉之广矣，不可泳思；江之永矣，不可方思。\n>\n> 翘翘错薪，言刈其楚；之子于归，言秣其马。\n>\n> 汉之广矣，不可泳思；江之永矣，不可方思。\n>\n> 翘翘错薪，言刈其蒌；之子于归，言秣其驹。\n>\n> 汉之广矣，不可泳思；江之永矣，不可方思。\n>\n> \n>\n> **译文**\n>\n> 南山乔木大又高，树下不可歇阴凉。汉江之上有游女，不可去追求。\n> 汉江滔滔宽又广，想要渡过不可能。江水悠悠长又长，无法乘筏渡过。\n> 柴草丛丛错杂生，用刀割取那荆条。姑娘就要出嫁了，赶快喂饱她的马。\n> 汉江滔滔宽又广，想要渡过不可能。江水悠悠长又长，无法乘筏渡过。\n> 柴草丛丛错杂生，用刀割取那蒌蒿。姑娘就要出嫁了，赶快喂饱小马驹。\n> 汉江滔滔宽又广，想要渡过不可能。江水悠悠长又长，无法乘筏渡过。\n>\n> **注释**\n>\n> 乔木：高大的树木。\n> 休：息也。指高木无荫，不能休息。思：语气助词，与下文“思”同。\n> 汉：汉水，长江支流之一。\n> 游女：汉水之神，或谓游玩的女子。\n> 江：江水，即长江。\n> 永：水流长也。\n> 方：桴，筏。此处用作动词，意谓坐木筏渡江。\n> 翘翘（qiáo）：本指鸟尾上的长羽，比喻杂草丛生；或以为指高出貌。\n> 错薪：丛杂的柴草。古代嫁娶必以燎炬为烛，故《诗经》嫁娶多以折薪、刈楚为兴。\n> 刈（yì）：割。楚：灌木名，即牡荆。\n> 归：嫁也。\n> 秣（mò）：喂马。\n> 蒌（lóu）：蒌蒿，也叫白蒿，嫩时可食，老则为薪。\n> 驹（jū）：小马\n\n1. 汉广里面写到这个汉水和长江，也就汉水和长江交汇的地方。很简单也就是武汉。\n2. 在世界文学里有这样一种现象，把一个女性想象成完美的，且在这种完美当中寄托着对人生的最高的期待。\n3. 有一次在研究生课上讲红楼梦，我说这个世界上那就最完美的女孩都是男人创造出来的，世界上并不存在那么完美的女孩，那么它是一种文学，创造这种女神是为了使自己生活更有美好，更有质量。有一个女同学站起来说，陆老师，她说我们女生从来不这样想象男生，哈哈哈，这给我打击很重。他的意思说你们男人不值得这么想象，嗯，我们女人尽管没有那么美好，至少她还值得想象，你们男人根本就不值得想象。\n4. 为什么这个南方有乔陌，他不可不能够休息，有的书解释的这个很一本正经说那个乔木都长得很高大，树枝虽然高大，可是它的树叶很少，所以它是不可以休息的。这样解释就没读头了。它的意思就跟后面那个游女你不可求是一样的，就是好东西它不一定说是属于你。就像银行里有很多钱你拿不走。\n5. 我们在世界上就是说会把我们的幻想加在一个对象上，这个对象和幻想结合在一起的时候，就你觉得这个对象就是你的幻想，其实它是不一样的。可能这个幻想它会和你的这个对象，最后以一种非常那不堪的方式崩裂开来。\n6. 《二十六个男人和一个少女》中的主人公是26个面包作坊的工人和16岁少女塔尼娅的故事。整天劳作、过着非人生活的26个工人的唯一乐趣就是塔尼娅每天来向他们讨要面包卷。虽然生存条件恶劣，他们的内心仍保持着那份对美的纯洁追求和向往。塔尼娅是他们心目中的美丽、纯洁、高尚的象征和代名词。可是，有一天，他们的女神被一个无耻的大兵勾引去了。26个男人唯一的美好情趣被剥夺了。\n\n### 《叔于田》\n\n> ​\t\t\t\t\t\t\t**国风·郑风《叔于田》**\n>\n> 叔于田，巷无居人。岂无居人？不如叔也。洵美且仁。\n>\n> 叔于狩，巷无饮酒。岂无饮酒？不如叔也。洵美且好。\n>\n> 叔适野，巷无服马。岂无服马？不如叔也。洵美且武。\n>\n> \n>\n> **译文\n> \n> **叔去打猎出了门，巷里就像没住人。难道真的没住人？没人能与叔相比，那么英俊又慈仁。\n> 我叔出门去打猎，巷里无人在饮酒。真的没人在饮酒？什么人都不如叔，那么英俊又清秀。\n> 我叔骑马去野外，巷里没人会骑马。真的没人会骑马？没人能够比过他，确实英俊力又大。\n>\n> **注释\n> \n> **叔：古代兄弟次序为伯、仲、叔、季，年岁较小者统称为叔，此处指年轻的猎人。于：去，往。田：同“畋（tián）”，打猎。\n> 巷：居里中的小路。\n> 洵（xún）：真正的，的确。仁：指温厚，慈爱。\n> 狩：冬猎为“狩”，此处为田猎的统称。\n> 饮酒：这里指宴饮。\n> 好：指品质好，性格和善。\n> 适：往。野：郊外。\n> 服马：骑马之人。一说用马驾车。\n> 武：英武。\n\n1. 最好的一种解释的方法就是这是女孩夸自己的情人，我就读上去觉得真是很像，只有特别喜欢那个男生的人才会这么说，要一个男生去赞美男生说这样说的话，哈哈哈，有问题。所以我们再读一遍，你会觉得这里面的味道说与甜。我有一次跟一群朋友，他们专门请我去讲时候，我就讲这个，有一个女生当场就把这个诗发给她老公，告诉她这是女人夸男人的。除了你，世界上就没有会骑马的人，没有会喝酒的人，也没有会打牌的人。\n","tags":["骆玉明古典诗词鉴赏"],"categories":["classical_poems"]},{"title":"Z与过去（2）","url":"/2024/07/21/Z与过去（2）/","content":"\n22年冬天，我去郑州市区办事。从地铁站出来，站在南阳路朝北看，寒风过境，行人稀疏，俨然一副北方城市的严冬街景。我张大眼睛，呆了好久才意识到好多事已经是10年前了。\n\n好像就在昨天，这里还是盛夏，阳光透过高大的梧桐树，而我和Z还是两个毛头小子。烈日当头，我们在学校附近的三角公园打乒乓球(该公园有一条鹅卵石铺的路，Z觉得它俯视像一条三角内裤，故而赋名)。我问Z还有5分钟就上课了，还不走吗？Z说不急，再打三个球。紧接着就使劲抽了一个球，自己骑上车跑了。我捡过球在后面追，穿过老式楼房曲折的小巷，再穿过喧嚣的马路，最后冲过校门。预备铃响起时，我们通常已经到楼梯拐角，有时能远远看见毛毛，有时则不行。\n\n或许是毛毛对这种出格行为惩罚太轻，我后来一看到女老师就按捺不住招惹他们的冲动，因此没少吃苦头。\n","tags":["Z"],"categories":["what_i_see"]},{"title":"Z与过去（1）","url":"/2024/07/21/Z与过去（1）/","content":"\n20年的时候，Z退伍重新进入大学。因为学籍档案的事要回一趟高中。Z对我说，这几天七中校园开放日，我们可以一起去。\n\n我们进七中办事，却得知管理档案的老师今天不在。我们本可以直接离开，但Z却煽情地说他想在校园里转转。\n\n从教学楼出来就看到了广场，Z便说起三级广场名字的由来：比如树人广场是因为这里种了100棵梧桐树。\n\nZ指着操场说，他们曾经在这里开趣味运动会，整个年级的人把脚上的一只鞋子扔进去堆成山，然后再去找。Z说起7中以前的校本课程里有驾驶课，所以这里才会有荒废的驾校。Z说他曾在秋天，透过窗户，看到一个女生独自走过楼旁，那时风拂过路面，金黄的杏叶卷起浪潮，风也卷起她的头发。Z说了好多，到后面我都没有印象了。我只记得，Z说起这些的时候并没有看我。\n\n回程的时候，Z问我是否还记得之前我们去一中的事（我和Z曾在中考前一起去郑州一中校园参观，看到精致景观，zyz先生，美丽的校园，无不憧憬。但因为分数的原因，我俩都没报，手表注)。\n\n哈哈，当时也没想到命运给我的其实是最好的。\n\n\n\n","tags":["Z"],"categories":["what_i_see"]},{"title":"MySQL基础查询","url":"/2024/07/21/MySQL基础查询/","content":"\n## 基本结构\n\n```sql\nselect selection_list /*要查询的字段，多个字段用逗号隔开*/\nfrom table_list /*要查询的表名称*/\n[where condition /*筛选记录的条件*/\n group by grouping_clounms /*对结果进行分组*/\n having condition /*对分组后的记录进行条件筛选*/\norder by cloumns /*对结果进行排序*/\n limit  /*对记录总数进行限定*/]\n```\n\n- select后面可以是表中的字段，常量值，表达式，函数；查询的结果是一个虚拟的表格；\n\n执行顺序：\n\n**FROM** - 确定数据源，执行表连接和子查询。\n\n**WHERE** - 筛选满足条件的记录。\n\n**GROUP BY** - 根据一个或多个列对结果进行分组。\n\n**HAVING** - 筛选分组后的结果集。\n\n**SELECT** - 投影选择所需的列。\n\n**ORDER BY** - 对结果集进行排序。\n\n**LIMIT** - 返回指定数量的记录。\n\n\n\n基础查询，查询所有的列\n\n```sql\nSELECT * FROM t_stu;\n-- 指定字段进行查询\nSELECT sid,sname FROM t_stu;\n```\n\n条件查询\n\n- 按条件表达式筛选，> ， < ， = ， != ， <>（不等于），  >= ，<=\n- 逻辑表达式筛选 &&（and）， || (or)， **and ,or,not(取反)**\n- 模糊查询 like，between and（not between and） ,in(列表中的值不支持通配符), is null(is not null)\n\n```sql\n-- 指定某一个条件进行查询\nSELECT * FROM t_stu WHERE courseid=2 \n-- AND 是两个条件都要满足\nSELECT * FROM t_stu WHERE courseid=2 AND score>60;\n-- 查询sid为 1，6，8的记录，属于某个集合\nSELECT * FROM t_stu WHERE sid IN(1,6,8);\n-- 查询记录某个字段为null \nSELECT * FROM t_stu WHERE sgender is null;\nSELECT * FROM  tb_stu WHERE updatetime IS NOT null;\n--  查询成绩在70到90区间范围内的记录\nSELECT * FROM t_stu WHERE score BETWEEN 70 AND 90;\n-- 性别非男的记录\nselect * FROM t_stu WHERE sgender <> 'm';\nselect * FROM t_stu WHERE sgender != 'm';\n```\n\n注意：\n\n%：表示0或任意多个字符\n\n_:任意一个字符\n\nbetween ...and... 是左右两边都闭合的。\n\n```sql\n-- 名字由3个字母组成\nSELECT * FROM t_stu WHERE sname LIKE '___';\n-- 名字由j 开头\nSELECT * FROM t_stu WHERE sname LIKE 'j%';\n-- 第二个字母为a 的学生记录\nSELECT * FROM t_stu WHERE sname LIKE '_a%';\n-- 查询姓名中包含字母a的记录\nSELECT * FROM t_stu WHERE sname LIKE '%a%';\n```\n\n去重查询&起别名\n\n- 表或者字段还可以起别名，起别名是便于理解，如果查询的字段有重名情况使用别名可以区分，AS可省略 使用空格\n\n```sql\n--  查询学生表中的所有性别\nSELECT DISTINCT sgender FROM t_stu ;\n-- 给查询出的字段起别名 AS是可以省略的 使用空格\nSELECT age AS 年龄,sname AS 姓名 FROM  tb_stu;\nSELECT sid a,sname b,sgender gender,score c FROM t_stu;\n```\n\n排序 order by子句可以跟单个字段，多个字段，表达式，函数，别名\n\n```sql\n-- 查询所有学生记录，按成绩进行降序排序\n-- 缺省是ASC升序\nSELECT * FROM t_stu ORDER BY score DESC;\n-- 查询所有学生记录，首先先按成绩进行降序排序，如果成绩相同，按名字进行升序排序\nSELECT * FROM t_stu ORDER BY score DESC, sname ASC;\n```\n\n组函数/聚合函数/分组函数(方法，已经封装好的功能直接调用)\n\n用作统计使用，又称为聚合函数或者统计函数或者组函数\n\n- 聚合函数是用来做**纵向运算**的函数：\n\n- COUNT(字段)：统计指定列不为NULL的记录行数；一般使用count（*）统计行数\n- MAX(字段)：计算指定列的最大值，如果指定列是字符串类型，那么使用字符串排序运算；\n- MIN(字段)：计算指定列的最小值，如果指定列是字符串类型，那么使用字符串排序运算；\n- SUM(字段)：计算指定列的数值和，如果指定列类型不是数值类型，那么计算结果为0；\n- AVG(字段)：计算指定列的平均值，如果指定列类型不是数值类型，那么计算结果为0；\n\nsum,avg一般处理数值型,\n\nmax，min,count可以处理任意数据类型\n\n分组函数都忽略了null值，可以和distinct搭配使用\n\n**注意点：**组函数可以出现多个，但是不能嵌套；如果没有group by 子句，结果集中所有行数作为一组\n\n```sql\nSELECT COUNT(employee_id) AS total_employees FROM salaries;\nSELECT SUM(salary) AS total_salaries FROM salaries;\nSELECT AVG(salary) AS average_salary FROM salaries;\nSELECT MAX(salary) AS highest_salary FROM salaries;\nSELECT MIN(salary) AS lowest_salary FROM salaries;\n```\n\ngroup by分组查询\n\n查询出来的字段要求是group by后的字段，**查询字段中可以出现组函数和分组字段**\n\ngroup by后面可以跟聚合函数 可以起别名\n\n```sql\n-- \t查询每个部门的部门编号和每个部门的工资和\nSELECT deptno,SUM(sal) FROM emp GROUP BY deptno;\n-- \t查询每个部门的部门编号以及每个部门的人数\nSELECT deptno,SUM(sal),COUNT(1) FROM emp GROUP BY deptno;\n-- \t查询每个部门的部门编号以及每个部门员工工资大于1500的人数：\nSELECT deptno,COUNT(1) FROM emp WHERE sal>1500 GROUP BY deptno;\n```\n\n按多个字段分组，后面字段一致的为一组\n\n```sql\n-- 按job进行分类\nSELECT COUNT(*),job FROM emp GROUP BY job;\n-- 按job和mgr进行分类\nSELECT COUNT(*),job,mgr FROM emp GROUP BY job,mgr;\n```\n\nhaving子句\n\nwhere是对分组前进行过滤；having是对分组后进行过滤\n\n**where中不能出现分组/聚合函数**，having中可以出现\n\nwhere是比分组先执行的，having是在分组之后执行的；\n\n having后面可以跟别名\n\n```sql\n-- 查询工资总和大于9000的部门编号以及工资和：\nSELECT deptno,sum(sal)  FROM emp GROUP BY deptno HAVING sum(sal)>9000;\n-- having中使用别名\nSELECT deptno,sum(sal) 总薪资 FROM emp GROUP BY deptno HAVING 总薪资>9000;\n```\n\n```sql\n-- 查询部门员工个数大于3的，having中使用了别名\nSELECT COUNT(1) cc,deptno FROM emp GROUP BY deptno HAVING cc>3;\n```\n\nlimit \n\n```sql\n-- 第一位表示起始索引位置（从0开始），第二位表示个数；在分页中会使用\nSELECT * FROM emp LIMIT 1,5;\nSELECT * FROM emp LIMIT 5; 等价与 SELECT * FROM emp LIMIT 0, 5;\n```\n\nselect完整语法使用\n\n```sql\nSELECT deptno,count(1),sum(sal) allsum FROM emp WHERE sal>1500 GROUP BY deptno HAVING sum(sal)>7000 ORDER BY allsum desc LIMIT 2;\n```\n\n## 多表查询\n\n内连接\n\n- 多表等值连接的结果是多表的交集部分，N表连接，至少需要N-1个连接条件，没有顺序要求，一般起别名\n\n- 非等值连接，只要不是等号连接的都是非等值连接\n\n外连接，有主表有从表，主表肯定会显示完整的内容\n\n- 左外连接，以左表为主\n\n- 右外连接，以右表为主\n\n ON后面的条件（ON条件）和WHERE条件的区别：\n\n- ON条件：是过滤两个链接表笛卡尔积形成中间表的约束条件。\n\n\n- WHERE条件：在没有ON的单表查询中，是限制物理表或者中间查询结果返回记录的约束。在两表或多表连接中是限制连接形成最终中间表的返回结果的约束。\n\n  建议：ON只进行连接操作，WHERE只过滤中间表的记录\n\n单纯做匹配连接用 join\n\n需要得到笛卡尔积用 cross join\n\n连接时需要某个表全部保留用 left join\n\n自连接，通过别名，将同一张表视为多张表；同一张表中某个字段要去关联另外一个字段\n\n```sql\n-- 查询员工姓名和员工的老板的名称\nSELECT e1.empno,e1.ename,e2.empno,e2.ename  FROM emp e1, emp e2 WHERE e1.mgr=e2.empno;\n```\n\n子查询(独立子查询)\n\n```sql\n-- 查询工资为20号部门平均工资的员工信息\nSELECT * FROM emp WHERE sal>(SELECT AVG(sal) FROM emp GROUP BY deptno HAVING deptno=20);\n```\n\n相关子查询\n\n```mysql\nSELECT employee_name, salary\nFROM employees e\nWHERE salary > (SELECT AVG(salary)\n                FROM employees e2\n                WHERE e2.department_id = e.department_id);\n```\n\n**EXISTS**\n\n```mysql\nSELECT column1, column2, ...\nFROM table1\nWHERE EXISTS (subquery);\n```\n\n**返回布尔值：** `EXISTS` 子查询返回布尔值（`TRUE` 或 `FALSE`）。如果子查询返回至少一行数据，则 `EXISTS` 返回 `TRUE`，否则返回 `FALSE`。\n\n**效率高：** 在很多情况下，`EXISTS` 子查询的执行效率较高，因为一旦找到符合条件的行，它就会停止扫描。\n\n**与 `NOT EXISTS` 结合使用：** `NOT EXISTS` 用于检查子查询是否没有返回任何行。\n\nExists 往往使用于要查询的字段都在一个表，其他表的字段是用来过滤的情况下，会提高效率。如果涉及获取多表字段，exists并没有优势。\n\n```mysql\nSELECT department_id, department_name\nFROM departments d\nWHERE EXISTS (SELECT 1\n              FROM employees e\n              WHERE e.department_id = d.department_id);\n\n```\n\n**WITH**\n\nWITH 语句在 SQL 中用于定义一个或多个公用表表达式（Common Table Expressions, CTEs）。公用表表达式是一种临时结果集，它可以在主查询中引用，使得查询更具可读性和维护性。`WITH` 语句通常用于简化复杂的查询，尤其是在需要重复使用相同的子查询时。\n\n```mysql\nWITH department_avg_salary AS (\n    SELECT department_id, AVG(salary) AS avg_salary\n    FROM employees\n    GROUP BY department_id\n)\nSELECT e.employee_name, e.salary\nFROM employees e\nJOIN department_avg_salary d ON e.department_id = d.department_id\nWHERE e.salary > d.avg_salary;\n```\n\n## 集合查询\n\n- union--将两个表做行拼接，同时自动删除重复的行。\n- union all---将两个表做行拼接，保留重复的行。\n- 使用union组合查询时，只能使用一条order by字句，它必须位于最后一条select语句之后，因为对于结果集不存在对于一部分数据进行排序，而另一部分用另一种排序规则的情况。\n\nINTERSECT（交） 和  EXCEPT（差）是MySQL 在 8.0.31 版本中开始支持\n\n## 函数\n\n**注意：**MySQL中的+就只有运算符的功能；会试图将字符型数值转换为数值型再继续操作，转换失败则转为0；若其中有null则结果为null；字符串可以使用concat函数拼接；\n\n### 聚合函数\n\n除了常见的五个聚合函数（`COUNT`、`SUM`、`AVG`、`MIN`、`MAX`），MySQL 还提供了一些其他有用的聚合函数：\n\n**GROUP_CONCAT()**\n\n定义\n\n```mysql\nGROUP_CONCAT([DISTINCT] expr [,expr ...] [ORDER BY {unsigned_integer | col_name | expr} [ASC | DESC] [,col_name ...]] [SEPARATOR str_val])\n\n```\n\n- `DISTINCT`：可选，用于删除重复值。\n\n- `expr`：要连接的列或表达式。\n\n- `ORDER BY`：可选，指定结果的排序顺序。\n\n- `SEPARATOR`：可选，指定结果中使用的分隔符，默认为逗号。\n\n```sql\n# 单列合并，默认以逗号分隔\nselect a,group_concat(name) as tn from t group by id;\n# 分号\nSELECT GROUP_CONCAT(name ORDER BY name ASC SEPARATOR '; ')  FROM employees GROUP BY department;\n```\n\n**STD()**\n\n计算标准差\n\n```mysql\nSELECT STD(salary) FROM employees GROUP BY department;\n# same as\nSELECT STDDEV(salary) FROM employees GROUP BY department;\n```\n\n**VARIANCE()**\n\n计算方差\n\n```mysql\nSELECT VARIANCE(salary) FROM employees GROUP BY department;\n# same as\nSELECT VAR_POP(salary) FROM employees GROUP BY department;\n```\n\n**BIT_AND(),BIT_OR(),BIT_XOR()**\n\n按位与，或，异或\n\n这些按位聚合函数 (`BIT_AND()`, `BIT_OR()`, `BIT_XOR()`) 在处理权限位、标志位、或其他需要按位操作的数据时有用。(需要搭配数据定义使用)\n\n```mysql\n# 查看最高权限\nSELECT BIT_XOR(access_level) FROM user_permissions GROUP BY user_id;\n```\n\n **JSON_ARRAYAGG() 和 JSON_OBJECTAGG()**\n\n`JSON_ARRAYAGG(expr)`：要聚合成 JSON 数组的列或表达式。\n\n`JSON_OBJECTAGG(key_expr, value_expr)`：要聚合成 JSON 对象的键和值的列或表达式。\n\n```mysql\nSELECT JSON_ARRAYAGG(name) FROM employees GROUP BY department;\n\nSELECT JSON_OBJECTAGG(id, name) FROM employees GROUP BY department;\n```\n\n\n\n### 字符串函数\n\nMySQL 提供了许多常用的字符串函数，以下是一些常用字符串函数的定义、参数、默认值和返回值：\n\n**CONCAT()**\n\n**定义：**\n\n```sql\nCONCAT(str1, str2, ...)\n```\n\n- **参数：**`str1, str2, ...`：要连接的字符串。\n\n- **返回值：**返回连接后的字符串。如果任一参数为 `NULL`，则返回 `NULL`。\n\n**示例：**\n\n```sql\nSELECT CONCAT('Hello', ' ', 'World');\n# Hello World\n```\n\n**CONCAT_WS()**\n\n**定义：**\n\n```sql\nCONCAT_WS(separator, str1, str2, ...)\n```\n\n- **参数：**`separator`：要使用的分隔符。`str1, str2, ...`：要连接的字符串。\n\n- **返回值：**返回用分隔符连接的字符串。如果任一参数为 `NULL`，则忽略该参数。\n\n**示例：**\n\n```sql\nSELECT CONCAT_WS(',', 'Apple', 'Orange', 'Banana');\n# Apple,Orange,Banana\n```\n\n**LENGTH()**\n\n**定义：**\n\n```sql\nLENGTH(str)\n```\n\n- **参数：**`str`：要计算长度的字符串。\n\n- **返回值：**返回字符串的字节长度。\n\n**示例：**\n\n```sql\nSELECT LENGTH('Hello');\n# 5\n```\n\n**CHAR_LENGTH()**\n\n**定义：**\n\n```sql\nCHAR_LENGTH(str)\n```\n\n- **参数：**`str`：要计算长度的字符串。\n\n- **返回值：**返回字符串的字符长度。\n\n**示例：**\n\n```sql\nSELECT CHAR_LENGTH('Hello');\n# 5\n```\n\n**LOWER(), UPPER()**\n\n**SUBSTRING()**\n\n**定义：**\n\n```sql\nSUBSTRING(str, pos, len)\n```\n\n- **参数：**`str`：源字符串。`pos`：起始位置（从1开始）`len`：要提取的长度（可选）。\n\n- **返回值：**返回从指定位置开始，长度为 `len` 的子字符串。如果 `len` 未指定，则返回从 `pos` 开始到字符串末尾的所有字符。\n\n**示例：**\n\n```sql\nSELECT SUBSTRING('Hello World', 7, 5);\n# World\n```\n\n**TRIM()**\n\n**定义：**\n\n```sql\nTRIM([{BOTH | LEADING | TRAILING} [remstr] FROM] str)\n```\n\n- **参数：**\n  - `{BOTH | LEADING | TRAILING}`：指定要移除的字符位置，默认为 `BOTH`。\n  - `remstr`：要移除的字符（可选），默认为空格。\n  - `str`：要修剪的字符串。\n\n- **返回值：**返回移除指定字符后的字符串。\n\n**示例：**\n\n```sql\nSELECT TRIM('  Hello World  ');\n# Hello World\n```\n\n**REPLACE()**\n\n**定义：**\n\n```sql\nREPLACE(str, from_str, to_str)\n```\n\n- **参数：**\n  - `str`：源字符串。\n  - `from_str`：要替换的子字符串。\n  - `to_str`：替换后的子字符串。\n\n- **返回值：**返回替换指定子字符串后的新字符串。\n\n**示例：**\n\n```sql\nSELECT REPLACE('Hello World', 'World', 'MySQL');\n```\n\n**结果：**\n\n```\nHello MySQL\n```\n\n**INSTR()**\n\n**定义：**\n\n```sql\nINSTR(str, substr)\n```\n\n- **参数：**\n  - `str`：源字符串。\n  - `substr`：要查找的子字符串。\n\n- **返回值：**返回子字符串在源字符串中首次出现的位置（从1开始）。如果未找到，返回 0。\n\n**示例：**\n\n```sql\nSELECT INSTR('Hello World', 'World');\n# 7\n```\n\n### 数学函数\n\n**ABS(x)**：返回x的绝对值，**SQRT(x)**：返回一个数的平方根\n\n**BIN(x)**：返回x的二进制，OCT返回八进制，HEX返回十六进制\n\n**CEILING(x)**：返回大于x的最小整数值，**FLOOR(x)**：返回小于x的最大整数值\n\n**POW(x,y)**：返回x的y次方，**EXP(x)**：返回e的x次方\n\n**GREATEST(x1,x2,...,xn)**：返回集合中最大的值，**LEAST(x1,x2,...,xn)**：返回集合中最小的值\n\n**LOG(x,y)**：返回x的以y为底的对数，**LN(x)**：返回x的自然对数\n\n**MOD(x,y)**：返回x/y的模（余数）\n\n**PI()**：返回pi的值（圆周率）\n\n**RAND()**：返回０到１内的随机值,可以通过提供一个参数(种子)使RAND()随机数生成器生成一个指定的值。\n\n**ROUND(x,y)**：返回参数x的四舍五入的有y位小数的值\n\n**SIGN(x)**：返回代表数字x的符号的值\n\n**TRUNCATE(x,y)**：返回数字x截短为y位小数的结果\n\n### 日期函数\n\n**获取**\n\nnow() 返回日期+时间\n\ncurdate()返回系统日期，不包含时间\n\ncurtime() 返回当前时间，不包含日期\n\n**提取**\n\nYEAR(date)函数，用于提取时间字段的年返回的格式为\"YYYY\"\n\nMONTH(date)函数，用于提取时间字段的月，返回的格式为\"mm\"，若月份前有0会忽略\n\nMONTHNAME(date)提取月名August\n\nDAY(date)函数，用于提取时间字段的日期，返回的格式为\"dd\"，若日期前有0会忽略\n\nHOUR(date)函数，用于提取时间字段的小时，返回的格式为\"HH\"，若小时前有0会忽略\n\nMINUTE(date)函数，用于提取时间字段的分钟，返回的格式为\"ii\"，若分钟前有0会忽略\n\nSECOND(date)函数，用于提取时间字段的秒，返回的格式为\"ss\"，若秒前有0会忽略\n\nDATE(date)函数，返回的格式为\"YYYY-mm-dd\"，\n\nTIME(date)函数，用于提取时间字段的时间，例如'2020-05-26 11:11:11'，返回的格式为\"HH:ii:ss\"\n\nWEEK(date)函数,返回时间字段是一年中的第几周（1-53）\n\n**转换**\n\n`DATE_FORMAT()` 函数在 MySQL 中用于将日期或时间数据格式化为字符串，根据指定的格式显示。\n\n```mysql\nDATE_FORMAT(date, format)\n```\n\n`format` 字符串中可以使用以下格式说明符：\n\n- 以下是 `DATE_FORMAT()` 函数中常用的 `format` 字符串的转换表格：\n\n  | 格式说明符 |                      描述                       |\n  | :--------: | :---------------------------------------------: |\n  |    `%a`    |             缩写的星期名 (Sun..Sat)             |\n  |    `%b`    |              缩写的月名 (Jan..Dec)              |\n  |    `%c`    |                月，数字 (0..12)                 |\n  |    `%D`    |     带英文前缀的月中的天 (1st, 2nd, 3rd, …)     |\n  |    `%d`    |             月中的天，数字 (00..31)             |\n  |    `%e`    |             月中的天，数字 (0..31)              |\n  |    `%f`    |                      微秒                       |\n  |    `%H`    |                  小时 (00..23)                  |\n  |    `%h`    |                  小时 (01..12)                  |\n  |    `%I`    |                  小时 (01..12)                  |\n  |    `%i`    |               分钟，数字 (00..59)               |\n  |    `%j`    |               年中的天 (001..366)               |\n  |    `%k`    |                  小时 (0..23)                   |\n  |    `%l`    |                  小时 (1..12)                   |\n  |    `%M`    |            月名 (January..December)             |\n  |    `%m`    |                月，数字 (00..12)                |\n  |    `%p`    |                    AM 或 PM                     |\n  |    `%r`    |       时间，12 小时（hh:mm:ss AM 或 PM）        |\n  |    `%S`    |                   秒 (00..59)                   |\n  |    `%s`    |                   秒 (00..59)                   |\n  |    `%T`    |            时间，24 小时（hh:mm:ss）            |\n  |    `%U`    |        周 (00..53)，星期日是星期的第一天        |\n  |    `%u`    |        周 (00..53)，星期一是星期的第一天        |\n  |    `%V`    | 周 (01..53)，星期日是星期的第一天，与 `%X` 使用 |\n  |    `%v`    | 周 (01..53)，星期一是星期的第一天，与 `%x` 使用 |\n  |    `%W`    |            星期名 (Sunday..Saturday)            |\n  |    `%w`    |         周中的天 (0=Sunday..6=Saturday)         |\n  |    `%X`    |             年，4 位，与 `%V` 使用              |\n  |    `%x`    |             年，4 位，与 `%v` 使用              |\n  |    `%Y`    |                    年，4 位                     |\n  |    `%y`    |                    年，2 位                     |\n\n\n常用的格式\n\n```mysql\n'%Y-%m-%d':2024-08-02\n'%Y-%m-%d %H:%i:%s'2024-08-02 14:35:09\n'%W, %M %d, %Y %H:%i:%s' Friday, August 02, 2024 14:35:09\n'%M %Y' August 2024\n'%Y-%m-%d %r' 2024-08-02 02:30:45 PM\n'%W' Friday\n```\n\n`STR_TO_DATE()` 函数用于将字符串按指定格式转换为日期。\n\n```mysql\nSTR_TO_DATE(str, format)\n```\n\n**计算**\n\n**DATE_ADD**\n\n对指定的日期加上一个时间间隔。\n\n```mysql\nDATE_ADD(date, INTERVAL value unit)\n\nSELECT DATE_ADD('2024-08-02', INTERVAL 10 DAY) AS new_date;\n-- 示例结果: '2024-08-12'\n```\n\n**DATE_SUB**\n\n对指定的日期减去一个时间间隔。\n\n```mysql\nDATE_SUB(date, INTERVAL value unit)\n\nSELECT DATE_SUB('2024-08-02', INTERVAL 1 MONTH) AS new_date;\n-- 示例结果: '2024-07-02'\n```\n\n**DATEDIFF**\n\n计算两个日期之间的天数差。\n\n```mysql\nDATEDIFF(date1, date2)\n\nSELECT DATEDIFF('2024-08-02', '2024-07-01') AS days_diff;\n-- 示例结果: 32\n```\n\n**TIMESTAMPDIFF**(unit, datetime1, datetime2)\n\n计算两个日期或时间之间的差异，单位可以是秒、分钟、小时、天等。\n\n```mysql\nTIMESTAMPDIFF(unit, datetime1, datetime2)\n\nSELECT TIMESTAMPDIFF(DAY, '2024-07-01', '2024-08-02') AS days_diff;\n-- 示例结果: 32\n```\n\n单位以指定的interval为准，常用可选：\n\n- SECOND 秒，\n\n- MINUTE 分钟（返回秒数差除以60的整数部分）\n\n- HOUR 小时（返回秒数差除以3600的整数部分）\n\n- DAY 天数（返回秒数差除以3600*24的整数部分）\n\n- MONTH 月数\n\n- YEAR 年数\n\n**TIMESTAMPADD**(unit, value, datetime)\n\n```mysql\nTIMESTAMPADD(unit, value, datetime)\n\nSELECT TIMESTAMPADD(MONTH, 2, '2024-08-02') AS new_date;\n-- 示例结果: '2024-10-02'\n```\n\n\n\n### 窗口函数\n\n**MySQL 8.0** 引入了窗口函数\n\n语法\n\n```sql\n[你要的操作] OVER ( PARTITION BY  <用于分组的列名>\n                    ORDER BY <按序叠加的列名> \n                    ROWS|RANGE <窗口滑动的数据范围> )\n\n```\n\n<窗口滑动的数据范围> 用来限定 [你要的操作] 所运用的数据的范围，具体有如下这些：\n\n```\n当前 - current row\n之前的 - preceding\n之后的 - following\n无界限 - unbounded\n表示从前面的起点 - unbounded preceding\n表示到后面的终点 - unbounded following\n\n举例\n取当前行和前五行：ROWS between 5 preceding and current row --共6行\n取当前行和后五行：ROWS between current row and 5 following --共6行\n取前五行和后五行：ROWS between 5 preceding and 5 following --共11行\n取当前行和前六行：ROWS 6 preceding（等价于between...and current row） --共7行\n这一天和前面6天：RANGE between interval 6 day preceding and current row --共7天\n这一天和前面6天：RANGE interval 6 day preceding（等价于between...and current row） --共7天\n字段值落在当前值-100到+200的区间：RANGE between 100 preceding and 200 following  --共301个数值\n```\n\n操作可以是：\n\n排序函数\n\n```sql\n(1) ROW_NUMBER(): 依次排序，不会出现相同排名 1 2 3 4 5 6 7 8\n\n(2) RANK(): 出现相同排名时，跳跃排序 1 1 3 4 5 5 7\n\n(3) DENSE_RANK(): 出现相同排名时，连续排序 1 1 2 3 3 4 5 6 6\n```\n\n前后行\n\n```sql\nLAG(column_name, offset, default_value): 用于访问当前行之前的行中的值。默认是当前行前面的1行\n\nLEAD(column_name, offset, default_value): 用于访问当前行之后的行中的值。默认是当前行后面的1行\n\n# column_name: 指定要返回的列的名称。\n# offset (可选): 指定要向后移动的行数。默认值为 1。\n# default_value (可选): 如果指定的偏移量超出窗口范围，则返回的默认值。\n```\n\n聚合函数\n\n```sql\nSUM(), AVG(), MAX(), MIN()\n\n# SUM(column_name)\n```\n\n最值\n\n```sql\n# 返回窗口帧中的第一个值和最后一个值。\nFIRST_VALUE(column_name)\n\nLAST_VALUE(column_name)\n\n# 语法\nLAST_VALUE(column_name) OVER (\n    [PARTITION BY partition_expression]\n    ORDER BY sort_expression [ASC|DESC]\n    [window_frame]\n)\n注意window_frame (可选): 指定窗口帧范围，默认为 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n```\n\n\n\n\n\n### 控制流函数\n\n**IF**\n\n```sql\nIF(condition, true_value, false_value) # 根据条件返回不同的值。\n\nSELECT IF(1 > 0, 'True', 'False') AS result;\n-- 示例结果: 'True'\n```\n\n**CASE** \n\n在查询中进行条件判断，返回不同的值。\n\n```sql\nCASE expression\n    WHEN value1 THEN result1\n    WHEN value2 THEN result2\n    ...\n    ELSE default_result\nEND\n\nSELECT \n    CASE \n        WHEN age < 18 THEN 'Minor'\n        WHEN age BETWEEN 18 AND 65 THEN 'Adult'\n        ELSE 'Senior'\n    END AS age_group\nFROM users;\n\n# 另一种case\nCASE\nWHEN [conditional test 1] THEN[result 1]\nWHEN [conditional test 2] THEN[result 2]\nELSE [default result]\nEND\n```\n\n**IFNULL**\n\n```sql\nIFNULL(expression, alt_value) #如果表达式为 NULL，则返回替代值。\n\nSELECT IFNULL(phone_number, 'No Phone') AS phone;\n-- 如果 phone_number 为 NULL，则返回 'No Phone'\n```\n\n**NULLIF**\n\n```sql\nNULLIF(expression1, expression2) #如果两个表达式相等，则返回 NULL，否则返回第一个表达式的值。\n\nSELECT NULLIF(score, 0) AS adjusted_score;\n-- 如果 score 为 0，则返回 NULL，否则返回 score\n```\n\n**COALESCE**\n\n```sql\nCOALESCE(expression1, expression2, ..., expressionN) #返回第一个非 NULL 的表达式值。\n\nSELECT COALESCE(email, 'No Email') AS contact_email;\n-- 如果 email 为 NULL，则返回 'No Email'\n```\n\n**LOOP**\n\n在存储过程中创建循环。\n\n```sql\nDELIMITER //\n\nCREATE PROCEDURE loop_example()\nBEGIN\n    DECLARE counter INT DEFAULT 0;\n    loop_start: LOOP\n        SET counter = counter + 1;\n        IF counter > 5 THEN\n            LEAVE loop_start;\n        END IF;\n        SELECT counter;\n    END LOOP;\nEND //\n\nDELIMITER ;\n```\n\n**REPEAT**\n\n在存储过程中创建循环，直到条件为真才退出循环。\n\n```sql\nDELIMITER //\n\nCREATE PROCEDURE repeat_example()\nBEGIN\n    DECLARE counter INT DEFAULT 0;\n    REPEAT\n        SET counter = counter + 1;\n        SELECT counter;\n    UNTIL counter > 5\n    END REPEAT;\nEND //\n\nDELIMITER ;\n```\n\n**WHILE**\n\n在存储过程中创建循环，条件为真时执行。\n\n```sql\nDELIMITER //\n\nCREATE PROCEDURE while_example()\nBEGIN\n    DECLARE counter INT DEFAULT 0;\n    WHILE counter <= 5 DO\n        SET counter = counter + 1;\n        SELECT counter;\n    END WHILE;\nEND //\n\nDELIMITER ;\n```\n\n**LEAVE**\n\n在存储过程或循环中用于退出循环或块。\n\n```sql\nDELIMITER //\n\nCREATE PROCEDURE leave_example()\nBEGIN\n    DECLARE counter INT DEFAULT 0;\n    loop_start: LOOP\n        SET counter = counter + 1;\n        IF counter > 5 THEN\n            LEAVE loop_start;\n        END IF;\n        SELECT counter;\n    END LOOP;\nEND //\n\nDELIMITER ;\n```\n\n**ITERATE**\n\n在存储过程中的循环中跳过当前迭代，继续下一个迭代。\n\n```sql\nDELIMITER //\n\nCREATE PROCEDURE iterate_example()\nBEGIN\n    DECLARE counter INT DEFAULT 0;\n    loop_start: LOOP\n        SET counter = counter + 1;\n        IF counter = 3 THEN\n            ITERATE loop_start;\n        END IF;\n        SELECT counter;\n        IF counter >= 5 THEN\n            LEAVE loop_start;\n        END IF;\n    END LOOP;\nEND //\n\nDELIMITER ;\n```\n\n\n\n\n\n\n\n\n\n## 拓展\n\n### 聚合函数里使用表达式\n\n```sql\navg(a2.timestamp -a1.timestamp )\n```\n\nAVG括弧里直接加条件，过滤掉一些数据\n\n```sql\navg(rating<3)\n# 只计算评分小于三的均值\n```\n\n```sql\nSELECT product_id, SUM(quantity * price) AS total_sales FROM sales GROUP BY product_id;\n```\n\n\n\n### 条件计数\n\n常见的三形式\n\n1\n\n```sql\ncount(if(c.action='confirmed',1,null))\n```\n\n当然，几乎所有使用if的地方可以替换为case end 表达式。\n\n2\n\n```sql\nsum(if(c.action='confirmed',1,0))\n#更为简洁的一种形式 \nSELECT SUM(status = 'confirmed') AS confirmed_count FROM orders;\n# 在 MySQL 中，布尔表达式会返回 1（表示 TRUE）或 0（表示 FALSE）\n```\n\n3\n\n```sql\ncount(col_value='confirmed' or null)\n```\n\n解释：\n\ncol_value='confirmed'：是一个布尔表达式，如果 `col_value` 等于 `'confirmed'`，则结果为 `TRUE`，否则为 `FALSE`。\n\n1. 如果 `col_value='confirmed'` 结果为 `TRUE`，那么 `TRUE OR NULL` 结果是 `TRUE`。\n2. 如果 `col_value='confirmed'` 结果为 `FALSE`，那么 `FALSE OR NULL` 结果是 `NULL`。\n3. 如果 `col_value` 本身是 `NULL`，那么 `col_value='confirmed'` 结果是 `NULL`，而 `NULL OR NULL` 结果还是 `NULL`。\n\n- 当表达式结果为 `TRUE` 时，这一行会被计入。\n- 当表达式结果为 `NULL` 时，这一行不会被计入。\n\n注意\n\n1. count里，只有字段值为null才不计数，其他都是计数的。\n2. count 里面可以添加distinct 关键字，只计数不重复的值。\n\n建议使用**第二种**\n\n### 使用构建的字段分组\n\n可以使用自己构建的字段分组，以时间举例\n\n字段为日期，包含年月日，如果按月分组，则需要先select 里形成月，然后group by里使用\n\n```sql\nselect date_format(trans_date,'%Y-%m') as month,country,\n\n from Transactions group by month\n```\n\n当然，如果查询中不需要group by 或者 order by 分组所依据的字段，也可以直接在group by /order by里写表达式\n\n```sql\nselect  country,\nfrom Transactions group by date_format(trans_date,'%Y-%m'),country\n```\n\n### 字符串匹配\n\n**LIKE 关键字**\n\n- 包含：LIKE '%keyword%'\n- 不包含：NOT LIKE '%keyword%'\n- 先后顺序 LIKE '%keyword1%keyword2%'\n\n**使用字符串函数**\n\n- locate函数：Locate(substr,str) > ``0``，表示sub字符串包含str字符串，并返回位置，从1开始；Locate(substr,str) = ``0``，表示sub字符串不包含str字符串。\n- instr(filed,str)函数：返回str子字符串在filed字符串的第一次出现位置，为0则表示不包含该字符串\n\n**正则表达式**\n\n使用regexp '正则表达式'\n\n```sql\n//查询不以a，w，j开头的学生信息\nselect id,name from t where name regexp ‘^[^awj]’\n```\n\n## LeetCode练习题\n\n高频 SQL 50 题\n\n### 查询\n\n可回收且低脂的产品\n\n```sql\nselect product_id \nfrom Products \nwhere low_fats = 'Y' and recyclable = 'Y';\n```\n\n寻找用户推荐人\n\n```sql\nSELECT name \nFROM Customer \nWHERE  ifnull(referee_id,1) != 2;\n```\n\n大的国家\n\n```sql\nselect name, population, area \nfrom World \nwhere area>=3000000 or population>=25000000\n```\n\n文章浏览 I\n\n```sql\nselect distinct author_id id \nfrom Views \nwhere author_id = viewer_id order by author_id\n```\n\n无效的推文\n\n```sql\nselect tweet_id \nfrom Tweets \nwhere length(content) >15\n```\n\n### 连接\n\n使用唯一标识码替换员工ID\n\n```sql\nselect e1.unique_id,e.name \nfrom Employees e \nleft join EmployeeUNI e1 on e.id= e1.id\n```\n\n产品销售分析 I\n\n```sql\nselect p.product_name,s.year,s.price \nfrom Sales s \nleft join Product p on s.product_id = p.product_id;\n```\n\n进店却未进行过交易的顾客\n\n```sql\n# 子查询\nselect customer_id, count(customer_id) as count_no_trans\nfrom visits\nwhere visit_id not in (select visit_id from transactions)\ngroup by customer_id;\n\n# 也可以使用not exists\nselect customer_id, count(customer_id) as count_no_trans\nfrom visits v\nwhere not exists (select 1 from transactions t where v.visit_id = t.visit_id)\ngroup by customer_id;\n\n# 也可以使用left join\nselect customer_id, count(customer_id) count_no_trans \nfrom visits v\nleft join transactions t on v.visit_id = t.visit_id \nwhere transaction_id is null\ngroup by customer_id;\n```\n\n上升的温度\n\n```sql\n# 使用date_sub函数,date_add也可以\nselect w1.id from weather w1 \nleft join weather w2 \non DATE_SUB(w1.recordDate, INTERVAL 1 DAY) =w2.recordDate \nwhere w1.temperature>w2.temperature\n\n# 使用datediff函数\nselect w2.id from Weather w1  \njoin  Weather w2 on datediff(w2.recordDate,w1.recordDate) = 1 \nwhere w1.temperature < w2.temperature;\n\n# Exists\nselect w1.id from Weather w1  \nwhere \n\tExists(select 1 from weather w2 where date_sub(w1.recordDate, interval 1 day) = w2.recordDate \nand w1.temperature>w2.temperature)\n```\n\n每台机器的进程平均运行时间\n\n```sql\nselect a.machine_id,ROUND(SUM(b.timestamp-a.timestamp)/count(*),3) as processing_time \nfrom Activity a \njoin Activity b on a.machine_id = b.machine_id and a.process_id = b.process_id \nand a.activity_type ='start' and b.activity_type='end'\ngroup by a.machine_id\n# 此题Exists大概不可行\n```\n\n员工奖金\n\n```sql\n# join\nselect name ,bonus \nfrom employee e \nleft join bonus b on e.empId = b.empId \nwhere bonus<1000 or bonus is null\n```\n\n学生们参加各科测试的次数\n\n```sql\n# join\nselect st.student_id, st.student_name,su.subject_name ,count(e.subject_name) as attended_exams \nfrom Students st \ncross join Subjects su \nleft join Examinations e on st.student_id = e.student_id and su.subject_name = e.subject_name\ngroup by st.student_id, su.subject_name order by st.student_id ,su.subject_name\n\n# with语句\nWITH student_with_sbjects AS (\n    SELECT s1.student_id, s1.student_name, s2.subject_name\n    FROM Students s1 CROSS JOIN Subjects s2\n),\nexam_count AS (\n    SELECT student_id,subject_name,COUNT(*) as attended_exams\n    FROM Examinations\n    GROUP BY student_id,subject_name\n)\nSELECT s.student_id,s.student_name,s.subject_name,IFNULL(e.attended_exams, 0) AS attended_exams\nFROM student_with_sbjects s\nLEFT JOIN exam_count e \nON s.student_id = e.student_id AND s.subject_name = e.subject_name\nORDER BY s.student_id,s.subject_name\n```\n\n至少有5名直接下属的经理\n\n```sql\n#join\nselect e1.name from Employee e1 join Employee e2 on e1.id =e2.managerId \ngroup by e2.managerId having count(*) >=5\n\n# 使用exists会很慢\nselect e1.name from Employee e1 \nwhere exists \n(select 1 from Employee e2 where e1.id = e2.managerId group by e2.managerId having  count(*)>=5)\n```\n\n确认率\n\n```sql\nselect s.user_id,\n\tround(ifNull(sum(c.action =\"confirmed\"),0)/count(*),2)\n\tas confirmation_rate\nfrom Signups s \nleft join Confirmations c on s.user_id = c.user_id\ngroup by s.user_id\n```\n\n### 聚合函数\n\n有趣的电影\n\n```sql\nselect * \nfrom cinema \nwhere id%2=1 and description != 'boring' \norder by rating desc\n```\n\n平均售价\n\n```sql\nselect Prices.product_id,\nifnull(ROUND(SUM(price*units)/SUM(units),2),0) \nas average_price\nfrom UnitsSold \nright join Prices on Prices.product_id = UnitsSold.product_id \nand purchase_date between start_date and end_date\ngroup by Prices.product_id\n```\n\n项目员工 I\n\n```sql\nselect p.project_id,\nRound(avg(e.experience_years),2) as average_years\nfrom Project p\nleft join Employee e on p.employee_id=e.employee_id\ngroup by p.project_id\n```\n\n各赛事的用户注册率\n\n```sql\nselect contest_id,\nROUND((count(*)/(select count(*) from Users))*100,2) as percentage \nfrom Register group by contest_id\norder by percentage desc,contest_id asc\n```\n\n查询结果的质量和占比\n\n```sql\nselect query_name,\nROUND(avg(rating/position),2) as quality, \nROUND(sum(case when rating<3 then 1 else 0 end) / count(result) * 100,2) as poor_query_percentage\nfrom Queries \ngroup by query_name \nhaving query_name is not null\n```\n\n每月交易 I\n\n```sql\nselect date_format(trans_date,'%Y-%m') as month,country,\ncount(*) as trans_count, \nsum(if(state='approved',1,0)) as approved_count,\nsum(amount) as trans_total_amount,\nsum(if (state='approved',amount,0)) as approved_total_amount \nfrom Transactions \ngroup by month,country\n```\n\n即时食物配送 II\n\n```sql\n# 窗口函数+子查询\nselect round((sum(if(order_date=customer_pref_delivery_date, 1, 0))/count(*))*100, 2) as immediate_percentage \nfrom (\n    select *,\n        row_number() over(partition by customer_id order by order_date) as first_order\n    from Delivery\n) A \nwhere A.first_order = 1\n\n# join\nselect \nround(100* sum(case when d1.order_date=d1.customer_pref_delivery_date and d1.order_date = d2.first_order then 1 else 0 end) /count(distinct d1.customer_id),2) \nas immediate_percentage \nfrom Delivery d1 left join\n(select customer_id, min(order_date) as first_order \nfrom Delivery group by customer_id) d2 \non d1.customer_id =d2.customer_id\n```\n\n游戏玩法分析 IV\n\n```sql\n# join\nselect \nround(sum(case when a1.event_date = DATE_ADD(a2.first_login, interval 1 day) then 1 else 0 end)/count(distinct a1.player_id),2) as fraction\nfrom Activity a1 left join \n(select player_id, min(event_date) AS first_login from Activity group by player_id) a2\non a1.player_id = a2.player_id\n\n# 在连接的时候筛选\nSELECT \n  ROUND(COUNT(a.player_id) /COUNT(m.player_id),2) AS fraction \nFROM\n  (SELECT player_id, MIN(event_date) AS 'firstD' from Activity Group by player_id) m\nLEFT JOIN \n  Activity a\nON \n  m.player_id = a.player_id AND date(m.firstD) = SUBDATE(date(a.event_date), interval 1 day)\n\n# 使用 with 搭配 窗口函数\n\nwith FirstLogin as (\n    select player_id,\n           event_date,\n           min(event_date) over (partition by player_id) as first_login,\n           lead(event_date) over (partition by player_id order by event_date) as next_login\n    from Activity\n)\nselect \n    round(sum(case when next_login = date_add(first_login, interval 1 day) then 1 else 0 end) / count(distinct player_id), 2) as fraction\nfrom FirstLogin\nwhere event_date = first_login;\n\n```\n\n### 排序和分组\n\n每位教师所教授的科目种类的数量\n\n```mysql\nselect teacher_id,count(distinct subject_id) as cnt \nfrom Teacher \ngroup by teacher_id\n```\n\n查询近30天活跃用户数\n\n```sql\nselect activity_date as day ,count(distinct user_id) as active_users from Activity \nwhere activity_date between \"2019-06-28\" and \"2019-07-27\" group by activity_date\n```\n\n销售分析III\n\n```sql\nselect product_id ,product_name \nfrom Product \nwhere product_id in\n(select distinct product_id from Sales group by product_id \n having count(if(sale_date not between \"2019-01-01\" and \"2019-03-31\",1,null))=0 )\n```\n\n超过5名学生的课\n\n```sql\nselect class from Courses \ngroup by class \nhaving count(student)>=5\n```\n\n求关注者的数量\n\n```sql\nselect user_id,\ncount(distinct follower_id) as followers_count \nfrom Followers \ngroup by user_id\n```\n\n只出现一次的最大数字\n\n```sql\nselect ifnull((select num from MyNumbers\ngroup by num\nhaving count(num) = 1\norder by num desc\nlimit 1),null) as num\n```\n\n买下所有产品的客户\n\n```sql\nselect customer_id from Customer \ngroup by customer_id \nhaving count(distinct product_key) = (select count(*) from Product)\n```\n\n### 高级查询和连接\n\n每位经理的下属员工数量\n\n```sql\nselect \ne1.employee_id,\ne1.name,\ncount(e2.reports_to) as reports_count,\nround(avg(e2.age)) as average_age\nfrom Employees e1 \nleft join Employees e2 on e1.employee_id = e2.reports_to\ngroup by e1.employee_id \nhaving reports_count >0\norder by e1.employee_id\n```\n\n员工的直属部门\n\n```sql\nselect employee_id,department_id\nfrom Employee \nwhere primary_flag = \"Y\"\ngroup by employee_id\nunion\nselect employee_id,department_id\nfrom Employee \ngroup by employee_id\nhaving count(department_id) = 1\n```\n\n 判断三角形\n\n```sql\nselect x,y,z ,\nif(x+y>z and y+z>x and x+z>y,\"Yes\",\"No\") as triangle \nfrom Triangle \n```\n\n连续出现的数字\n\n```sql\nSELECT distinct a.num as ConsecutiveNums\nfrom Logs as a \nleft join Logs as b on a.id = b.id-1\nleft join Logs as c on a.id = c.id-2\nwhere a.num = b.num and b.num = c.num\n```\n\n指定日期的产品价格\n\n```sql\n# 注意这种写法是错误的，因为case并不能起到组函数的作用，它会逐一检查每一行，可能会记录覆盖。\nWITH prices AS (\n    SELECT \n        product_id, \n        new_price, \n        change_date,\n        ROW_NUMBER() OVER (PARTITION BY product_id ORDER BY change_date DESC) AS ranking \n    FROM Products\n)\nSELECT \n    p.product_id,\n    CASE \n        WHEN p.change_date > '2019-08-16' THEN 10 \n        ELSE (\n            SELECT pr.new_price \n            FROM prices pr \n            WHERE pr.product_id = p.product_id AND pr.ranking = 1\n        )\n    END AS price\nFROM \n    Products p\nGROUP BY \n    p.product_id\n    \n# 正确\nselect product_id,new_price as price\nfrom (select *,row_number() over (partition by product_id order by change_date desc)\nas ranking from Products where change_date<=\"2019-08-16\") as P where ranking = 1\nunion\nselect product_id,10 from Products where product_id not in (select product_id from Products where change_date<=\"2019-08-16\")\n\n\n```\n\n最后一个能进入巴士的人\n\n```sql\nselect person_name \nfrom \n(select *,sum(weight) over (order by turn) as total_weight from Queue) q \nwhere q.total_weight<=1000 order by q.total_weight desc limit 1\n```\n\n按分类统计薪水\n\n```sql\nselect \"Low Salary\" as category,sum(income<20000) as accounts_count from Accounts\nunion all\nselect \"Average Salary\" as category,sum(income>=20000 and income<=50000) as accounts_count from Accounts\nunion all\nselect \"High Salary\" as category,sum(income>50000) as accounts_count from Accounts\n```\n\n### 子查询\n\n上级经理已离职的公司员工\n\n```sql\nselect employee_id \nfrom Employees \nwhere salary <30000 \nand manager_id not in (select employee_id from Employees)\norder by employee_id\n```\n\n换座位\n\n```sql\nselect s1.id,ifnull(s2.student,s1.student) as student from Seat s1 left join\n(select id ,student,if(id%2=0,id-1,id+1) as change_id from Seat ) s2  \non s1.id = s2.change_id\n\n# 窗口函数\nSELECT\n    id,\n    CASE \n        WHEN id % 2 = 0 THEN prev_student\n        WHEN id % 2 = 1 THEN next_student\n    END AS student\nFROM (\n    SELECT\n        id,\n        student,\n        LAG(student, 1, student) OVER (ORDER BY id) AS prev_student,\n        LEAD(student, 1, student) OVER (ORDER BY id) AS next_student\n    FROM Seat\n) AS subquery;\n\n# 三次自连接\nSELECT\n    s1.id,\nCASE\n        WHEN s1.id % 2 = 1 and s2.student is not null THEN\n        s2.student \n        WHEN s1.id % 2 = 1 and s2.student is null THEN\n        s1.student \n        ELSE s3.student \n    END student \nFROM\n    Seat s1\n    LEFT JOIN Seat s2 ON s1.id = s2.id - 1\n    LEFT JOIN Seat s3 ON s1.id = s3.id + 1\n\n```\n\n电影评分\n\n```sql\n(select u.name as results from MovieRating mr left join Users u on mr.user_id=u.user_id\ngroup by mr.user_id order by count(mr.movie_id) desc ,u.name limit 1)\nunion all\n(select m.title as results from MovieRating mr left join Movies m on \nmr.movie_id = m.movie_id\nwhere month(created_at) = 2 and year(created_at) =2020\ngroup by mr.movie_id\norder by AVG(mr.rating) desc,m.title limit 1)\n```\n\n\n\n2016年的投资\n\n```sql\nselect Round(sum(tiv_2016),2) as tiv_2016 from Insurance \nwhere pid in (select pid from Insurance group by lat,lon having count(pid) = 1) \nand pid not in (select pid from Insurance group by tiv_2015 having count(pid) = 1)\n```\n\n部门工资前三高的所有员工\n\n```sql\nselect Department,Employee,Salary from\n(\n    select d.name as Department,e.name as Employee,e.salary as Salary \n    ,DENSE_RANK() over (partition by d.id order by salary desc) as order_salary \n    from Employee e left join department d on e.departmentId = d.id\n) p \nwhere order_salary<=3\n```\n\n\n\n### 字符串函数 / 正则表达式 \n\n修复表中的名字\n\n```sql\nselect user_id ,concat(upper(substr(name,1,1)),lower(substr(name,2))) as name \nfrom Users\norder by user_id\n```\n\n患某种疾病的患者\n\n```sql\nselect * from Patients where conditions regexp '\\\\bDIAB1.*'\n\n# \\\\b：这是一个单词边界，确保匹配的是以 DIAB1 开头的单词。由于在 SQL 查询中反斜杠需要转义，因此使用两个反斜杠 \\\\ 来表示一个实际的反斜杠 \\。\n# .*：表示匹配零个或多个任意字符，意味着 DIAB1 后面可以跟随任何内容（或没有内容）。\n# 具体来说，它会匹配以下情况：DIAB1 出现在 conditions 列的开头。DIAB1 前面有空格或其他分隔符。\n```\n\n删除重复的电子邮箱\n\n```sql\ndelete from Person where id not in (\n    select a.id from (select min(id) as id from Person group by email) as a\n)\n```\n\n第二高的薪水\n\n```sql\nselect (\n    select distinct salary from employee order by salary desc limit 1,1\n) as SecondHighestSalary;\n```\n\n按日期分组销售产品\n\n```sql\nselect sell_date,\ncount(distinct product) as num_sold,\ngroup_concat(distinct product order by product separator \",\")  as products \nfrom Activities \ngroup by sell_date \norder by sell_date\n```\n\n列出指定时间段内所有的下单产品\n\n```sql\nselect p.product_name,\nsum(o.unit) as unit \nfrom Orders o \nleft join Products p on o.product_id  = p.product_id\nwhere Month(order_date) = 2 and year(order_date) =2020\ngroup by p.product_id \nhaving unit>=100\n```\n\n查找拥有有效邮箱的用户\n\n```sql\nselect * \nfrom Users \nwhere mail regexp '^[a-zA-Z][a-zA-Z0-9_.-]*\\\\@leetcode\\\\.com$'\n# ^：匹配字符串的开头。\n# [a-zA-Z]：匹配一个字母字符（大写或小写），即邮箱地址必须以一个字母开头。\n# [a-zA-Z0-9_.-]*：匹配零个或多个字母、数字、下划线 _、点 . 或连字符 -。这表示邮箱地址的本地部分（在 @ 之前的部分）可以包含这些字符。\n# \\@：匹配一个 @ 字符。由于 @ 是一个特殊字符，需要通过 \\\\ 进行转义。在 SQL 中，反斜杠本身也需要转义，因此这里用了 \\\\@。\n# leetcode\\.com：匹配 leetcode.com 字符串。由于点 . 在正则表达式中也是一个特殊字符（表示匹配任意单个字符），所以需要用 \\\\. 进行转义。在 SQL 中，反斜杠本身也需要转义，因此这里用了 \\\\.com。\n# $：匹配字符串的结尾。\n```\n\n","tags":["MySQL"],"categories":["computer_technology"]},{"title":"序言","url":"/2024/07/20/序言/","content":"\n## 序言\n\n1. **我们总是生活在一个民族文化系统当中的，无论你是自觉的还是不自觉的，它都是存在的。**\n2. 其实你在使用一种语言的时候，你就已经处于一个文化系统了。当然你也可以这样说，你是一个体，你不愿意就是说被限制在一种群体文化之中，但是这个也不是你一个人这个主观的选择就能够决定的事情，因为你已经是生活在这个文化系统当中了，我当然也不喜欢这个那种很狭隘的这种所谓民主主义的这个观念，我并不是那一种就是说在这方面特别赋予激情的这个人。\n3. 我们需要更清晰的去理解民族文化系统，认识它，因为这样你才能够理解我们自己，理解我们的社会，理解我们的历史。嗯，这对我们来说是必要的。\n4. 诗经里面有一个有经常出现的一个词，上帝这个词或者说类似的跟上帝类似的这个 “天”。我们如果用基督教文化来做一个归纳的话，它是全德和全能，它是全能容易理解，因为全能这时候它是无所不能，它是一个超越的一个最高的一个力量。是世间的权力的这个根源，是世界权力的根源，是吧？但是全德是不容易理解的，就所谓信仰一个根本性的一个基点，就是坚信上帝的权德。我们回到中国环境里面去看，就是上帝不是全德的，上帝不是全德，上帝可能是全能的，但上帝并不是全德的。上帝的头脑有时候是清楚的，有时候是混乱的，有混乱上帝会在这个世界上造成很多灾难，是无辜的人遭遇不幸，那不是全德的话，那么这个世界的合理秩序它何以建立？连天都不是全德的，连上帝都不是。现在连上帝有时候都会昏溃糊涂，会在这个世界上降下不应该有的灾难，使那些无辜的人或罪，是那些无辜的人不幸，那么这个世界它还能建立一个合理秩序吗？能够，凭人的德性。\n5. 在中国的文化系统中，世界的合理性不是由神来保证的，而是由人对德性和正义的追求来保证的。。而这种追求完美的体现在什么地方？完美学的体现在圣王的身上，圣人，圣王的身上。那么圣人或者圣王他们是什么样的人？嗯，就是说他们是具有一种完美的德性的人。\n6. 罗素说过一句话，如果不设定上帝的存在，根本无从讨论生命的意义问题。\n7. 在中国文化中：”仁“就是人的德性的完成，德性的完成即一是生命的最高意义。简而言之：臻于至善。\n8. 为什么在宗教里面他会强调就这一个人无论经受多么大的灾难，他都没有权利。就是无论你遭受多大的灾难，你不能对神的正义性给予任何怀疑，因为这是因为这是全部信仰的基础。\n9. 中国古老的一些很古老的诗歌，其实就是说如果语言障碍解决了以后，因为很多问题是实际上是因为语言障碍，你就觉得那个东西要跟我们的隔得很远。那语言障碍解决了以后，你如果没有语言障碍的话，他跟你是非常亲切的。因为这个民族文化，所以我们讲这个说民族文化是一个传统，它是一个有生命的东西，它是一个活的东西，它怎么是活的东西？因为它就活在你身上。\n10. **读书多的人会更喜欢自己。这个话听起来有点莫名其妙。**\n11. 以前我们读到的文学史里面，可能是把离骚看成是一个楚国的历史，楚国的政治的一种真实反应，把屈原和他人的冲突看成是一个邪恶与正义，一个具有正义的立场的和正确的政治态度的一个高贵的这个人物和那些卑鄙的下流的人物的一种冲突的一种反应，但这个东西是无法这样来认识的。而为什么呢？我们读离骚的时候，其实只有一个人在说话，是屈原在说话，他的对立面是没有说话的，没有说话的，这是文学家的特权。这其实很简单，这就在法庭上只有原告在说话，被告不说话，你控告一个死人，你说他多么坏？你控告一个不说话的人，嗯，这东西法官是无法做判决。\n12. 他的人格被否定了，他不仅在政治上被否定了，他在人格上也被否定了，他遇到了一个巨大的否定力量。而人面对这种巨大的否定力量的时候，人可能这个选择屈从就是说承认自己的政治上的错误和道德上的卑鄙，誓不洗心革面，完全屈从于这种压迫性的力量，这就是巴金在年代所做过的事情。忏悔录不是忏悔，它所做的全部的这个工作是自我辩护。\n13. 李白是否有很多地方跟我们一样庸俗？这个不重要，重要的是李白如何歌颂了他的那种不庸俗的那种人生追求和人生渴望。李白诗歌里面给我们提供了多少美好的人生向往，它使我们的生命得到一种滋养，得到滋养，得到一种美和快乐。\n14. 一个男孩，如果从小是跟他母亲一起长大的，这个男孩非常容易成为诗人，也就是容易成为废物。废物和诗人之间的分野其实很模糊。\n15. 你也有时候看到李白这个那种委曲求全，低声下气那种，所谓那个很有名的那个那句是这个成语的用法。“生不用封万户侯，但愿一识韩荆州”。就是去拍马屁的话，拍马屁这样的事儿说我们一定不干的话，这千万不要打这个赌，这恐怕是我们的生活与这个世界上所需要的一种基本技能之一，就是说比如说你知道对方的这个优点，而且你在内心里也很佩服这他的这种特悠长，但是鉴于这种你的这种个性的关系，你不愿意把它说出来，但是这个时候你发现说出来对你是更有好处的。唉，你就把它说出来了那么这个这是最高等级的，就是几乎与拍与不拍之间，唉，结与拍不拍，但是它是说，甚至于说你都自己也不能够很确切的弄清楚你是一种因为利益需要而把它的优点给说出来，还是因为出现内心的一种崇拜、钦佩、亲近而把它说出来了？这是有无之间的这样的一种境界。\n16. 在这个小说的世界里面，你用你的情感和经验建立了小说作者所提供的那个情感与经验的世界。你在这个虚构的世界当中，你经历各种各样的人生的人生的苦恼，人生的这个伤感愉悦，那么这时候你就实际上开始就是说展开了自己的生命，你认知到自己的各种各样的可能性，认知到自己的各种各样的可能性。那么而在这个过程里面，我们会更多的更清楚的体会到我是什么样的人，我需要什么？或者说我所向往的生命状态，我所向往的生活是什么样子，在这个过程里面我们会对自己有更多的期待，我们会对自己有更多的期待，这就是我说的这个读诗多的人更爱自己。\n17. **读古典诗词能更多地培养人对语言的敏感性。**\n18. 我们总是认为我们自己在说话，其实根本上是话在说我们。这句话你如果觉得它这个意义很含糊，逻辑不清楚，那么我可以把它改换成一些逻辑很清楚的话，就是话语系统先于我们而存在，话语系统远远比我们强大，当我们认为我们在说话的时候，其实不过是话语系统借助我们把自身重复了一次。其实我们大量的时候我们没有在说话，我们只是被话语系统重复了自身。\n19. 我们需要在这个语言所本身具有的这个原始的神秘和生机上去使用语言，那么我们需要就是说体会那些，就是说最精致的、最有力量的、最有创造性的语言作品。一个民族语言的特质体现得最透彻、达到的水准最高的状态是这个民族的诗歌。所以小说是可以翻译的，诗歌其实是没有办法翻译的，因为诗歌它不能脱离它自身的意愿。\n20. 到现在为止就是喜欢古典诗歌的人还是远远超过这个喜欢新诗的人，一个很重要的原因就是古典诗歌它经过很多时间的这个发展变化以后，它已经就是说把汉语的这种，就是说我们这样说，就是说一个民族的诗歌其实就是把这个民族的语言，它在这个情感和表达的这种可能性，把它充分的挖掘出来，把它充分的显示出来。\n21. 我们在解读古典诗歌的时候，我们就更，就是说我们能够更好地理解汉语的这种它的精美和他的那种微妙的表达，微妙的是因为诗歌的表达往往是就是说一个音节的变化，一个字眼的变化，它会带来完全不同的感受。我们会对语言更加敏感，对语言的敏感是使我们的生命变得更精致的一个条件。\n22. 理解语言的趣味就是你把自己的生活情感投入到这首诗里面去，你去体会这首诗的这个所包含的情感和经验。那么这首诗就是是以你的方式来讲的。当你解读它的时候，解读，阅读本身是一个创造性的活动，就是说你的情感和经验在这首诗里面他得到了验证，你体会到的是你，是自己，你收获的是你，是你所理解的一种美感。但是这还不是一个更最高的成本，正更高的一个成本就是说一首诗的解答里，一首诗不管作者是有意的的还是无意的，一首诗所包含的信息有时候是作者能够理解的，有时候是作者不能够理解的，或者他并没有意识到，因为一首一个作品的产生，它有它更深的背景和更大的历史条件。它有时候是作者有意识的创作，有时候它是这个语言自身的传统和自身的力量在这个作者身上的体现。\n23. 也就是说你能够用来解读的诗歌这个知识背景越是广大，那么这个作品所内涵的这个信息就会呈现的越丰富。\n","tags":["骆玉明古典诗词鉴赏"],"categories":["classical_poems"]},{"title":"大学毕业","url":"/2020/07/01/大学毕业/","content":"\n<img width: 300px  src=\"https://raw.githubusercontent.com/FindingWatch/Picture-Storge-For-Bolg/refs/heads/main/IMG_4715.JPG\"  />\n\n","tags":["学校"],"categories":["what_i_see"]},{"title":"F与过去（1）","url":"/2018/08/02/F与过去（1）/","content":"\n\n\n读本科的某个暑假，我曾和F一起爬南岳衡山。正午我们从胜利坊出发。\n\n“你认为上帝存在吗？”\n\n\"你觉得世界上颜色有多少种？是否有更基本的构成？\"\n\n“朱张是谁？”\n\n此间万言。\n\n晚上，我和F投宿了一家离山顶很近的寺庙，打算第二天早起看日出。冲过凉水澡，我们兴致未减，决定出去转转。\n\n寺外一片寂静，月色温柔。抬起头就看到了星星，我想到S的眼睛也像星星这样动人。我还想到我听到过的一个名字:漫明月。\n\n我还想起了中学那会儿，下晚自习回到宿舍，总是能听到楼对面有人在唱歌，有时是《想你的夜》，有时是《童话》，也许是记忆美化，我后来也很少听到这么入情的歌。眼前夜色如画，万般滋味涌上心头，始觉“秉烛夜游，良有以也”。\n\n\"你在干嘛？\"\n\n\"听风\"\n\n\"你可拉倒吧，冻死我了，赶紧回去吧\"\n\n可是无法入睡，包围我们的是和尚们的诵经声，包围上封寺的是漫漫长夜，点点星光。\n","tags":["F"],"categories":["what_i_see"]}]